
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "hyper2"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('hyper2')
Loading required package: magrittr
Loading required package: cubature

Attaching package: ‘hyper2’

The following object is masked from ‘package:stats’:

    weights

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("B")
> ### * B
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: B
> ### Title: Normalizing constant for the hyperdirichlet distribution
> ### Aliases: B probability mgf mean Jacobian dhyper2 dhyper2_e e_to_p
> ###   p_to_e mean_hyper2
> 
> ### ** Examples
> 
> 
> # Two different measures of central tendency:
> # mean_hyper2(chess,tol=0.1)   # takes ~10s to run
> maxp(chess)                    # faster
  Topalov     Anand    Karpov 
0.4036108 0.3405168 0.2558723 
> 
> # Using the 'disallowed' argument typically results in slow run times;
> # use high tol for speed:
> 
> # probability(chess,disallowed=function(p){p[1]>p[2]},tol=0.5)
> # probability(chess,disallowed=function(p){p[1]<p[2]},tol=0.5)
> 
> # Above should sum to 1 [they are exclusive and exhaustive events]
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Extract")
> ### * Extract
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Extract
> ### Title: Extract or replace parts of a hyper2 object
> ### Aliases: Extract.hyper2 extract extractor assign_lowlevel
> ###   overwrite_lowlevel [.hyper2 [<-.hyper2
> 
> ### ** Examples
> 
> data(chess)
> 
> chess["Topalov"]
Warning in print.hyper2(x) : powers have nonzero sum
log(Topalov^30)
> chess[c("Topalov","Anand")]
Warning in print.hyper2(x) : powers have nonzero sum
log((Anand + Topalov)^-35)
> chess[c("Anand","Topalov")]
Warning in print.hyper2(x) : powers have nonzero sum
log((Anand + Topalov)^-35)
> 
> # Topalov plays Anand and wins:
> 
> chess["Topalov"] <- chess["Topalov"]+1 
> chess[c("Topalov","Anand")] <- chess[c("Topalov","Anand")]-1
> 
> 
> # Topalov plays *Kasparov* and wins:
> chess["Topalov"] %<>% inc
> chess[c("Topalov","Kasparov")] %<>% dec
> 
> # overwriting idiom:
> H <- hyper2(list("Topalov","X"),6)
> chess[] <- H
> 
> H <- icons
> 
> 
> 
> 
> cleanEx()
> nameEx("NBA")
> ### * NBA
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: NBA
> ### Title: Basketball dataset
> ### Aliases: NBA NBA_likelihood NBA_maxp NBA_table basketball
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(NBA)
> dotchart(NBA_maxp)
> 
> 
> 
> 
> cleanEx()
> nameEx("Ops.hyper2")
> ### * Ops.hyper2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ops.hyper2
> ### Title: Arithmetic Ops Group Methods for hyper2 objects
> ### Aliases: Ops.hyper2 Ops hyper2_add hyper2_prod hyper2_sum_numeric
> ###   sum.hyper2
> ### Keywords: symbolmath
> 
> ### ** Examples
> 
> 
> chess2 <- hyper2(list("Kasparov","Karpov",c("Kasparov","Karpov")),c(2,3,-5))
> 
> chess + chess2
log(Anand^36 * (Anand + Karpov)^-35 * (Anand + Topalov)^-35 * Karpov^25
* (Karpov + Kasparov)^-5 * (Karpov + Topalov)^-18 * Kasparov^2 *
Topalov^30)
> 
> maxp(chess+chess2)
    Anand    Karpov  Kasparov   Topalov 
0.2909338 0.2185857 0.1456525 0.3448280 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Ops.hyper3")
> ### * Ops.hyper3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Ops.hyper3
> ### Title: Arithmetic Ops Group Methods for hyper3 objects
> ### Aliases: Ops.hyper3 hyper3_add hyper3_prod hyper3_sum_numeric
> ###   hyper3_add sum.hyper3 hyper3_equal
> ### Keywords: symbolmath
> 
> ### ** Examples
> 
> 
> H1 <- hyper3(list(c(a=1.2),c(b=1),c(a=1.2,b=1)),powers=c(3,4,-7))
> H2 <- hyper3(list(c(a=1.2),c(b=1.2),c(a=2.2,b=1.2)),powers=c(2,3,-5))
> 
> H1
log( (a=1.2)^3 * (a=1.2, b=1)^-7 * (b=1)^4)
> H2
log( (a=1.2)^2 * (a=2.2, b=1.2)^-5 * (b=1.2)^3)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("Print")
> ### * Print
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Print
> ### Title: Print methods
> ### Aliases: print.hyper2 print.hyper3 print Print pnv
> ###   give_warning_on_nonzero_power_sum nonzero_power_sum power_sum
> 
> ### ** Examples
> 
> data(chess)
> chess
log(Anand^36 * (Anand + Karpov)^-35 * (Anand + Topalov)^-35 * Karpov^22
* (Karpov + Topalov)^-18 * Topalov^30)
> 
> 
> 
> cleanEx()
> nameEx("Summary")
> ### * Summary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.hyper2
> ### Title: Summary method for hyper2 objects
> ### Aliases: summary.hyper2 print.summary.hyper2
> 
> ### ** Examples
> 
> summary(icons)
A hyper2 object of size 6.
pnames:  NB L PB THC OA WAIS 
Number of brackets: 15 
Sum of powers: 0 

Table of bracket lengths:
1 4 
6 9 

Table of powers:

-20 -18 -16 -15 -11  -9  -8   9  14  24  30  32 
  1   3   1   1   1   1   1   1   1   2   1   1 
> 
> 
> 
> cleanEx()
> nameEx("T20")
> ### * T20
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: T20
> ### Title: Indian Premier League T20 cricket
> ### Aliases: T20 T20_table T20_toss T20_maxp T20_toss_maxp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> summary(T20)
A hyper2 object of size 13.
pnames:  CSK DC DD GL KKR KTK KXIP MI PW RCB RPS RR SH 
Number of brackets: 79 
Sum of powers: 0 

Table of bracket lengths:
 1  2 
13 66 

Table of powers:

-22 -21 -20 -19 -18 -17 -16 -15 -12 -11 -10  -9  -7  -6  -5  -4  -2  -1   6  12 
  1   3   5   2   1   2   4   3   1   2   7   2   1   5   6  11   6   4   1   1 
 13  15  29  42  62  63  70  73  77  79  92 
  1   1   1   1   1   1   1   1   1   1   1 
> dotchart(T20_maxp)
> 
> 
> 
> 
> cleanEx()
> nameEx("as.ordertable")
> ### * as.ordertable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: as.ordertable
> ### Title: Convert an order table with DNS entries to a nice order table
> ### Aliases: as.ordertable
> 
> ### ** Examples
> 
> 
> as.ordertable(F1_table_2017)
           AUS CHN BHR RUS ESP MON CAN AZE AUT GBR HUN BEL ITA SIN MAL JPN USA
Hamilton     2   1   2   4   1   7   1   5   4   1   4   1   1   1   2   1   1
Vettel       1   2   1   2   2   1   4   4   2   7   1   2   3   0   4   0   2
Bottas       3   6   3   1   0   4   2   2   1   2   3   5   2   3   5   4   5
Raikkonen    4   5   4   3   0   2   7  14   5   3   2   4   5   0   0   5   3
Ricciardo    0   4   5   0   3   3   3   1   3   5   0   3   4   2   3   3   0
Verstappen   5   3   0   5   0   5   0   0   0   4   5   0  10   0   1   2   4
Perez        7   9   7   6   4  13   5   0   7   9   8  17   9   5   6   7   8
Ocon        10  10  10   7   5  12   6   6   8   8   9   9   6  10  10   6   6
Sainz        8   7   0  10   7   6   0   8   0   0   7  10  14   4   0   0   7
Hulkenberg  11  12   9   8   6   0   8   0  13   6  17   6  13   0  16   0   0
Massa        6  14   6   9  13   9   0   0   9  10   0   8   8  11   9  10   9
Stroll       0   0   0  11  16  15   9   3  10  16  14  11   7   8   8   0  11
Grosjean     0  11   8   0  10   8  10  13   6  13   0   7  15   9  13   9  14
Magnussen    0   8   0  13  14  10  12   7   0  12  13  15  11   0  12   8  16
Alonso       0   0  14   0  12   0  16   9   0   0   6   0  17   0  11  11   0
Vandoorne   13   0   0  14   0   0  14  12  12  11  10  14   0   7   7  14  12
Palmer       0  13  13   0  15  11  11   0  11   0  12  13   0   6  15  12   0
Wehrlein     0   0  11  16   8   0  15  10  14  17  15   0  16  12  17  15   0
Kvyat        9   0  12  12   9  14   0   0  16  15  11  12  12   0   0   0  10
Ericsson     0  15   0  15  11   0  13  11  15  14  16  16  18   0  18   0  15
Gasly        0   0   0   0   0   0   0   0   0   0   0   0   0   0  14  13   0
Giovinazzi  12   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
Hartley      0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0  13
Button       0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
Resta        0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0
           MEX BRA ABU
Hamilton     9   4   2
Vettel       4   1   3
Bottas       2   2   1
Raikkonen    3   3   4
Ricciardo    0   6   0
Verstappen   1   5   5
Perez        7   9   7
Ocon         5   0   8
Sainz        0  11   0
Hulkenberg   0  10   6
Massa       11   7  10
Stroll       6  16  18
Grosjean    15  15  11
Magnussen    8   0  13
Alonso      10   8   9
Vandoorne   12   0  12
Palmer       0   0   0
Wehrlein    14  14  14
Kvyat        0   0   0
Ericsson     0  13  17
Gasly       13  12  16
Giovinazzi   0   0   0
Hartley      0   0  15
Button       0   0   0
Resta        0   0   0
> ordertable2supp(as.ordertable(F1_table_2017[1:9,]))
log(Bottas^19 * (Bottas + Hamilton + Ocon + Perez + Raikkonen +
Ricciardo + Sainz + Verstappen)^-5 * (Bottas + Hamilton + Ocon + Perez
+ Raikkonen + Ricciardo + Sainz + Verstappen + Vettel)^-20 * (Bottas +
Hamilton + Ocon + Perez + Raikkonen + Ricciardo + Sainz + Vettel)^-2 *
(Bottas + Hamilton + Ocon + Perez + Raikkonen + Sainz + Verstappen +
Vettel)^-1 * (Bottas + Hamilton + Ocon + Perez + Ricciardo + Sainz +
Verstappen)^-2 * (Bottas + Hamilton + Ocon + Perez + Sainz +
Verstappen)^-1 * (Bottas + Ocon + Perez + Raikkonen + Ricciardo +
Sainz)^-1 * (Bottas + Ocon + Perez + Raikkonen + Ricciardo + Sainz +
Verstappen)^-6 * (Bottas + Ocon + Perez + Raikkonen + Ricciardo + Sainz
+ Verstappen + Vettel)^-9 * (Bottas + Ocon + Perez + Raikkonen +
Ricciardo + Sainz + Vettel)^-2 * (Bottas + Ocon + Perez + Raikkonen +
Sainz)^-2 * (Bottas + Ocon + Perez + Raikkonen + Sainz + Verstappen)^-2
* (Bottas + Ocon + Perez + Raikkonen + Sainz + Verstappen + Vettel)^-1
* (Bottas + Ocon + Perez + Raikkonen + Sainz + Vettel)^-2 * (Bottas +
Ocon + Perez + Ricciardo + Sainz)^-1 * (Bottas + Ocon + Perez +
Ricciardo + Sainz + Verstappen)^-1 * (Bottas + Ocon + Perez + Sainz)^-1
* (Bottas + Ocon + Perez + Sainz + Verstappen)^-1 * (Bottas + Ocon +
Raikkonen + Sainz + Verstappen)^-1 * (Bottas + Raikkonen + Sainz +
Verstappen)^-1 * Hamilton^20 * (Hamilton + Ocon + Perez)^-1 * (Hamilton
+ Ocon + Perez + Raikkonen + Ricciardo + Sainz + Verstappen)^-3 *
(Hamilton + Ocon + Perez + Raikkonen + Ricciardo + Sainz + Verstappen +
Vettel)^-3 * (Hamilton + Ocon + Perez + Raikkonen + Ricciardo + Sainz +
Vettel)^-1 * (Hamilton + Ocon + Perez + Raikkonen + Sainz +
Verstappen)^-2 * (Hamilton + Ocon + Perez + Raikkonen + Sainz +
Verstappen + Vettel)^-1 * (Hamilton + Ocon + Perez + Ricciardo +
Sainz)^-1 * (Hamilton + Ocon + Perez + Ricciardo + Sainz +
Verstappen)^-3 * (Hamilton + Ocon + Perez + Ricciardo + Sainz +
Vettel)^-1 * (Hamilton + Ocon + Perez + Sainz)^-1 * (Hamilton + Ocon +
Perez + Sainz + Verstappen)^-1 * (Hamilton + Perez + Ricciardo +
Sainz)^-1 * (Hamilton + Ricciardo + Sainz)^-1 * Ocon^18 * (Ocon +
Perez)^-2 * (Ocon + Perez + Raikkonen + Ricciardo + Sainz +
Verstappen)^-4 * (Ocon + Perez + Raikkonen + Ricciardo + Sainz +
Verstappen + Vettel)^-4 * (Ocon + Perez + Raikkonen + Sainz)^-1 * (Ocon
+ Perez + Raikkonen + Sainz + Verstappen)^-4 * (Ocon + Perez +
Raikkonen + Sainz + Verstappen + Vettel)^-2 * (Ocon + Perez + Raikkonen
+ Sainz + Vettel)^-1 * (Ocon + Perez + Raikkonen + Verstappen +
Vettel)^-1 * (Ocon + Perez + Ricciardo)^-1 * (Ocon + Perez + Ricciardo
+ Sainz)^-6 * (Ocon + Perez + Ricciardo + Sainz + Verstappen)^-6 *
(Ocon + Perez + Ricciardo + Sainz + Verstappen + Vettel)^-1 * (Ocon +
Perez + Ricciardo + Sainz + Vettel)^-1 * (Ocon + Perez + Sainz)^-3 *
(Ocon + Perez + Sainz + Verstappen)^-4 * (Ocon + Perez + Sainz +
Vettel)^-2 * (Ocon + Raikkonen + Sainz)^-1 * (Ocon + Raikkonen + Sainz
+ Verstappen)^-1 * (Ocon + Raikkonen + Verstappen + Vettel)^-1 * (Ocon
+ Ricciardo)^-2 * (Ocon + Ricciardo + Sainz)^-3 * (Ocon + Sainz)^-1 *
(Ocon + Sainz + Verstappen)^-2 * Perez^18 * (Perez + Raikkonen + Sainz
+ Verstappen)^-1 * (Perez + Raikkonen + Verstappen)^-1 * (Perez +
Ricciardo)^-1 * (Perez + Ricciardo + Sainz)^-1 * (Perez + Sainz)^-1 *
(Perez + Sainz + Verstappen)^-2 * (Perez + Sainz + Vettel)^-1 * (Perez
+ Verstappen)^-1 * Raikkonen^17 * (Raikkonen + Sainz + Verstappen)^-1 *
Ricciardo^14 * (Ricciardo + Sainz)^-1 * Sainz^11 * (Sainz +
Verstappen)^-1 * Verstappen^13 * Vettel^18)
> 
> 
> 
> 
> cleanEx()
> nameEx("attemptstable2supp3")
> ### * attemptstable2supp3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: attemptstable2supp3
> ### Title: Translate attempt tables to hyper3 support functions
> ### Aliases: attemptstable2supp attemptstable2supp3
> 
> ### ** Examples
> 
> 
> jj <- javelin_table[1:3,]
> jj
         throw1 throw2 throw3 throw4 throw5 throw6
Chopra    87.03  87.58  76.79      X      X  84.24
Vadlejch  83.98      X      X  82.86  86.67      X
Vesely    79.73  80.30  85.44      X  84.98      X
> attemptstable2supp3(jj)
log( (Chopra=1)^4 * (Chopra=3, Vadlejch=3, Vesely=2)^-1 * (Chopra=3,
Vadlejch=3, Vesely=3)^-1 * (Chopra=3, Vadlejch=3, Vesely=4)^-1 *
(Chopra=3, Vadlejch=4, Vesely=4)^-1 * (Chopra=3, Vadlejch=5,
Vesely=4)^-1 * (Chopra=4, Vadlejch=5, Vesely=4)^-1 * (Chopra=4,
Vadlejch=5, Vesely=5)^-1 * (Chopra=4, Vadlejch=5, Vesely=6)^-1 *
(Chopra=4, Vadlejch=6, Vesely=6)^-1 * (Chopra=5, Vadlejch=6,
Vesely=6)^-1 * (Chopra=6, Vadlejch=6, Vesely=6)^-1 * (Vadlejch=1)^3 *
(Vesely=1)^4)
> 
> 
> 
> 
> cleanEx()
> nameEx("baseball")
> ### * baseball
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baseball
> ### Title: Baseball results, following Agresti
> ### Aliases: baseball baseball_maxp baseball_table
> 
> ### ** Examples
> 
> baseball_table
           Miulwaukee Detroit Toronto New York Boston Cleveland Baltimore
Miulwaukee         NA    3+3i    2+5i     3+3i   5+1i      2+5i      2+5i
Detroit          4+3i      NA    4+3i     5+1i   2+5i      3+3i      1+5i
Toronto          4+2i    4+2i      NA     2+5i   3+3i      3+4i      1+6i
New York         4+3i    4+3i    2+4i       NA   4+2i      4+3i      2+4i
Boston           6+1i    6+0i    4+3i     4+3i     NA      4+2i      1+6i
Cleveland        4+2i    6+1i    4+2i     4+2i   5+2i        NA      3+4i
Baltimore        6+0i    4+3i    6+0i     6+1i   6+0i      2+4i        NA
> baseball_table[1:3,1:3] 
           Miulwaukee Detroit Toronto
Miulwaukee         NA    3+3i    2+5i
Detroit          4+3i      NA    4+3i
Toronto          4+2i    4+2i      NA
> home_away3(baseball_table[1:3,1:3],1.3)
log( (Detroit=1)^6 * (Detroit=1, Miulwaukee=1.3)^-6 * (Detroit=1,
Toronto=1.3)^-7 * (Detroit=1.3)^8 * (Detroit=1.3, Miulwaukee=1)^-7 *
(Detroit=1.3, Toronto=1)^-6 * (Miulwaukee=1)^8 * (Miulwaukee=1,
Toronto=1.3)^-9 * (Miulwaukee=1.3)^5 * (Miulwaukee=1.3, Toronto=1)^-4 *
(Toronto=1)^4 * (Toronto=1.3)^8)
> 
> 
> 
> 
> cleanEx()
> nameEx("carcinoma")
> ### * carcinoma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: carcinoma
> ### Title: Carcinoma dataset discussed by Agresti
> ### Aliases: carcinoma carcinoma_table carcinoma_maxp carcinoma_count
> 
> ### ** Examples
> 
> pie(carcinoma_maxp)
> 
> 
> 
> cleanEx()
> nameEx("character_to_number")
> ### * character_to_number
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: character_to_number
> ### Title: Convert a character vector to a numeric vector
> ### Aliases: character_to_number char2num
> 
> ### ** Examples
> 
>  x <- sample(9)
>  names(x) <- sample(letters[1:9])
>  H <- rank_likelihood(x)
>  character_to_number(letters[1:3],pnames(H))
[1] 4 1 2
> 
>  char2num(c("PB","L"),pnames(icons))
[1] 3 2
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("chess")
> ### * chess
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: chess
> ### Title: Chess playing dataset
> ### Aliases: chess chess_table chess_maxp rock_paper_scissors
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(chess)
> maxp(chess)
  Topalov     Anand    Karpov 
0.4036108 0.3405168 0.2558723 
> 
>  mgf(chess,c(Anand=2),tol = 0.1)  # tolerance for speed
[1] 0.1281159
> 
> 
> 
> 
> cleanEx()
> nameEx("consistency")
> ### * consistency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: consistency
> ### Title: Consistency check for hyper2 objects
> ### Aliases: consistency consistencyplot
> 
> ### ** Examples
> 
> 
> # consistency(icons)
> 
> x <- icons
> y <- icons
> pnames(y) <- rev(pnames(y))
> gradient(x,indep(equalp(x)))
[1] 132.0  82.5 118.5  69.0  30.0
> gradient(y,indep(equalp(y)))
[1] -132.0 -102.0  -63.0  -13.5  -49.5
> 
> 
> 
> 
> cleanEx()
> nameEx("constructor")
> ### * constructor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: constructor
> ### Title: Formula 1 dataset: the constructors' championship
> ### Aliases: constructor constructors constructor_2020
> ###   constructor_2020_maxp constructor_table_2020 constructor_2020_table
> ###   constructor_2021 constructor_2021_maxp constructor_table_2021
> ###   constructor_2021_table
> 
> ### ** Examples
> 
> dotchart(constructor_2021_maxp)
> 
> 
> 
> cleanEx()
> nameEx("counterstrike")
> ### * counterstrike
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: counterstrike
> ### Title: Counterstrike
> ### Aliases: counterstrike counterstrike_likelihood counterstrike_maxp
> ###   zacslist
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dotchart(counterstrike_maxp)
> 
> 
> 
> cleanEx()
> nameEx("curling")
> ### * curling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: curling
> ### Title: Curling at the Winter Olympics, 1998-2018
> ### Aliases: curling_table curling curling1 curling2 curling_maxp
> ###   curling1_maxp curling2_maxp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(curling)
> dotchart(curling1_maxp)
> 
> 
> 
> 
> cleanEx()
> nameEx("dirichlet")
> ### * dirichlet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dirichlet
> ### Title: Dirichlet distribution and generalizations
> ### Aliases: dirichlet rdirichlet is.dirichlet rp_unif gd Dirichlet gd GD
> ###   GD_wong Connor Mosimann
> 
> ### ** Examples
> 
> 
> x1 <- dirichlet(c(a=1,b=2,c=3))
> x2 <- dirichlet(c(c=3,d=4))
> 
> x1+x2
Warning in print.hyper2(x) : powers have nonzero sum
log( a * b^2 * c^6 * d^4)
> 
> H <- dirichlet(c(a=1,b=2,c=3,d=4))
> rdirichlet(10,H)
               a         b          c         d
 [1,] 0.04725284 0.2869008 0.35745477 0.3083916
 [2,] 0.23947579 0.2344381 0.28722170 0.2388644
 [3,] 0.07047703 0.1670509 0.30659152 0.4558806
 [4,] 0.03806498 0.2489778 0.29493161 0.4180256
 [5,] 0.22450245 0.2252278 0.06600831 0.4842614
 [6,] 0.27582528 0.1347879 0.23505027 0.3543366
 [7,] 0.12288136 0.1408926 0.12476268 0.6114634
 [8,] 0.06895659 0.3070236 0.34295764 0.2810622
 [9,] 0.11618732 0.4030595 0.27161655 0.2091367
[10,] 0.20439234 0.1835974 0.31702780 0.2949824
> colMeans(rdirichlet(1e4,H))
        a         b         c         d 
0.1437922 0.2169597 0.2848863 0.3543618 
> 
> 
> 
> 
> cleanEx()
> nameEx("eurodance")
> ### * eurodance
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eurodance
> ### Title: Eurovision Dance contest dataset
> ### Aliases: eurodance Eurodance eurodance_table eurodance_maxp
> 
> ### ** Examples
> 
> data(eurodance)
> dotchart(eurodance_maxp)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("eurovision")
> ### * eurovision
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: eurovision
> ### Title: Eurovision Song contest dataset
> ### Aliases: euro euro2009 eurovision Eurovision Eurovision2009
> ###   eurovision2009 eurovision2009_votingtable Eurovision_song_contest
> ###   eurovision_table eurovision_maxp
> 
> ### ** Examples
> 
> data(eurovision)
> dotchart(eurovision_maxp)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("fillup")
> ### * fillup
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fillup
> ### Title: Fillup function
> ### Aliases: fillup indep
> 
> ### ** Examples
> 
> fillup(c(1/2,1/3))
[1] 0.5000000 0.3333333 0.1666667
> 
> indep(c(1/2,1/3,1/6))
[1] 0.5000000 0.3333333
> 
> 
> 
> 
> cleanEx()
> nameEx("formula1")
> ### * formula1
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: formula1
> ### Title: Formula 1 dataset
> ### Aliases: formula1 formula_1 formula_one formula1_points_systems F1
> ###   F1_2014 F1_table_2016 F1_table_2017 F1_table_2018 F1_table_2019
> ###   formula1_table_2017 F1_points_2017 formula1_points_2017
> ###   formula1_2017_table F1_2015 F1_2016 F1_2017 F1_2018 F1_2019
> 
> ### ** Examples
> 
> summary(formula1)
A hyper2 object of size 25.
pnames:  Alonso Bottas Button Ericsson Gasly Giovinazzi Grosjean Hamilton Hartley Hulkenberg Kvyat Magnussen Massa Ocon Palmer Perez Raikkonen Resta Ricciardo Sainz Stroll Vandoorne Verstappen Vettel Wehrlein 
Number of brackets: 262 
Sum of powers: 0 

Table of bracket lengths:
 1  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 
23  3  6 12 16 18 19 20 19 20 19 19 19 11 12 12  8  5  1 

Table of powers:

-20  -9  -6  -5  -4  -3  -2  -1   1   2   5  11  12  13  14  15  16  17  18  19 
  1   1   3   1   3   4  12 214   1   1   1   3   1   1   4   2   1   3   1   3 
 20 
  1 
> ## Not run: 
> ##D #Takes too long
> ##D dotchart(maxp(formula1))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("ggrl")
> ### * ggrl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggol
> ### Title: Order statistics
> ### Aliases: ggol ggrl goodbad choose_losers choose_winners
> ###   general_grouped_rank_likelihood general_grouped_order_likelihood
> ###   rank_likelihood rankvec_likelihood elimination race Plackett
> ###   Plackett-Luce
> 
> ### ** Examples
> 
> 
> W <- hyper2(pnames=letters[1:5])
> W1 <- ggrl(W, 'a', letters[2:4],'e')  # 6-element list
> W2 <- ggrl(W, 'b', letters[3:5],'a')  # 6-element list
> 
> like_single_list(equalp(W1),W1)
[1] 0.05
> like_series(equalp(W1),list(W1,W2))
[1] -5.991465
> 
> if(FALSE){  # takes too long
+ # run 10 races:
+ r1 <- rrank(10,p=(7:1)/28)
+ colnames(r1) <- letters[1:7]
+ 
+ # Likelihood function for r1:
+ W <- rank_likelihood(r1)
+ 
+ H <- hyper2()
+ for(i in 1:20){
+   H <- H + race(sample(letters[1:5],sample(3,1),replace=FALSE))
+ }
+ equalp.test(H) # should not be significant (null is true)
+ 
+ H1 <- hyper2(pnames=letters[1:5])
+ H2 <- choose_losers(H1,letters[1:4],letters[1:2])   # {a,b} vs {c,d}; {a,b} lost
+ maxplist(H2,control=list(maxit=1))  # control set to save time
+ }
> 
> 
> 
> 
> cleanEx()
> nameEx("gradient")
> ### * gradient
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gradient
> ### Title: Differential calculus
> ### Aliases: gradient gradientn hessian hessian_lowlevel is_ok_hessian
> ###   bordered_hessian hessian_bordered
> 
> ### ** Examples
> 
> 
> data(chess)
> p <- c(1/2,1/3)
> delta <- rnorm(2)/1e5  # delta needs to be quite small
> 
> deltaL  <- loglik(p+delta,chess) - loglik(p,chess)
> deltaLn <- sum(delta*gradient(chess,p + delta/2))   # numeric
> 
> deltaL - deltaLn  # should be small [zero to first order]
[1] 2.817118e-14
> 
> H <- hessian(icons)
> is_ok_hessian(H)
[1]  7.126371e-02 -2.728246e+01  1.824722e+04 -7.317948e+06
> 
> 
> 
> 
> cleanEx()
> nameEx("handover")
> ### * handover
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: handover
> ### Title: Dataset on communication breakdown in handover between
> ###   physicians
> ### Aliases: handover handover_table handover_maxp handoff malpractice
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(handover)
> maxp(handover)
       t00        t01        t10        t11 
0.41954894 0.11127554 0.01798719 0.45118833 
> 
> 
> 
> cleanEx()
> nameEx("head.hyper2")
> ### * head.hyper2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: head.hyper2
> ### Title: First few terms of a distribution
> ### Aliases: head.hyper2
> 
> ### ** Examples
> 
> 
> p <- zipf(5)
> names(p) <- letters[1:5]
> H <- rank_likelihood(rrank(20,p))
> head(H)
Warning in print.hyper2(x) : powers have nonzero sum
log(a^18 * (a + b)^-1 * (a + b + c + d + e)^-20 * (a + b + c + e)^-3 *
(a + b + d)^-2 * (a + b + d + e)^-4)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("hepatitis")
> ### * hepatitis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hepatitis
> ### Title: Hepatitis dataset discussed by Agresti
> ### Aliases: hepatitis hepatitis_table hepatitis_maxp hepatitis_count
> 
> ### ** Examples
> 
> pie(hepatitis_maxp)
> 
> 
> 
> cleanEx()
> nameEx("hyper2-package")
> ### * hyper2-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hyper2-package
> ### Title: The Hyperdirichlet Distribution, Mark 2
> ### Aliases: hyper2-package
> ### Keywords: package
> 
> ### ** Examples
> 
> icons
log(L^24 * (L + NB + OA + THC)^-20 * (L + NB + OA + WAIS)^-9 * (L + NB
+ THC + WAIS)^-15 * (L + OA + PB + THC)^-11 * (L + OA + PB + WAIS)^-18
* (L + PB + THC + WAIS)^-16 * NB^32 * (NB + OA + PB + THC)^-18 * (NB +
OA + PB + WAIS)^-8 * (NB + PB + THC + WAIS)^-18 * OA^14 * PB^30 *
THC^24 * WAIS^9)
> maxp(icons)
        NB          L         PB        THC         OA       WAIS 
0.25230411 0.17364433 0.22458188 0.17011281 0.11068604 0.06867083 
> 
> 
> 
> cleanEx()
> nameEx("hyper2")
> ### * hyper2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hyper2
> ### Title: Basic functions in the hyper2 package
> ### Aliases: hyper2 brackets brackets.hyper2 powers powers.hyper2 powers<-
> ###   powers<-.hyper2 pnames pnames.hyper2 pnames.suplist pnames<-
> ###   pnames<-.hyper2 size size.hyper2 is.hyper2 as.hyper2 is_valid_hyper2
> ###   is_constant
> 
> ### ** Examples
> 
> o <- hyper2(list("a","b","c",c("a","b"),letters[1:3]),1:5) 
> 
> # Verify that the MLE is invariant under reordering
> pnames(icons) <- rev(pnames(icons))
> maxp(icons) - icons_maxp # should be small
       WAIS          OA         THC          PB           L          NB 
-0.18363193 -0.06294993 -0.05447923  0.05447116  0.06295686  0.18363307 
> 
> 
> 
> 
> cleanEx()
> nameEx("hyper3")
> ### * hyper3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hyper3
> ### Title: Weighted probability vectors: 'hyper3' objects
> ### Aliases: hyper3 as.hyper3 hyper3_to_hyper2 as.namedvectorlist
> ###   assign_lowlevel3 hyper3_bw hyper3_nv is.hyper3 is_ok_weightedplayers
> ###   is_valid_hyper3 loglik_single_redundant maxp3 list2nv
> ###   overwrite_lowlevel3 powers<-.hyper3 pnames<-.hyper3 weights
> ###   weights.hyper3
> 
> ### ** Examples
> 
> 
> hyper3(B=list("a",c("a","b"),"b"),W=list(1.2,c(1.2,1),1),powers=c(3,4,-7))
log( (a=1.2)^3 * (a=1.2, b=1)^4 * (b=1)^-7)
> hyper3(list(c(a=1.2),c(b=1),c(a=1.2,b=1)),powers=c(3,4,-7))
log( (a=1.2)^3 * (a=1.2, b=1)^-7 * (b=1)^4)
> 
> 
> ## Above two objects should be identical
> 
> 
> a <- hyper3()  # default creation method [empty object]
> 
> a[c(p1=1.3)] <- 5
> a[c(p1=1.3)] <- a[c(p1=1.3)] + 3
> a[c(p1=1.3,p2=1)]  <- a[c(p1=1.3,p2=1)] -1
> a
log( (p1=1.3)^8 * (p1=1.3, p2=1)^-1)
> 
> chess3  # representative simple hyper3 object
log( (Anand=1)^15 * (Anand=2.09)^24 * (Anand=2.43, Karpov=2.43)^49 *
(Anand=2.43, Kasparov=2.43)^46 * (Anand=3.43, Karpov=4.52)^-49 *
(Anand=3.43, Kasparov=4.52)^-43 * (Anand=4.52, Karpov=3.43)^-43 *
(Anand=4.52, Kasparov=3.43)^-37 * (Karpov=1)^12 * (Karpov=2.09)^25 *
(Karpov=2.43, Kasparov=2.43)^129 * (Karpov=3.43, Kasparov=4.52)^-94 *
(Karpov=4.52, Kasparov=3.43)^-99 * (Kasparov=1)^20 *
(Kasparov=2.09)^45)
> 
> 
> 
> 
> cleanEx()
> nameEx("icons")
> ### * icons
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: icons
> ### Title: Dataset on climate change due to O'Neill
> ### Aliases: icons icons_matrix icons_table icons_maxp oneill
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(icons)
> pie(icons_maxp)
> equalp.test(icons)

	Constrained support maximization

data:  icons
null hypothesis: NB = L = PB = THC = OA = WAIS
null estimate:
       NB         L        PB       THC        OA      WAIS 
0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667 
(argmax, constrained optimization)
Support for null:  -184.3772 + K

alternative hypothesis:  sum p_i=1 
alternative estimate:
        NB          L         PB        THC         OA       WAIS 
0.25230411 0.17364433 0.22458188 0.17011281 0.11068604 0.06867083 
(argmax, free optimization)
Support for alternative:  -174.9974 + K

degrees of freedom: 5
support difference = 9.379715
p-value: 0.002130838 

> 
> 
> 
> 
> cleanEx()
> nameEx("increment")
> ### * increment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: increment
> ### Title: Increment and decrement operators
> ### Aliases: increment decrement trial inc dec
> 
> ### ** Examples
> 
> data(chess)
> 
> ## Now suppose we observe an additional match, in which Topalov beats
> ## Anand.  To incorporate this observation into the LF:
> 
> 
> 
> trial("a",c("a","b"))
log( a * (a + b)^-1)
> 
> chess <- chess + trial("Topalov",c("Topalov","Anand"))
> 
> 
> 
> cleanEx()
> nameEx("interzonal")
> ### * interzonal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: interzonal
> ### Title: 1963 World Chess Championships
> ### Aliases: interzonal interzonal_maxp interzonal_table
> ###   interzonal_collusion interzonal_collusion_maxp curacao curacao3
> ###   stockholm1962 collusion interzonal_collusion
> ### Keywords: datasets
> 
> ### ** Examples
> 
> pie(interzonal_maxp)
> 
> # samep.test(interzonal,c("Fischer","Geller")) # takes too long
> 
> 
> 
> cleanEx()
> nameEx("javelin")
> ### * javelin
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: javelin
> ### Title: Javelin dataset
> ### Aliases: javelin javelin1 javelin2 javelin_vector javelin_maxp
> ###   javelin1_maxp javelin2_maxp javelin_table
> 
> ### ** Examples
> 
> pie(javelin1_maxp)
> 
> 
> 
> cleanEx()
> nameEx("jester")
> ### * jester
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: jester
> ### Title: Jester dataset
> ### Aliases: jester maxjest jokes humour humor jester_maxp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> data(jester)
> # maxp(jester)  # takes too long
> 
> loglik(indep(jester_maxp),jester)
[1] -8004.45
> 
> 
> 
> 
> cleanEx()
> nameEx("karate")
> ### * karate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: karate
> ### Title: Karate dataset
> ### Aliases: karate karate_table karate_maxp karate_zermelo
> 
> ### ** Examples
> 
> summary(karate)
A hyper2 object of size 82.
pnames:  akondzo alhadharim alkhathami almasatfa avila balcius bodrovs bouakel catro cenaj cheung dacosta daraghma delgado derafshipour dimitrov diouf elsawy ferreras figueira fillies galvez gidakos gill gordillo gorenc gudmundsson gutierrez hasanov hodzic hollowood homola jihwan joksic karkkalainen kavanagh khani krautsou kuhn limam lindelauf loannides maresca matthiasen mendez mertel mora muratov murtazaliev narkiniemi ngamphuengphit nievas noriega nyoni oneil pak pataridze petkov pokorny poshen povrzenic rodionov rodriguiez rolle rosiello sabiecki sawadogo shafei sharma shinohara sijercic suleimani tadissi tawfik teodorescu thomas toli uygur uzakov velozo zakaria zhiwei 
Number of brackets: 147 
Sum of powers: 0 

Table of bracket lengths:
 1  2 
61 86 

Table of powers:

-13 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   1   2   3   4   5   6   7   8 
  2   1   1   6   8   1   4  11  17  10   8  17   8  11   9   4   6   2   4   2 
  9  10  12  16  17  18  19  20  31 
  3   3   1   2   2   1   1   1   1 
> 
> 
> 
> cleanEx()
> nameEx("keep")
> ### * keep
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: keep
> ### Title: Keep or discard players
> ### Aliases: keep retain discard drop keep_flawed retain_flawed
> ###   discard_flawed drop_flawed keep_flawed2 discard_flawed2
> 
> ### ** Examples
> 
> 
> maxp(icons)
        NB          L         PB        THC         OA       WAIS 
0.25230411 0.17364433 0.22458188 0.17011281 0.11068604 0.06867083 
> discard_flawed(icons,c("OA","WAIS"))
Warning in print.hyper2(x) : powers have nonzero sum
log(L^24 * (L + NB)^-9 * (L + NB + THC)^-35 * (L + PB)^-18 * (L + PB +
THC)^-27 * NB^32 * (NB + PB)^-8 * (NB + PB + THC)^-36 * PB^30 * THC^24)
> 
> ## Not run: 
> ##D # (takes too long)
> ##D data("skating")
> ##D maxp(skating)[1:4]      # numbers work, keep the first four skaters
> ##D maxp(keep_flawed(skating,pnames(skating)[1:4])) # differs!
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("kka")
> ### * kka
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: karpov_kasparov_anand
> ### Title: Karpov, Kasparov, Anand
> ### Aliases: karpov_kasparov_anand kka chess3 chess3_maxp kka_3draws
> ###   kka_3whites white_wins drawn_games black_wins plays_white_wins
> ###   plays_white_draws plays_white_loses kka_array
> ### Keywords: datasets
> 
> ### ** Examples
> 
> karpov_kasparov_anand
log(Anand^15 * (Anand + Karpov + draw + white)^-92 * (Anand + Kasparov
+ draw + white)^-80 * (Anand + white)^24 * Karpov^12 * (Karpov +
Kasparov + draw + white)^-193 * (Karpov + white)^25 * Kasparov^20 *
(Kasparov + white)^45 * draw^224)
> # pie(maxp(karpov_kasparov_anand))  # takes ~10s
> 
> M <- kka_array[,,1] + 1i*kka_array[,,3]
> home_away(M)
log(Anand^16 * (Anand + Karpov + home)^-43 * (Anand + Kasparov +
home)^-34 * (Anand + home)^24 * Karpov^22 * (Karpov + Kasparov +
home)^-64 * (Karpov + home)^25 * Kasparov^9 * (Kasparov + home)^45)
> home_away3(M,lambda=1.2)
log( (Anand=1)^16 * (Anand=1, Karpov=1.2)^-12 * (Anand=1,
Kasparov=1.2)^-26 * (Anand=1.2)^24 * (Anand=1.2, Karpov=1)^-31 *
(Anand=1.2, Kasparov=1)^-8 * (Karpov=1)^22 * (Karpov=1,
Kasparov=1.2)^-39 * (Karpov=1.2)^25 * (Karpov=1.2, Kasparov=1)^-25 *
(Kasparov=1)^9 * (Kasparov=1.2)^45)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("length")
> ### * length
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: length.hyper2
> ### Title: Length method for hyper2 objects
> ### Aliases: length.hyper2 length
> 
> ### ** Examples
> 
> 
> data("oneill")
Warning in data("oneill") : data set ‘oneill’ not found
> length(icons)
[1] 15
> seq_along(icons)
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
> 
> 
> 
> cleanEx()
> nameEx("loglik")
> ### * loglik
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loglik
> ### Title: Log likelihood functions
> ### Aliases: loglik loglik_single like_single_list like_series
> 
> ### ** Examples
> 
> data(chess)
> loglik(c(1/3,1/3),chess)
[1] -60.99695
> 
> loglik(rp(14,icons),icons)
 [1] -184.3772 -184.3772 -184.3772 -184.3772 -184.3772 -184.3772 -184.3772
 [8] -184.3772 -184.3772 -184.3772 -184.3772 -184.3772 -184.3772 -184.3772
> 
> ## Not run: 
> ##D  # takes too long
> ##D like_series(masterchef_maxp,masterchef)
> ##D like_series(indep(equalp(masterchef)),masterchef)
> ## End(Not run)
> 
> W <- hyper2(pnames=letters[1:6])
> W1 <- ggrl(W, 'a', letters[2:5],'f')              # 24-element list
> W2 <- ggrl(W, c('a','b'), c('c','d'),c('e','f'))  # 2^3=8 element list
> 
> like_single_list(rep(1/6,5),W1)      # information from first observation
[1] 0.03333333
> like_series(rep(1/6,5),list(W1,W2))  # information from both observations
[1] -7.901007
> 
> # hyper3 objects:
> H3 <- ordervec2supp3(letters[c(1,2,3,3,2,1,2)])
> loglik(c(a=1,b=2,c=3)/6,H3)
[1] -8.805875
> loglik(c(a=1,c=3,b=2)/6,H3) # identical
[1] -8.805875
> 
> 
> 
> cleanEx()
> nameEx("masterchef")
> ### * masterchef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: masterchef
> ### Title: Masterchef series 6
> ### Aliases: masterchef MasterChef masterchef_maxp
> ###   masterchef_constrained_maxp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> a1 <- indep(equalp(masterchef[[1]]))            # equal strengths
> a2 <- indep(masterchef_maxp)               # MLE
> a3 <- indep(masterchef_constrained_maxp)   # constrained MLE
> 
> ## Not run: 
> ##D  # takes too long
> ##D like_series(a1, masterchef)
> ##D like_series(a2, masterchef)
> ##D like_series(a3, masterchef)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("matrix2supp")
> ### * matrix2supp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: matrix2supp
> ### Title: Convert a matrix to a likelihood function
> ### Aliases: matrix2supp matrix_to_HD saffy volley
> 
> ### ** Examples
> 
> 
> icons == saffy(icons_table)  # should be TRUE
[1] TRUE
> 
> volley(volleyball_table) == volleyball # also should be TRUE
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("maxp")
> ### * maxp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: maxp
> ### Title: Maximum likelihood estimation
> ### Aliases: maxp maxplist maxp_lsl maxp_single maxp_single2 maxp_simplex
> ###   equalp allequal equalprobs
> 
> ### ** Examples
> 
> 
> maxp(icons)
        NB          L         PB        THC         OA       WAIS 
0.25230411 0.17364433 0.22458188 0.17011281 0.11068604 0.06867083 
> 
> W <- hyper2(pnames=letters[1:5])
> W1 <- ggrl(W, 'a', letters[2:3],'d')  # W1 is a suplist object
> ## Not run: maxp(W1)  # takes a long time to maximize a suplist
> 
> 
> 
> 
> cleanEx()
> nameEx("moto")
> ### * moto
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moto
> ### Title: MotoGP dataset
> ### Aliases: moto motoGP motoGP_2019 moto_table moto moto_maxp
> 
> ### ** Examples
> 
> pie(moto_maxp)
> 
> 
> 
> cleanEx()
> nameEx("mult_grid")
> ### * mult_grid
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mult_grid
> ### Title: Kronecker matrix functionality
> ### Aliases: mult_grid pair_grid
> 
> ### ** Examples
> 
> pair_grid(diag(2),diag(3))
     [,1] [,2] [,3] [,4] [,5] [,6]
[1,]    1    1    1    0    0    0
[2,]    0    0    0    1    1    1
[3,]    1    0    0    1    0    0
[4,]    0    1    0    0    1    0
[5,]    0    0    1    0    0    1
> mult_grid(lapply(1:4,diag))
[[1]]
      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13]
 [1,]    1    1    1    1    1    1    1    1    1     1     1     1     1
 [2,]    1    1    1    1    1    1    1    1    1     1     1     1     0
 [3,]    0    0    0    0    0    0    0    0    0     0     0     0     1
 [4,]    1    1    1    1    0    0    0    0    0     0     0     0     1
 [5,]    0    0    0    0    1    1    1    1    0     0     0     0     0
 [6,]    0    0    0    0    0    0    0    0    1     1     1     1     0
 [7,]    1    0    0    0    1    0    0    0    1     0     0     0     1
 [8,]    0    1    0    0    0    1    0    0    0     1     0     0     0
 [9,]    0    0    1    0    0    0    1    0    0     0     1     0     0
[10,]    0    0    0    1    0    0    0    1    0     0     0     1     0
      [,14] [,15] [,16] [,17] [,18] [,19] [,20] [,21] [,22] [,23] [,24]
 [1,]     1     1     1     1     1     1     1     1     1     1     1
 [2,]     0     0     0     0     0     0     0     0     0     0     0
 [3,]     1     1     1     1     1     1     1     1     1     1     1
 [4,]     1     1     1     0     0     0     0     0     0     0     0
 [5,]     0     0     0     1     1     1     1     0     0     0     0
 [6,]     0     0     0     0     0     0     0     1     1     1     1
 [7,]     0     0     0     1     0     0     0     1     0     0     0
 [8,]     1     0     0     0     1     0     0     0     1     0     0
 [9,]     0     1     0     0     0     1     0     0     0     1     0
[10,]     0     0     1     0     0     0     1     0     0     0     1

> 
> 
> 
> cleanEx()
> nameEx("ordertable")
> ### * ordertable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordertable
> ### Title: Order tables
> ### Aliases: ordertable order_table
> 
> ### ** Examples
> 
> 
> ordertable_to_ranktable(soling_table)
    c1          c2     c3      c4      c5          c6        c7      c8       
I   netherlands russia nz      USA     norway      denmark   sweden  australia
II  ukraine     norway nz      finland netherlands italy     UK      russia   
III norway      USA    germany russia  sweden      australia ukraine UK       
IV  australia   nz     norway  UK      italy       ukraine   germany russia   
V   netherlands USA    france  UK      norway      russia    nz      spain    
VI  netherlands USA    nz      denmark sweden      spain     france  canada   
    c9        c10     c11         c12     c13         c14       c15     c16    
I   france    canada  finland     ukraine UK          germany   spain   italy  
II  canada    germany australia   spain   france      USA       sweden  denmark
III canada    nz      france      denmark netherlands italy     finland spain  
IV  france    sweden  netherlands denmark canada      finland   spain   USA    
V   australia germany denmark     canada  finland     italy     ukraine sweden 
VI  russia    italy   germany     ukraine UK          australia finland norway 
> ordertable2supp(soling_table) == soling  # should be TRUE
[1] TRUE
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("ordertable2points")
> ### * ordertable2points
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordertable2points
> ### Title: Calculate points from an order table
> ### Aliases: ordertable2points
> 
> ### ** Examples
> 
> 
> points <- c(25, 18, 15, 12, 10, 8, 6, 4, 2, 1, 0, 0)
> o <- as.ordertable(F1_table_2017)
> ordertable2points(o,points)
  Hamilton     Vettel     Bottas  Raikkonen  Ricciardo Verstappen      Perez 
       363        317        305        205        200        168        100 
      Ocon      Sainz Hulkenberg      Massa     Stroll   Grosjean  Magnussen 
        87         54         43         43         40         28         19 
    Alonso  Vandoorne     Palmer   Wehrlein      Kvyat   Ericsson      Gasly 
        17         13          8          5          5          0          0 
Giovinazzi    Hartley     Button      Resta 
         0          0          0          0 
> 
> ordertable2points(ranktable_to_ordertable(rrank(9,volvo_maxp)),1)
  AbuDhabi Alvimedica     Brunel   Dongfeng     MAPFRE        SCA     Vestas 
         2          1          1          5          0          0          0 
> 
> 
> 
> 
> cleanEx()
> nameEx("ordertable2supp")
> ### * ordertable2supp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordertable2supp
> ### Title: Translate order tables to support functions
> ### Aliases: ordertable2supp ordervec2supp ordervec2supp order_obs
> 
> ### ** Examples
> 
> ordertable2supp(soling_table)
log(UK^6 * (UK + USA + australia + canada + denmark + finland + france
+ germany + italy + netherlands + norway + nz + russia + spain +
sweden)^-1 * (UK + USA + australia + canada + denmark + finland +
france + germany + italy + netherlands + norway + nz + russia + spain +
sweden + ukraine)^-6 * (UK + USA + australia + canada + denmark +
finland + france + germany + italy + netherlands + nz + russia + spain
+ sweden)^-1 * (UK + USA + australia + canada + denmark + finland +
france + germany + italy + netherlands + nz + russia + spain + sweden +
ukraine)^-1 * (UK + USA + australia + canada + denmark + finland +
france + germany + italy + netherlands + russia + spain + sweden)^-1 *
(UK + USA + australia + canada + denmark + finland + france + germany +
italy + norway + nz + russia + spain + sweden + ukraine)^-3 * (UK + USA
+ australia + canada + denmark + finland + france + germany + italy +
norway + nz + spain + sweden + ukraine)^-1 * (UK + USA + australia +
canada + denmark + finland + france + germany + italy + norway + spain
+ sweden + ukraine)^-1 * (UK + USA + australia + canada + denmark +
france + germany + italy + netherlands + russia + spain + sweden)^-1 *
(UK + USA + australia + canada + denmark + france + germany + italy +
russia + spain + sweden)^-1 * (UK + USA + australia + canada + denmark
+ france + germany + russia + spain + sweden)^-1 * (UK + USA + canada +
denmark + finland + france + germany + italy + netherlands + norway +
nz + russia + spain + sweden + ukraine)^-1 * (UK + USA + canada +
denmark + finland + france + germany + italy + netherlands + norway +
russia + spain + sweden + ukraine)^-1 * (UK + USA + canada + denmark +
finland + france + germany + italy + netherlands + russia + spain +
sweden + ukraine)^-1 * (UK + australia + canada + denmark + finland +
france + germany + italy + netherlands + nz + russia + spain + sweden +
ukraine)^-1 * (UK + australia + canada + denmark + finland + france +
germany + italy + norway + nz + russia + spain + sweden + ukraine)^-2 *
(UK + australia + canada + denmark + finland + france + germany + italy
+ norway + russia + spain + sweden + ukraine)^-1 * (UK + australia +
canada + denmark + finland + france + germany + italy + norway + spain
+ sweden + ukraine)^-1 * (UK + australia + canada + denmark + finland +
france + germany + italy + spain + sweden + ukraine)^-1 * (UK +
australia + canada + denmark + finland + france + italy + netherlands +
nz + russia + spain + sweden + ukraine)^-1 * (UK + australia + canada +
denmark + finland + france + italy + netherlands + nz + spain + sweden
+ ukraine)^-1 * (UK + australia + canada + denmark + finland + france +
italy + netherlands + nz + spain + ukraine)^-1 * (UK + australia +
canada + denmark + finland + germany + italy + norway + nz + russia +
spain + sweden + ukraine)^-1 * (UK + australia + canada + finland +
france + germany + italy + norway + russia + spain + sweden +
ukraine)^-1 * (UK + australia + canada + finland + france + germany +
italy + norway + russia + spain + ukraine)^-1 * (UK + australia +
canada + finland + france + germany + italy + norway + russia +
ukraine)^-1 * (UK + australia + canada + finland + france + germany +
italy + spain + sweden + ukraine)^-1 * (UK + australia + canada +
finland + france + germany + italy + spain + ukraine)^-1 * (UK +
australia + canada + finland + germany + italy + norway + russia +
ukraine)^-1 * (UK + australia + finland + germany + italy + norway +
russia + ukraine)^-1 * (UK + australia + finland + germany + italy +
norway + ukraine)^-1 * (UK + australia + finland + germany + norway +
ukraine)^-1 * (UK + australia + finland + norway)^-1 * (UK + australia
+ finland + norway + ukraine)^-1 * (UK + canada + denmark + finland +
france + italy + netherlands + nz + spain)^-1 * (UK + canada + denmark
+ finland + france + italy + netherlands + nz + spain + ukraine)^-1 *
(UK + canada + finland + france + germany + italy + spain + ukraine)^-1
* (UK + canada + finland + germany + italy + spain + ukraine)^-1 * (UK
+ finland + germany + italy + spain + ukraine)^-1 * (UK + germany +
italy + spain)^-1 * (UK + germany + italy + spain + ukraine)^-1 * USA^5
* (USA + australia + canada + denmark + france + germany + russia +
spain + sweden)^-1 * (USA + australia + canada + denmark + france +
germany + spain + sweden)^-1 * (USA + australia + denmark + france +
germany + spain + sweden)^-1 * (USA + australia + denmark + france +
spain + sweden)^-1 * (USA + canada + denmark + finland + france +
germany + italy + netherlands + russia + spain + sweden + ukraine)^-1 *
(USA + canada + denmark + finland + france + germany + netherlands +
russia + spain + sweden)^-1 * (USA + canada + denmark + finland +
france + germany + netherlands + russia + spain + sweden + ukraine)^-1
* (USA + canada + denmark + finland + france + netherlands + russia +
spain + sweden)^-1 * (USA + canada + denmark + finland + france +
netherlands + spain + sweden)^-1 * (USA + canada + denmark + finland +
netherlands + spain)^-1 * (USA + canada + denmark + finland +
netherlands + spain + sweden)^-1 * (USA + canada + denmark + finland +
spain)^-1 * (USA + canada + finland + spain)^-1 * (USA + denmark +
france + spain + sweden)^-1 * (USA + denmark + france + sweden)^-1 *
(USA + denmark + sweden)^-1 * (USA + finland + spain)^-1 * (USA +
spain)^-1 * australia^6 * (australia + canada + denmark + finland +
germany + italy + norway + nz + russia + spain + sweden + ukraine)^-1 *
(australia + canada + denmark + finland + germany + italy + nz + russia
+ spain + sweden + ukraine)^-1 * (australia + canada + denmark +
finland + germany + italy + nz + spain + sweden + ukraine)^-1 *
(australia + canada + denmark + finland + germany + italy + spain +
sweden + ukraine)^-1 * (australia + canada + denmark + finland +
germany + italy + sweden + ukraine)^-1 * (australia + finland +
norway)^-1 * canada^6 * (canada + denmark + finland + france + italy +
netherlands + nz + spain)^-1 * (canada + denmark + finland + germany +
italy + sweden + ukraine)^-1 * (canada + denmark + finland + italy +
sweden + ukraine)^-1 * (canada + finland + italy + sweden + ukraine)^-1
* denmark^5 * (denmark + finland + france + italy + netherlands + nz +
spain)^-1 * (denmark + finland + france + italy + netherlands +
spain)^-1 * (denmark + finland + italy + netherlands + spain)^-1 *
(denmark + sweden)^-1 * finland^6 * (finland + italy + netherlands +
spain)^-1 * (finland + italy + spain)^-1 * (finland + italy + sweden +
ukraine)^-1 * (finland + norway)^-1 * (finland + spain)^-1 * france^6 *
germany^6 * (germany + italy + spain)^-1 * italy^5 * (italy + spain)^-1
* (italy + sweden + ukraine)^-1 * netherlands^6 * norway^5 * nz^6 *
russia^6 * spain^5 * sweden^5 * (sweden + ukraine)^-1 * ukraine^6)
> 
> 
> a1 <- c(a=2,b=3,c=1,d=5,e=4) # a: 2nd, b: 3rd, c: 1st, d: 5th, e: 4th
> a2 <- c(a=1,b=0,c=0,d=2,e=3) # a: 2nd, b: DNF, c: DNF, d: 2nd, e: 3rd
> a3 <- c(a=1,b=3,c=2)         # a: 1st, b: 3rd, c: 2nd. NB only a,b,c competed
> a4 <- c(a=1,b=3,c=2,d=0,e=0) # a: 1st, b: 3rd, c: 2nd, d,e: DNF
> 
> 
> ## ordervec2supp() may be added [if the observations are independent]:
> 
> H1 <- ordervec2supp(a1) + ordervec2supp(a2) + ordervec2supp(a3)
> H2 <- ordervec2supp(a1) + ordervec2supp(a2) + ordervec2supp(a4)
> 
> ## Thus H1 and H2 are identical except for the third race.  In H1, 'd'
> ## and 'e' did not compete, but in H2, 'd' and 'e' did not finish (and
> ## notionally came last):
> 
> pmax(H1)
log(a^3 * (a + b + c)^-1 * (a + b + c + d + e)^-2 * (a + b + d + e)^-1
* b * (b + c)^-1 * (b + c + d + e)^-1 * (b + c + e)^-1 * (b + d + e)^-1
* c^2 * d * (d + e)^-1 * e^2)
> pmax(H2)   # d,e not finishing affects their estimated strength
log(a^3 * (a + b + c + d + e)^-3 * (a + b + d + e)^-1 * b^2 * (b + c +
d + e)^-2 * (b + c + e)^-1 * (b + d + e)^-2 * c^2 * d * (d + e)^-1 *
e^2)
> 
> 
> 
> 
> cleanEx()
> nameEx("ordertrans")
> ### * ordertrans
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordertrans
> ### Title: Order transformation
> ### Aliases: ordertrans ordertransplot
> 
> ### ** Examples
> 
> 
> x <- c(e=4L,a=7L,c=6L,b=1L,f=2L,g=3L,h=5L,i=8L,d=9L)
> x
e a c b f g h i d 
4 7 6 1 2 3 5 8 9 
> ordertrans(x,letters[1:9])
a b c d e f g h i 
7 1 6 9 4 2 3 5 8 
> 
> o <- skating_table[,1]
> names(o) <- rownames(skating_table)
> o
     hughes   slutskaya        kwan       cohen      suguri  butyrskaya 
          1           3           2           5           4           6 
   robinson   sebestyen    kettunen   volchkova maniachenko     fontana 
          7           8           9          10          13          14 
  liashenko        onda      hubert       meier   gusmeroli   soldatova 
         15          11          12          16          17          19 
      hegel     giunchi   babiakova       kopac        luca 
         20          18          22          21          23 
> ordertrans(o)
  babiakova  butyrskaya       cohen     fontana     giunchi   gusmeroli 
         22           6           5          14          18          17 
      hegel      hubert      hughes    kettunen       kopac        kwan 
         20          12           1           9          21           2 
  liashenko        luca maniachenko       meier        onda    robinson 
         15          23          13          16          11           7 
  sebestyen   slutskaya   soldatova      suguri   volchkova 
          8           3          19           4          10 
> 
> ordertrans(sample(icons_maxp),icons)
        NB          L         PB        THC         OA       WAIS 
0.25230411 0.17364433 0.22458188 0.17011281 0.11068604 0.06867083 
> 
> 
> rL <- volvo_maxp   # rL is "ranks Likelihood"
> rL[] <- rank(-volvo_maxp)
> 
> r1 <- volvo_table[,1]  # ranks race 1
> names(r1) <- rownames(volvo_table)
> ordertransplot(rL,r1,xlab="likelihood rank, all races",ylab="rank, race 1")
> 
> 
> 
> 
> cleanEx()
> nameEx("ordervec2supp3")
> ### * ordervec2supp3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ordervec2supp3
> ### Title: Various functionality for races and hyper3 likelihood functions
> ### Aliases: race3 num3 den3 char2nv ordervec2supp3 ordervec2supp3a
> ###   ordertable2supp3 args2ordervec race_to_hyper3 cheering cheering3
> 
> ### ** Examples
> 
> 
> 
> ordervec2supp3(c("a","a","b","c","a","b","c"))
log( (a=1)^3 * (a=1, b=1, c=1)^-1 * (a=1, b=1, c=2)^-1 * (a=1, b=2,
c=2)^-1 * (a=2, b=2, c=2)^-1 * (a=3, b=2, c=2)^-1 * (b=1)^2 * (b=1,
c=1)^-1 * (c=1)^1)
> 
> ordervec2supp3(rrace3())
log( (a=1)^2 * (a=1, b=3)^-1 * (a=1, b=4)^-1 * (a=1, b=4, c=1)^-1 *
(a=1, b=4, c=1, d=1)^-1 * (a=1, b=4, c=2, d=1)^-1 * (a=2, b=4, c=2,
d=1)^-1 * (b=1)^3 * (b=2)^-1 * (b=3)^-1 * (c=1)^2 * (d=1)^1)
> 
> (o <- args2ordervec(a=c(1,6,9), b=c(2,3,4), c=c(1.1,11.1)))
[1] "a" "c" "b" "b" "b" "a" "a" "c"
> H <- ordervec2supp3(o)
> H
log( (a=1)^3 * (a=1, c=1)^-1 * (a=2, b=1, c=1)^-1 * (a=2, b=2, c=1)^-1
* (a=2, b=3, c=1)^-1 * (a=2, b=3, c=2)^-1 * (a=2, c=1)^-1 * (a=3, b=3,
c=2)^-1 * (b=1)^3 * (c=1)^1)
> # equalp.test(H)   # takes too long for here
> 
> 
> ## Race: six competitors a-f finishing in alphabetical order.  Mutually
> ## supporting groups: (acd), (bf), (e).  Competitor "e" is not
> ## suppported by anyone else (he is a singleton) so does not need to be
> ## mentioned in argument 'e' and there are only two helpfulnesses to be
> ## considered: that of (acd) and that of (bf), which we will take to be
> ## 1.88 and 1.1111 respectively:
> 
> cheering3(v=letters[1:6],e=c(a=1,c=1,b=2,d=1,e=2),help=c(1.88,1.1111))
log( (a=1)^1 * (a=1, b=1, c=1, d=1, e=1, f=1)^-1 * (b=1)^1 * (b=1,
c=1.88, d=1.88, e=1, f=1)^-1 * (c=1.88)^1 * (c=1.88, d=1.88, e=1.1111,
f=1)^-1 * (d=1.88)^1 * (d=1.88, e=1.1111, f=1)^-1 * (e=1.1111)^1 *
(e=1.1111, f=1)^-1)
> 
> 
> 
> 
> ## Another race: four competitors, including two clones of "a", and two
> ## singletons "b" and "c".  Here "a" helps his clone at 1.88; and "b"
> ## and "c" help one another at 1.111:
> 
> cheering3(v=c("a","b","a","c"),e=c(a=1,b=2,c=2),help=c(1.8,1.111))
log( (a=1)^1 * (a=1.8)^1 * (a=1.8, b=1, c=1)^-1 * (a=1.8, c=1.111)^-1 *
(a=2, b=1, c=1)^-1 * (b=1)^1)
> 
> 
> ## Same race as above but this time there are two clones of "b", one of
> ## whom did not finish:
> 
> cheering3(v=c("a","b","a","c"),e=c(a=1,b=2,c=2),help=c(1.8,1.111),"b")
log( (a=1)^1 * (a=1.8)^1 * (a=1.8, b=1.111, c=1.111)^-1 * (a=1.8, b=2,
c=1)^-1 * (a=2, b=2, c=1)^-1 * (b=1)^1 * (b=1.111, c=1.111)^-1 *
(c=1.111)^1)
> 
> 
> ## Most common case would be that the clones help each other but noone
> ## else:
> 
> cheering3(v=c("a","b","a","c"),e=c(a=1,b=2,c=3),help=c(1.8,1.111,1),"b")
log( (a=1)^1 * (a=1.8)^1 * (a=1.8, b=1.111, c=1)^-1 * (a=1.8, b=2,
c=1)^-1 * (a=2, b=2, c=1)^-1 * (b=1)^1 * (b=1.111, c=1)^-1 * (c=1)^1)
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("pairwise")
> ### * pairwise
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pairwise
> ### Title: Pairwise comparisons
> ### Aliases: pairwise zermelo home_away home_away3 white_draw white_draw3
> 
> ### ** Examples
>  #Data is the top 5 players from Borozki's table 1
> 
> M <- matrix(c(
+ 0,10,0, 2,5,
+ 4, 0,0, 6,6,
+ 0, 0,0,15,0,
+ 0, 8,0, 0,7,
+ 1 ,0,3, 0,0
+ ),5,5,byrow=TRUE) 
> players <-  c("Agassi","Becker","Borg","Connors","Courier")
> dimnames(M) <- list(winner=players,loser=players)
> M
         loser
winner    Agassi Becker Borg Connors Courier
  Agassi       0     10    0       2       5
  Becker       4      0    0       6       6
  Borg         0      0    0      15       0
  Connors      0      8    0       0       7
  Courier      1      0    3       0       0
> # e.g. Agassi beats Becker 10 times and loses 4 times
> pairwise(M)
log(Agassi^17 * (Agassi + Becker)^-14 * (Agassi + Connors)^-2 * (Agassi
+ Courier)^-6 * Becker^16 * (Becker + Connors)^-14 * (Becker +
Courier)^-6 * Borg^15 * (Borg + Connors)^-15 * (Borg + Courier)^-3 *
Connors^15 * (Connors + Courier)^-7 * Courier^4)
> zermelo(M)
    Agassi     Becker       Borg    Connors    Courier 
0.30345344 0.11650669 0.44416163 0.10115551 0.03472273 
> # maxp(pairwise(M))  # should be identical (takes ~10s to run)
> 
> 
> M2 <- matrix(c(NA,19+2i,17,11+2i,16+5i,NA,12+4i,12+6i,12+2i,19+10i,
+ NA,12+4i,11+2i,16+2i,11+7i,NA),4,4)
> teams <- LETTERS[1:4]
> dimnames(M2) <- list("@home" = teams,"@away"=teams)
> home_away(M2)
log(A^9 * (A + B + home)^-42 * (A + C + home)^-31 * (A + D + home)^-26
* (A + home)^39 * B^14 * (B + C + home)^-45 * (B + D + home)^-36 * (B +
home)^54 * C^11 * (C + D + home)^-34 * (C + home)^40 * D^12 * (D +
home)^35)
> # home_away3(M2,lambda=1.2)  # works but takes too long (~3s)
> home_away3(M2[1:3,1:3],lambda=1.2) 
log( (A=1)^7 * (A=1, B=1.2)^-24 * (A=1, C=1.2)^-19 * (A=1.2)^28 *
(A=1.2, B=1)^-18 * (A=1.2, C=1)^-12 * (B=1)^12 * (B=1, C=1.2)^-22 *
(B=1.2)^38 * (B=1.2, C=1)^-23 * (C=1)^4 * (C=1.2)^29)
> 
> M <- kka_array[,,1] + 1i*kka_array[,,3] # ignore draws
> home_away(M)
log(Anand^16 * (Anand + Karpov + home)^-43 * (Anand + Kasparov +
home)^-34 * (Anand + home)^24 * Karpov^22 * (Karpov + Kasparov +
home)^-64 * (Karpov + home)^25 * Kasparov^9 * (Kasparov + home)^45)
> # home_away3(M,lambda=1.3)  # works but takes too long (~3s)
> 
> 
> 
> 
> cleanEx()
> nameEx("pentathlon")
> ### * pentathlon
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pentathlon
> ### Title: Pentathlon
> ### Aliases: pentathlon pentathlon_table pentathlon_maxp
> ###   pentathlon_ordertable
> 
> ### ** Examples
> 
> data(pentathlon)
> pie(pentathlon_maxp)
> 
> 
> 
> cleanEx()
> nameEx("powerboat")
> ### * powerboat
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: powerboat
> ### Title: Powerboat dataset
> ### Aliases: powerboat powerboat_maxp powerboat2018 powerboat_2018
> ###   powerboat_table
> 
> ### ** Examples
> 
> pie(powerboat_maxp)
> 
> 
> 
> 
> cleanEx()
> nameEx("profile")
> ### * profile
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: profile
> ### Title: Profile likelihood and support
> ### Aliases: profile profile_support profile_likelihood
> ###   profile_support_single profile_likelihood_single proflike profsupp
> ###   profsup
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D   # takes too long
> ##D p <- seq(from=0.5,to=0.4,len=10)
> ##D u <- profsupp(icons,"NB",p)
> ##D plot(p,u-max(u))
> ##D abline(h=c(0,-2))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("psubs")
> ### * psubs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: psubs
> ### Title: Substitute players of a hyper2 object
> ### Aliases: psubs psubs_single psubs_names psubs_pnames
> 
> ### ** Examples
> 
> 
> psubs(icons,c("L","NB"),c("London","Norfolk Broads"))
log(London^24 * (London + Norfolk Broads + OA + THC)^-20 * (London +
Norfolk Broads + OA + WAIS)^-9 * (London + Norfolk Broads + THC +
WAIS)^-15 * (London + OA + PB + THC)^-11 * (London + OA + PB +
WAIS)^-18 * (London + PB + THC + WAIS)^-16 * Norfolk Broads^32 *
(Norfolk Broads + OA + PB + THC)^-18 * (Norfolk Broads + OA + PB +
WAIS)^-8 * (Norfolk Broads + PB + THC + WAIS)^-18 * OA^14 * PB^30 *
THC^24 * WAIS^9)
> 
> rhyper2() %>% psubs(letters,LETTERS)   # ignore i,j,k,...,z
log(A^4 * (A + B + C)^-1 * (A + B + C + D + E + F + G + H)^-10 * (A + B
+ C + D + E + F + H)^-1 * (A + B + C + D + E + G + H)^-1 * (A + B + C +
D + E + H)^-2 * (A + B + C + E)^-1 * (A + B + C + E + F + G + H)^-1 *
(A + B + C + E + F + H)^-1 * (A + B + C + E + H)^-1 * (A + B + E + G) *
(A + C)^-1 * (A + C + D + E + F + G + H)^-2 * (A + C + D + E + F +
H)^-1 * (A + C + D + E + G + H)^-1 * (A + C + D + E + H)^-1 * (A + C +
E + H) * (A + D)^-1 * (A + D + E + F)^-1 * (A + D + E + F + H)^-1 * (A
+ D + F)^-1 * (A + E + F + G) * (A + E + F + H) * (A + F)^-1 * (A +
G)^-1 * B^6 * (B + C + D + E + H)^-1 * (B + C + E)^-1 * (B + C + E +
F)^-1 * (B + C + E + F + H)^-1 * (B + C + E + H)^-1 * (B + E)^-2 * (B +
E + F)^-1 * (B + E + F + G) * (B + F)^-1 * C^5 * (C + D + E + H)^-1 *
(C + G)^-1 * D^5 * (D + E + H)^-1 * E^3 * (E + F)^-1 * (E + H)^-1 * F^5
* G^7 * H^5)
> 
> psubs(icons,tolower(pnames(icons)))
log(l^24 * (l + nb + oa + thc)^-20 * (l + nb + oa + wais)^-9 * (l + nb
+ thc + wais)^-15 * (l + oa + pb + thc)^-11 * (l + oa + pb + wais)^-18
* (l + pb + thc + wais)^-16 * nb^32 * (nb + oa + pb + thc)^-18 * (nb +
oa + pb + wais)^-8 * (nb + pb + thc + wais)^-18 * oa^14 * pb^30 *
thc^24 * wais^9)
> 
> 
> 
> 
> cleanEx()
> nameEx("pwa")
> ### * pwa
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pwa
> ### Title: Player with advantage
> ### Aliases: pwa chameleon extra_strength additional_strength
> ###   training_strength wet_strength white_strength
> 
> ### ** Examples
> 
> 
> summary(formula1 %>% pwa("Hamilton","pole"))
A hyper2 object of size 26.
pnames:  Alonso Bottas Button Ericsson Gasly Giovinazzi Grosjean Hamilton Hartley Hulkenberg Kvyat Magnussen Massa Ocon Palmer Perez Raikkonen Resta Ricciardo Sainz Stroll Vandoorne Verstappen Vettel Wehrlein pole 
Number of brackets: 262 
Sum of powers: 0 

Table of bracket lengths:
 1  2  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 
22  1  3  6 12 16 18 19 20 19 20 18 19 18 11 11 10  9  5  4  1 

Table of powers:

-20  -9  -6  -5  -4  -3  -2  -1   1   2   5  11  12  13  14  15  16  17  18  19 
  1   1   3   1   3   4  12 214   1   1   1   3   1   1   4   2   1   3   1   3 
 20 
  1 
> 
> H <- ordervec2supp(c(a = 2, b = 3, c = 1, d = 5, e = 4))
> pwa(H,'a')
log( (S + a) * (S + a + b + c + d + e)^-1 * (S + a + b + d + e)^-1 * b
* (b + d + e)^-1 * c * (d + e)^-1 * e)
> 
> ## Four races between a,b,c,d:
> H1 <- ordervec2supp(c(a = 1, b = 3, c = 4, d = 2))
> H2 <- ordervec2supp(c(a = 0, b = 1, c = 3, d = 2))
> H3 <- ordervec2supp(c(a = 4, b = 2, c = 1, d = 3))
> H4 <- ordervec2supp(c(a = 3, b = 4, c = 1, d = 2))
> 
> ## Now it is revealed that a,b,c had some advantage in races 1,2,3
> ## respectively.  Is there evidence that this advantage exists?
> 
> ## Not run: 
> ##D   # takes ~10 seconds, too long for here
> ##D specificp.test(pwa(H1,'a') + pwa(H2,'b') + pwa(H3,'c') + H4,"S")
> ## End(Not run)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("ranktable")
> ### * ranktable
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ranktable
> ### Title: Convert rank tables to and from order tables
> ### Aliases: ranktable ranktable_to_ordertable ordertable_to_ranktable
> ###   wikitable_to_ranktable print.ranktablesummary
> ###   ranktable_to_printable_object summary.ranktable
> 
> ### ** Examples
> 
> 
> p <- (5:1)/15
> names(p) <- letters[1:5]
> xrank <- rrank(12,p,rnames=month.abb)
> xorder <- ranktable_to_ordertable(xrank)
> 
> ## Can convert back and forth:
> identical(xrank,ordertable_to_ranktable(ranktable_to_ordertable(xrank)))
[1] TRUE
> 
> # maxp(ordertable2supp(xorder))  # should be close to p
> ordertable_to_ranktable(skating_table)
   c1        c2        c3        c4        c5         c6         c7        
J1 hughes    kwan      slutskaya suguri    cohen      butyrskaya robinson  
J2 slutskaya cohen     kwan      hughes    butyrskaya volchkova  robinson  
J3 slutskaya kwan      hughes    cohen     suguri     liashenko  robinson  
J4 slutskaya kwan      cohen     hughes    suguri     kettunen   butyrskaya
J5 hughes    kwan      cohen     slutskaya suguri     robinson   sebestyen 
J6 slutskaya hughes    kwan      cohen     butyrskaya sebestyen  suguri    
J7 hughes    slutskaya kwan      cohen     suguri     volchkova  kettunen  
J8 hughes    kwan      slutskaya cohen     suguri     robinson   butyrskaya
J9 hughes    slutskaya kwan      cohen     suguri     butyrskaya robinson  
   c8         c9          c10         c11         c12         c13        
J1 sebestyen  kettunen    volchkova   onda        hubert      maniachenko
J2 suguri     kettunen    sebestyen   fontana     maniachenko liashenko  
J3 butyrskaya meier       onda        maniachenko sebestyen   kettunen   
J4 sebestyen  robinson    liashenko   volchkova   maniachenko hubert     
J5 liashenko  fontana     volchkova   hubert      butyrskaya  kettunen   
J6 robinson   meier       kettunen    maniachenko volchkova   onda       
J7 butyrskaya fontana     robinson    maniachenko sebestyen   liashenko  
J8 sebestyen  volchkova   maniachenko kettunen    fontana     onda       
J9 sebestyen  maniachenko fontana     onda        meier       hubert     
   c14       c15       c16         c17       c18       c19       c20      
J1 fontana   liashenko meier       gusmeroli giunchi   soldatova hegel    
J2 onda      gusmeroli meier       hubert    soldatova giunchi   babiakova
J3 volchkova gusmeroli hegel       hubert    fontana   babiakova giunchi  
J4 meier     onda      fontana     gusmeroli kopac     babiakova soldatova
J5 meier     onda      maniachenko gusmeroli hegel     giunchi   babiakova
J6 liashenko fontana   hubert      soldatova gusmeroli hegel     giunchi  
J7 hubert    onda      meier       gusmeroli soldatova babiakova giunchi  
J8 liashenko hubert    meier       gusmeroli soldatova hegel     giunchi  
J9 kettunen  volchkova liashenko   gusmeroli hegel     soldatova giunchi  
   c21       c22       c23  
J1 kopac     babiakova luca 
J2 hegel     kopac     luca 
J3 luca      soldatova kopac
J4 giunchi   hegel     luca 
J5 soldatova kopac     luca 
J6 babiakova kopac     luca 
J7 hegel     kopac     luca 
J8 kopac     babiakova luca 
J9 kopac     babiakova luca 
> 
> 
> 
> cleanEx()
> nameEx("rhyper2")
> ### * rhyper2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rhyper2
> ### Title: Random 'hyper2' objects
> ### Aliases: rhyper2
> 
> ### ** Examples
> 
> 
> rhyper2()
log(a^4 * (a + b + c)^-1 * (a + b + c + d + e + f + g + h)^-10 * (a + b
+ c + d + e + f + h)^-1 * (a + b + c + d + e + g + h)^-1 * (a + b + c +
d + e + h)^-2 * (a + b + c + e)^-1 * (a + b + c + e + f + g + h)^-1 *
(a + b + c + e + f + h)^-1 * (a + b + c + e + h)^-1 * (a + b + e + g) *
(a + c)^-1 * (a + c + d + e + f + g + h)^-2 * (a + c + d + e + f +
h)^-1 * (a + c + d + e + g + h)^-1 * (a + c + d + e + h)^-1 * (a + c +
e + h) * (a + d)^-1 * (a + d + e + f)^-1 * (a + d + e + f + h)^-1 * (a
+ d + f)^-1 * (a + e + f + g) * (a + e + f + h) * (a + f)^-1 * (a +
g)^-1 * b^6 * (b + c + d + e + h)^-1 * (b + c + e)^-1 * (b + c + e +
f)^-1 * (b + c + e + f + h)^-1 * (b + c + e + h)^-1 * (b + e)^-2 * (b +
e + f)^-1 * (b + e + f + g) * (b + f)^-1 * c^5 * (c + d + e + h)^-1 *
(c + g)^-1 * d^5 * (d + e + h)^-1 * e^3 * (e + f)^-1 * (e + h)^-1 * f^5
* g^7 * h^5)
> rp(2,icons)
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
[2,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
> 
> 
> 
> 
> cleanEx()
> nameEx("rhyper3")
> ### * rhyper3
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rhyper3
> ### Title: Random hyper3 objects
> ### Aliases: rracehyper3 rrace3 rwinner3 rhyper3 rpair3
> 
> ### ** Examples
> 
> 
> rrace3() # moderate-sized default
[1] "a" "c" "d" "c" "b" "a" "b" "b" "b"
> 
> ## player numbers (two "a"s, four "b"s, two "c"s and a "d"):
> pn <- c(a=2,b=4,c=2,d=1) 
> 
> ps <- c(a=0.3, b=0.1,c=0.2,d=0.4)  # player strengths    
> 
> rwinner3(pn,ps)              # winner, randomly chosen
[1] "a"
> rrace3(pn,ps)                 # A random race
[1] "a" "b" "b" "c" "c" "a" "b" "b" "d"
> ordervec2supp3(rrace3(pn,ps))  # a hyper3 object
log( (a=1)^2 * (a=1, b=2, c=1)^-1 * (a=1, b=2, c=2)^-1 * (a=1, b=3,
c=2)^-1 * (a=2, b=3, c=2)^-1 * (a=2, b=4, c=2)^-1 * (a=2, b=4, c=2,
d=1)^-1 * (b=1)^3 * (b=1, c=1)^-1 * (b=2, c=1)^-1 * (c=1)^2 * (d=1)^1)
> rrace3()                        # a hyper3 object for multiple races
[1] "b" "a" "c" "a" "b" "d" "c" "b" "b"
> 
> 
> 
> 
> cleanEx()
> nameEx("rowing")
> ### * rowing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rowing
> ### Title: Rowing dataset, sculling
> ### Aliases: rowing sculling sculls2016 allrowers rowing_minimal
> ###   rowing_maxp rowing_minimal_maxp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dotchart(rowing_maxp)
> 
> 
> 
> cleanEx()
> nameEx("rp")
> ### * rp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rp
> ### Title: Random samples from the prior of a 'hyper2' object
> ### Aliases: rp
> 
> ### ** Examples
> 
> rp(10,icons)
           [,1]      [,2]      [,3]      [,4]      [,5]
 [1,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [2,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [3,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [4,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [5,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [6,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [7,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [8,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
 [9,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
[10,] 0.1666667 0.1666667 0.1666667 0.1666667 0.1666667
> 
> plot(loglik(rp(30,icons),icons),type='b')
> 
> 
> 
> cleanEx()
> nameEx("rrank")
> ### * rrank
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rrank
> ### Title: Random ranks
> ### Aliases: rrank print.ranktable
> 
> ### ** Examples
> 
> ptrue <- (4:1)/10
> names(ptrue) <- letters[1:4]
> rrank(10,p=ptrue)
      c1 c2 c3 c4
 [1,] a  b  c  d 
 [2,] a  d  c  b 
 [3,] b  a  c  d 
 [4,] b  a  d  c 
 [5,] c  d  a  b 
 [6,] d  a  c  b 
 [7,] a  b  c  d 
 [8,] c  a  b  d 
 [9,] b  a  d  c 
[10,] c  a  b  d 
> 
> H <- rank_likelihood(rrank(40,p=ptrue))
> 
> ## Following code commented out because they take too long:
> 
> # mH <- maxp(H)   # should be close to ptrue
> # H <- H + rank_likelihood(rrank(30,mH)) # run some more races
> # maxp(H)  # revised estimate with additional data
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("skating")
> ### * skating
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: skating
> ### Title: Figure skating at the 2002 Winter Olympics
> ### Aliases: skating skating_table skating_maxp
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(skating)
> dotchart(skating_maxp)
> 
> ordertable_to_ranktable(skating_table)
   c1        c2        c3        c4        c5         c6         c7        
J1 hughes    kwan      slutskaya suguri    cohen      butyrskaya robinson  
J2 slutskaya cohen     kwan      hughes    butyrskaya volchkova  robinson  
J3 slutskaya kwan      hughes    cohen     suguri     liashenko  robinson  
J4 slutskaya kwan      cohen     hughes    suguri     kettunen   butyrskaya
J5 hughes    kwan      cohen     slutskaya suguri     robinson   sebestyen 
J6 slutskaya hughes    kwan      cohen     butyrskaya sebestyen  suguri    
J7 hughes    slutskaya kwan      cohen     suguri     volchkova  kettunen  
J8 hughes    kwan      slutskaya cohen     suguri     robinson   butyrskaya
J9 hughes    slutskaya kwan      cohen     suguri     butyrskaya robinson  
   c8         c9          c10         c11         c12         c13        
J1 sebestyen  kettunen    volchkova   onda        hubert      maniachenko
J2 suguri     kettunen    sebestyen   fontana     maniachenko liashenko  
J3 butyrskaya meier       onda        maniachenko sebestyen   kettunen   
J4 sebestyen  robinson    liashenko   volchkova   maniachenko hubert     
J5 liashenko  fontana     volchkova   hubert      butyrskaya  kettunen   
J6 robinson   meier       kettunen    maniachenko volchkova   onda       
J7 butyrskaya fontana     robinson    maniachenko sebestyen   liashenko  
J8 sebestyen  volchkova   maniachenko kettunen    fontana     onda       
J9 sebestyen  maniachenko fontana     onda        meier       hubert     
   c14       c15       c16         c17       c18       c19       c20      
J1 fontana   liashenko meier       gusmeroli giunchi   soldatova hegel    
J2 onda      gusmeroli meier       hubert    soldatova giunchi   babiakova
J3 volchkova gusmeroli hegel       hubert    fontana   babiakova giunchi  
J4 meier     onda      fontana     gusmeroli kopac     babiakova soldatova
J5 meier     onda      maniachenko gusmeroli hegel     giunchi   babiakova
J6 liashenko fontana   hubert      soldatova gusmeroli hegel     giunchi  
J7 hubert    onda      meier       gusmeroli soldatova babiakova giunchi  
J8 liashenko hubert    meier       gusmeroli soldatova hegel     giunchi  
J9 kettunen  volchkova liashenko   gusmeroli hegel     soldatova giunchi  
   c21       c22       c23  
J1 kopac     babiakova luca 
J2 hegel     kopac     luca 
J3 luca      soldatova kopac
J4 giunchi   hegel     luca 
J5 soldatova kopac     luca 
J6 babiakova kopac     luca 
J7 hegel     kopac     luca 
J8 kopac     babiakova luca 
J9 kopac     babiakova luca 
> 
> rL <- sort(skating_maxp,decreasing=TRUE)
> rL[] <- seq_along(rL)
> rO <- seq_len(nrow(skating_table))
> names(rO) <- rownames(skating_table)
> ordertransplot(rO,rL,
+    xlab="official rank",ylab="likelihood rank",
+    main="Ladies free skating, 2002 Winter Olympics")
> 
> 
> 
> 
> cleanEx()
> nameEx("soling")
> ### * soling
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: soling
> ### Title: Sailing at the 2000 Summer Olympics - soling
> ### Aliases: soling soling_after soling_maxp soling_after_maxp soling2000
> ###   soling_table_2000 soling_table soling2000_rr1 soling2000_rr2
> ###   soling2000_qf soling_table soling_rr1 soling_rr2 soling_qf
> ###   soling_after
> 
> ### ** Examples
> 
> data(soling)
> ordertable_to_ranktable(soling_table)
    c1          c2     c3      c4      c5          c6        c7      c8       
I   netherlands russia nz      USA     norway      denmark   sweden  australia
II  ukraine     norway nz      finland netherlands italy     UK      russia   
III norway      USA    germany russia  sweden      australia ukraine UK       
IV  australia   nz     norway  UK      italy       ukraine   germany russia   
V   netherlands USA    france  UK      norway      russia    nz      spain    
VI  netherlands USA    nz      denmark sweden      spain     france  canada   
    c9        c10     c11         c12     c13         c14       c15     c16    
I   france    canada  finland     ukraine UK          germany   spain   italy  
II  canada    germany australia   spain   france      USA       sweden  denmark
III canada    nz      france      denmark netherlands italy     finland spain  
IV  france    sweden  netherlands denmark canada      finland   spain   USA    
V   australia germany denmark     canada  finland     italy     ukraine sweden 
VI  russia    italy   germany     ukraine UK          australia finland norway 
> pie(soling_maxp)
> 
> 
> 
> cleanEx()
> nameEx("suplist")
> ### * suplist
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: suplist
> ### Title: Methods for suplist objects
> ### Aliases: suplist supplist Ops.suplist suplist_add as.suplist
> ###   sum.suplist suplist_times_scalar lsl loglik_lsl Ops.lsl lsl_add
> ### Keywords: symbolmath
> 
> ### ** Examples
> 
> 
> W <- hyper2(pnames=letters[1:5])
> W1 <- ggrl(W, 'a', letters[2:3],'d')  # 2-element list
> W2 <- ggrl(W, 'e', letters[1:3],'d')  # 6-element list
> W3 <- ggrl(W, 'c', letters[4:5],'a')  # 2-element list
> 
> # likelihood function for independent observations  W1,W2,W3:
> 
> W1+W2+W3 # A 2*6*2=24-element list
[[1]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c + d)^-2 * c^3 * (c +
d)^-2 * d * e^2)

[[2]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c + d)^-2 * (b + d)^-1
* c^3 * (c + d)^-1 * d * e^2)

[[3]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c + d)^-2 * (b + d)^-1
* c^3 * (c + d)^-1 * d * e^2)

[[4]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c + d)^-2 * (b + d)^-2
* c^3 * d * e^2)

[[5]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c +
d)^-1 * c^3 * (c + d)^-2 * d * e^2)

[[6]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[7]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 *
(b + c + d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[8]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 *
(b + c + d)^-1 * (b + d)^-1 * c^3 * d * e^2)

[[9]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[10]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-2 * c^3 * d * e^2)

[[11]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 *
(b + c + d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[12]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * (a + e)^-1 * b^2 *
(b + c + d)^-1 * (b + d)^-1 * c^3 * d * e^2)

[[13]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c + d)^-2 * c^3 * (c +
d)^-2 * d * e^2)

[[14]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c + d)^-2 * (b + d)^-1
* c^3 * (c + d)^-1 * d * e^2)

[[15]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c + d)^-2 * (b + d)^-1
* c^3 * (c + d)^-1 * d * e^2)

[[16]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d +
e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c + d)^-2 * (b + d)^-2
* c^3 * d * e^2)

[[17]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * c^3 * (c + d)^-2 * d * e^2)

[[18]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[19]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d)^-2 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[20]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + c + d)^-1
* (a + c + d + e)^-1 * (a + d)^-2 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-1 * c^3 * d * e^2)

[[21]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[22]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d)^-1 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-2 * c^3 * d * e^2)

[[23]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d)^-2 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * c^3 * (c + d)^-1 * d * e^2)

[[24]]
log(a^2 * (a + b + c + d)^-2 * (a + b + c + d + e)^-1 * (a + b + d)^-1
* (a + c + d + e)^-1 * (a + d)^-2 * (a + d + e)^-1 * b^2 * (b + c +
d)^-1 * (b + d)^-1 * c^3 * d * e^2)

attr(,"class")
[1] "list"    "suplist"
> 
> like_single_list(equalp(W),W1+W2+W3)
[1] 0.0003472222
> ## Not run: dotchart(maxplist(W1+W1+W3),pch=16) # takes a long time
> 
> a <- lsl(list(W1,W2,W3),4:6)  # observe W1 four times, W2 five times and W3 six times
> loglik_lsl(equalp(W),a,log=TRUE)
[1] -39.82773
> 
> 
> 
> 
> cleanEx()
> nameEx("surfing")
> ### * surfing
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: surfing
> ### Title: Surfing dataset
> ### Aliases: surfing surfing_table surfing_maxp surfing_venuetypes
> ### Keywords: datasets
> 
> ### ** Examples
> 
> dotchart(surfing_maxp)
> 
> 
> 
> 
> cleanEx()
> nameEx("table_tennis")
> ### * table_tennis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: table_tennis
> ### Title: Match outcomes from repeated table tennis matches
> ### Aliases: table_tennis table_tennis_serve ping_pong
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(table_tennis)
> dotchart(maxp(table_tennis))
> 
> 
> 
> cleanEx()
> nameEx("tennis")
> ### * tennis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tennis
> ### Title: Match outcomes from repeated doubles tennis matches
> ### Aliases: tennis tennis_maxp tennis_ghost_maxp doubles doubles_noghost
> ###   tennis_noghost doubles_ghost tennis_ghost
> ### Keywords: datasets
> 
> ### ** Examples
> 
> summary(tennis)
A hyper2 object of size 4.
pnames:  p1 p2 p3 p4 
Number of brackets: 11 
Sum of powers: 0 

Table of bracket lengths:
1 2 4 
4 6 1 

Table of powers:

-32 -24 -20 -19 -18 -17   9  20  23  37  41 
  1   1   1   1   1   1   1   1   1   1   1 
> 
> tennis %>% psubs(c("Federer","Laver","Graf","Navratilova"))
log(Federer^20 * (Federer + Graf)^-20 * (Federer + Graf + Laver +
Navratilova)^-32 * (Federer + Laver)^9 * (Federer + Navratilova)^-18 *
Graf^41 * (Graf + Laver)^-19 * (Graf + Navratilova)^-24 * Laver^23 *
(Laver + Navratilova)^-17 * Navratilova^37)
> 
> ## Following line commented out because it takes too long:
> # specificp.gt.test(tennis_ghost,"G",0)
> 
> 
> 
> 
> cleanEx()
> nameEx("tests")
> ### * tests
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tests
> ### Title: Hypothesis testing
> ### Aliases: equalp.test knownp.test samep.test specificp.test
> ###   print.equalptest print.hyper2test specificp.ne.test specificp.gt.test
> ###   specificp.lt.test specificp.ge.test specificp.le.test
> 
> ### ** Examples
> 
> 
> equalp.test(chess)

	Constrained support maximization

data:  chess
null hypothesis: Topalov = Anand = Karpov
null estimate:
  Topalov     Anand    Karpov 
0.3333333 0.3333333 0.3333333 
(argmax, constrained optimization)
Support for null:  -60.99695 + K

alternative hypothesis:  sum p_i=1 
alternative estimate:
  Topalov     Anand    Karpov 
0.4036108 0.3405168 0.2558723 
(argmax, free optimization)
Support for alternative:  -60.06174 + K

degrees of freedom: 2
support difference = 0.9352125
p-value: 0.3925025 

> 
> # samep.test(icons,c("NB","L"))
> # knownp.test(icons,zipf(icons))
> 
> 
> 
> 
> cleanEx()
> nameEx("tidy")
> ### * tidy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tidy
> ### Title: Tidy up a hyper2 object
> ### Aliases: tidy
> 
> ### ** Examples
> 
> 
> 
> H <- hyper2(pnames=letters)
> H["a"] <- 1
> H["b"] <- 2
> H[c("a","b")] <- -3
> 
> pnames(H)
 [1] "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s"
[20] "t" "u" "v" "w" "x" "y" "z"
> pnames(tidy(H))
[1] "a" "b"
> 
> H == tidy(H)  # should be TRUE
[1] TRUE
> 
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("universities")
> ### * universities
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: universities
> ### Title: New Zealand University ranking data
> ### Aliases: universities universities_table universities_maxp
> 
> ### ** Examples
> 
> 
> summary(universities)
A hyper2 object of size 8.
pnames:  UoA Otago AUT Canterbury Lincoln Massey Victoria Waikato 
Number of brackets: 70 
Sum of powers: 0 

Table of bracket lengths:
 1  2  3  4  5  6  7  8 
 8  9 12 13 14  9  4  1 

Table of powers:

-40 -27 -17 -15 -14 -10  -7  -6  -5  -4  -3  -2  -1  13  16  29  38  39  40 
  1   1   1   1   1   1   2   1   3   4   9  17  20   1   1   1   1   1   3 
> 
> psubs(universities,c("AUT","UoA"),c("University of Auckland","Auckland University of Technology"))
log(Auckland University of Technology^40 * (Auckland University of
Technology + Canterbury + Lincoln + Massey + Otago + University of
Auckland + Victoria + Waikato)^-40 * (Auckland University of Technology
+ Canterbury + Lincoln + Massey + Otago + Victoria + Waikato)^-7 *
(Auckland University of Technology + Canterbury + Lincoln + Massey +
University of Auckland + Victoria + Waikato)^-3 * (Auckland University
of Technology + Canterbury + Lincoln + Massey + Victoria + Waikato)^-2
* (Auckland University of Technology + Canterbury + Lincoln + Otago +
Victoria + Waikato)^-2 * (Auckland University of Technology +
Canterbury + Massey + Otago + Victoria + Waikato)^-2 * (Auckland
University of Technology + Canterbury + Otago + Victoria + Waikato)^-1
* (Auckland University of Technology + Lincoln + Massey + Otago +
University of Auckland + Victoria + Waikato)^-3 * (Auckland University
of Technology + Lincoln + Massey + Otago + Victoria + Waikato)^-1 *
(Auckland University of Technology + Otago + Victoria + Waikato)^-1 *
Canterbury^40 * (Canterbury + Lincoln + Massey + Otago + University of
Auckland)^-2 * (Canterbury + Lincoln + Massey + Otago + University of
Auckland + Victoria)^-3 * (Canterbury + Lincoln + Massey + Otago +
University of Auckland + Victoria + Waikato)^-27 * (Canterbury +
Lincoln + Massey + Otago + University of Auckland + Waikato)^-7 *
(Canterbury + Lincoln + Massey + University of Auckland)^-5 *
(Canterbury + Lincoln + Massey + University of Auckland + Victoria)^-3
* (Canterbury + Lincoln + Massey + University of Auckland + Victoria +
Waikato)^-17 * (Canterbury + Lincoln + Massey + University of Auckland
+ Waikato)^-15 * (Canterbury + Lincoln + Massey + Victoria +
Waikato)^-2 * (Canterbury + Lincoln + Otago + University of Auckland +
Victoria + Waikato)^-1 * (Canterbury + Lincoln + Otago + Victoria +
Waikato)^-2 * (Canterbury + Massey + Otago + University of Auckland)^-2
* (Canterbury + Massey + Otago + University of Auckland + Waikato)^-3 *
(Canterbury + Massey + Otago + Victoria + Waikato)^-1 * (Canterbury +
Massey + University of Auckland + Victoria + Waikato)^-3 * (Canterbury
+ Massey + University of Auckland + Waikato)^-2 * (Canterbury + Otago +
University of Auckland)^-2 * (Canterbury + University of Auckland)^-1 *
Lincoln^16 * (Lincoln + Massey)^-1 * (Lincoln + Massey + Otago +
University of Auckland)^-2 * (Lincoln + Massey + Otago + University of
Auckland + Victoria)^-1 * (Lincoln + Massey + Otago + University of
Auckland + Victoria + Waikato)^-5 * (Lincoln + Massey + Otago +
University of Auckland + Waikato)^-3 * (Lincoln + Massey + Otago +
Victoria + Waikato)^-1 * (Lincoln + Massey + University of
Auckland)^-10 * (Lincoln + Massey + University of Auckland +
Victoria)^-2 * (Lincoln + Massey + University of Auckland + Victoria +
Waikato)^-2 * (Lincoln + Massey + University of Auckland + Waikato)^-14
* (Lincoln + Massey + Victoria)^-2 * (Lincoln + Massey + Victoria +
Waikato)^-3 * (Lincoln + Massey + Waikato)^-1 * (Lincoln + Otago +
University of Auckland + Victoria + Waikato)^-1 * (Lincoln + Otago +
University of Auckland + Waikato)^-2 * (Lincoln + Otago + Victoria)^-1
* (Lincoln + Otago + Victoria + Waikato)^-2 * (Lincoln + Otago +
Waikato)^-1 * (Lincoln + University of Auckland)^-6 * (Lincoln +
University of Auckland + Waikato)^-4 * (Lincoln + Victoria)^-4 *
(Lincoln + Victoria + Waikato)^-1 * (Lincoln + Waikato)^-1 * Massey^29
* (Massey + Otago + University of Auckland + Waikato)^-1 * (Massey +
Otago + Victoria + Waikato)^-1 * (Massey + University of Auckland)^-4 *
(Massey + University of Auckland + Victoria)^-1 * (Massey + University
of Auckland + Victoria + Waikato)^-3 * (Massey + University of Auckland
+ Waikato)^-4 * Otago^40 * (Otago + University of Auckland)^-1 * (Otago
+ University of Auckland + Waikato)^-1 * (Otago + Victoria +
Waikato)^-2 * University of Auckland^13 * (University of Auckland +
Waikato)^-5 * Victoria^39 * (Victoria + Waikato)^-2 * Waikato^38)
> 
> pie(universities_maxp)
> 
> 
> 
> 
> cleanEx()
> nameEx("volleyball")
> ### * volleyball
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: volleyball
> ### Title: Results from the NOCS volleyball league
> ### Aliases: volleyball vb volleyball_results volleyball_maxp
> ###   volleyball_table volleyball_matrix vb_synthetic
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> volleyball == volley(volleyball_table)  # should be TRUE
[1] TRUE
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("volvo")
> ### * volvo
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: volvo
> ### Title: Race results from the 2014-2015 Volvo Ocean Race
> ### Aliases: volvo volvo_ocean_race volvo_table_2014 volvo2014 volvo_table
> ###   volvo_maxp
> 
> ### ** Examples
> 
> pie(volvo_maxp)
> # equalp.test(volvo)   # takes ~10 seconds to run
> 
> 
> 
> cleanEx()
> nameEx("zapweak")
> ### * zapweak
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zapweak
> ### Title: Zap weak competitors
> ### Aliases: zapweak
> 
> ### ** Examples
> 
>  zapweak(icons)        # removes noone
iteration 1, size(H) = 6
log(L^24 * (L + NB + OA + THC)^-20 * (L + NB + OA + WAIS)^-9 * (L + NB
+ THC + WAIS)^-15 * (L + OA + PB + THC)^-11 * (L + OA + PB + WAIS)^-18
* (L + PB + THC + WAIS)^-16 * NB^32 * (NB + OA + PB + THC)^-18 * (NB +
OA + PB + WAIS)^-8 * (NB + PB + THC + WAIS)^-18 * OA^14 * PB^30 *
THC^24 * WAIS^9)
> 
> 
> 
> cleanEx()
> nameEx("zipf")
> ### * zipf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: zipf
> ### Title: Zipf's law
> ### Aliases: zipf
> 
> ### ** Examples
> 
> 
> zipf(icons)
        NB          L         PB        THC         OA       WAIS 
0.40816327 0.20408163 0.13605442 0.10204082 0.08163265 0.06802721 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  100.456 0.283 100.669 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

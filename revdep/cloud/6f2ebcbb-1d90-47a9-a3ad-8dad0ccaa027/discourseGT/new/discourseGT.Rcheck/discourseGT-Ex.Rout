
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "discourseGT"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('discourseGT')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("basicPlot")
> ### * basicPlot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: basicPlot
> ### Title: Plot Graphs
> ### Aliases: basicPlot
> 
> ### ** Examples
> 
> 
> df <- sampleData1
> prepNet <- tabulate_edges(df, iscsvfile = FALSE, silentNodes = 0)
> baseNet <- prepareGraphs(prepNet, project_title = "Sample Data 1", weightedGraph = TRUE)
> 
> #Plot the graph
> basicPlot(baseNet)
> 
> 
> 
> 
> 
> cleanEx()
> nameEx("coreNetAnalysis")
> ### * coreNetAnalysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: coreNetAnalysis
> ### Title: Run Graphical Analysis Core Parameters
> ### Aliases: coreNetAnalysis
> 
> ### ** Examples
> 
> df <- sampleData1
> prepNet <- tabulate_edges(df, iscsvfile = FALSE, silentNodes = 0)
> baseNet <- prepareGraphs(prepNet, project_title = "Sample Data 1", weightedGraph = TRUE)
> 
> coreNetAnalysis(baseNet)
$edge.count
[1] 12

$weighted.edge.count
[1] 465

$node.count
[1] 4

$net.density
[1] 1

$degree.all
1 2 3 4 
6 6 6 6 

$avg.net.degree
[1] 6

$degavg.unidirectional
[1] 3

$all.com
1 2 3 4 
1 1 1 1 

$membershipNet
IGRAPH clustering walktrap, groups: 1, mod: 0
+ groups:
  $`1`
  [1] "1" "2" "3" "4"
  

$modularity
[1] 0

$central
$central$res
[1] 6 6 6 6

$central$centralization
[1] 0

$central$theoretical_max
[1] 12


$artpoint
+ 0/4 vertices, named, from 70633a4:

$reciprocity
[1] 1

> 
> 
> 
> 
> cleanEx()
> nameEx("edgelist_raw")
> ### * edgelist_raw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: edgelist_raw
> ### Title: Process raw order lists from two column format to edge lists
> ### Aliases: edgelist_raw
> 
> ### ** Examples
> 
> df <- sampleData1
> prepNet <- edgelist_raw(df, iscsvfile = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot1Att")
> ### * plot1Att
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot1Att
> ### Title: Plots Graphs using ggplot2 with one attribute
> ### Aliases: plot1Att
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plot2Att")
> ### * plot2Att
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot2Att
> ### Title: Plots Graphs using ggplot2 with two attributes
> ### Aliases: plot2Att
> 
> ### ** Examples
> 
> 
> 
> 
> cleanEx()
> nameEx("plotNGTData")
> ### * plotNGTData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotNGTData
> ### Title: Plot non-graphical parameters
> ### Aliases: plotNGTData
> 
> ### ** Examples
> 
> df <- sampleData1
> plotNGTData(df, convoMinutes = 60, iscsvfile = FALSE, silentNodes = 0)
$ngt_std_stats1
  participant ep_start ep_cont total_count total_edges_in_out edge_by_part
1           1       27     131         158                314          157
2           2        6      46          52                104           52
3           3       11     104         115                230          115
4           4       20     121         141                282          141
  ep_starts_hour ep_conts_hour
1             27           131
2              6            46
3             11           104
4             20           121

$ngt_std_stats2
   length_of_ep freq_of_ep
1             2         13
2             3          6
3             4          5
4             5          3
5             6          5
6             7          6
7             8          4
8             9          4
9            10          3
10           11          3
11           12          4
12           14          1
13           15          2
14           16          1
15           18          2
16           20          2
17            1          0
18           13          0
19           17          0
20           19          0

$ngt_adv_stats
  participant normalized_turn_ratio indv_SDI_arg      SDI       SEI
1           1             1.3505376   -0.3666006 1.318946 0.9514183
2           2             0.4473118   -0.2449920 1.318946 0.9514183
3           3             0.9892473   -0.3455207 1.318946 0.9514183
4           4             1.2129032   -0.3618325 1.318946 0.9514183

$episodes_plot
Warning: Use of `eps_st$episode_length` is discouraged. Use `episode_length` instead.
Warning: Use of `eps_st$Freq` is discouraged. Use `Freq` instead.

$qvr_plot

$ntr_plot
Warning: Use of `temp_plot$participant` is discouraged. Use `participant` instead.
Warning: Use of `temp_plot$normalized_turn_ratio` is discouraged. Use `normalized_turn_ratio` instead.
Warning: Use of `temp_plot$group` is discouraged. Use `group` instead.
Warning: Use of `temp_plot$group` is discouraged. Use `group` instead.
Warning: Use of `temp_plot$participant` is discouraged. Use `participant` instead.
Warning: Use of `temp_plot$normalized_turn_ratio` is discouraged. Use `normalized_turn_ratio` instead.
Warning: Use of `temp_plot$group` is discouraged. Use `group` instead.
Warning: Use of `temp_plot$group` is discouraged. Use `group` instead.

$saveDataVar
[1] 3

> 
> 
> 
> cleanEx()
> nameEx("prepareGraphs")
> ### * prepareGraphs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: prepareGraphs
> ### Title: Prepare Graphs
> ### Aliases: prepareGraphs
> 
> ### ** Examples
> 
> df <- sampleData1
> prepNet <- tabulate_edges(df, iscsvfile = FALSE, silentNodes = 0)
> baseNet <- prepareGraphs(prepNet, project_title = "Sample Data 1", weightedGraph = TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("subgroupsNetAnalysis")
> ### * subgroupsNetAnalysis
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subgroupsNetAnalysis
> ### Title: Runs subgroup analysis on graphs
> ### Aliases: subgroupsNetAnalysis
> 
> ### ** Examples
> 
> df <- sampleData1
> prepNet <- tabulate_edges(df, iscsvfile = FALSE, silentNodes = 0)
> baseNet <- prepareGraphs(prepNet, project_title = "Sample Data 1", weightedGraph = TRUE)
> subgroupsNetAnalysis(baseNet, raw_input = df)
$g_sub
IGRAPH clustering edge betweenness, groups: 1, mod: 0
+ groups:
  $`1`
  [1] "1" "2" "3" "4"
  

$normalized
[1] FALSE

$g_bet
1 2 3 4 
0 6 0 0 

$cores
1 2 3 4 
6 6 6 6 

$graph_symet
IGRAPH f77c56d DNW- 4 12 -- 
+ attr: name (v/c), weight (e/n)
+ edges from f77c56d (vertex names):
 [1] 1->2 1->3 1->4 2->1 2->3 2->4 3->1 3->2 3->4 4->1 4->2 4->3

$dyad_graph_symet
$dyad_graph_symet$mut
[1] 6

$dyad_graph_symet$asym
[1] 0

$dyad_graph_symet$null
[1] 0


$g_comps
$g_comps[[1]]
IGRAPH 51badfb DNW- 4 12 -- 
+ attr: name (v/c), weight (e/n)
+ edges from 51badfb (vertex names):
 [1] 1->2 1->3 1->4 2->1 2->3 2->4 3->1 3->2 3->4 4->1 4->2 4->3


$g_comps_table

4 
1 

$neighborsList
$neighborsList[[1]]
+ 4/4 vertices, named, from 79d5aaf:
[1] 1 2 3 4

$neighborsList[[2]]
+ 4/4 vertices, named, from 79d5aaf:
[1] 2 1 3 4

$neighborsList[[3]]
+ 4/4 vertices, named, from 79d5aaf:
[1] 3 1 2 4

$neighborsList[[4]]
+ 4/4 vertices, named, from 79d5aaf:
[1] 4 1 2 3


$transitivity_local
[1] 1 1 1 1

$transitivity_global
[1] 1

> 
> 
> 
> 
> cleanEx()
> nameEx("summaryNet")
> ### * summaryNet
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summaryNet
> ### Title: Print summary of graph results
> ### Aliases: summaryNet
> 
> ### ** Examples
> 
> df <- sampleData1
> prepNet <- tabulate_edges(df, iscsvfile = FALSE, silentNodes = 0)
> prepGraphs <- prepareGraphs(prepNet, project_title = "Sample Data 1", weightedGraph = TRUE)
> coreNet <- coreNetAnalysis(prepGraphs)
> subgroup <- subgroupsNetAnalysis(prepGraphs, raw_input = df)
> summaryNet(netintconfigData = prepGraphs, coreNetAnalysisData = coreNet,
+ subgroupsNetAnalysisData = subgroup, display = TRUE)
================== BEGIN SUMMARY ==================
discourseGT R Package - Production
Package Version: [1] ‘1.1.7’
Graph Results - Project Summary

---------------PROJECT DETAILS---------------
Name of Project:  Sample Data 1 
Summary Results Generated On: [1] "2022-08-25 15:02:41 UTC"

---------------GRAPH CONFIGURATION---------------
Weighted Graph:  TRUE 

---------------CORE PARAMETERS ANALYSIS---------------
Number of Edges:  12 
Number of Nodes:  4 
Weighted Edges:  465 
Graph Adjacency Matrix: 
4 x 4 sparse Matrix of class "dgCMatrix"
   1  2  3  4
1  . 28 47 74
2 25  . 13 14
3 49 11  . 52
4 75 13 52  .

Network Density: 1 
Average Degree:  6 
Strong/Weak Interactions: 
1 2 3 4 
1 1 1 1 

Unrestricted Modularity:  

---------------GRAPH CENTRALITY---------------
Degree Centrality: 
$res
[1] 6 6 6 6

$centralization
[1] 0

$theoretical_max
[1] 12


Articulation Points List: 
+ 0/4 vertices, named, from 4f3e306:

Reciprocity:  1 

---------------SUBGROUPS AND MODULARITY---------------
Girvan-Newman Subgroups Detection: 
IGRAPH clustering edge betweenness, groups: 1, mod: 0
+ groups:
  $`1`
  [1] "1" "2" "3" "4"
  

Betweeness: 
1 2 3 4 
0 6 0 0 

Normalized Betweeness:  FALSE 

Group Core Members: 
1 2 3 4 
6 6 6 6 

Graph Symmetry of Members: 
$mut
[1] 6

$asym
[1] 0

$null
[1] 0


Graph Connectedness Census: 

4 
1 

Neighborhood List for Each Adjacent Node: 
[[1]]
+ 4/4 vertices, named, from 4f3e306:
[1] 1 2 3 4

[[2]]
+ 4/4 vertices, named, from 4f3e306:
[1] 2 1 3 4

[[3]]
+ 4/4 vertices, named, from 4f3e306:
[1] 3 1 2 4

[[4]]
+ 4/4 vertices, named, from 4f3e306:
[1] 4 1 2 3


Transitivity/Clustering Coefficients:
Local Transitivity values: 
[1] 1 1 1 1
Global Transitivity values: 
[1] 1


---------DISCLAIMER AND WARRANTY OF PROVIDED RESULTS AND CODE---------
Results from Code: 
The researcher(s) are primary responsible for the
        interpretation of the results presented here with the script.
        The authors accept no liability for any errors that
        may result in the processing or the interpretation of
        your results. However, if you do encounter errors in
        the package that should not have happened, please let us
        know

Code Warranty: 
MIT License
Copyright (c) 2018 Albert Chai, Andrew S. Lee, Joshua P. Le, and Stanley M. Lo

Permission is hereby granted, free of charge, to any person obtaining
        a copy of this software and associated documentation files
        (the 'Software'), to deal in the Software without restriction,
        including without limitation the rights to use, copy, modify,
        merge, publish, distribute, sublicense, and/or sell copies of
        the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions: 

The above copyright notice and this permission notice shall be
        included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
        MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.
        IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
        ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
        CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
        WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
================== END SUMMARY ==================
$project_title
[1] "Sample Data 1"

$netintconfigData
$netintconfigData$graph
IGRAPH 4f3e306 DNW- 4 12 -- 
+ attr: name (v/c), weight (e/n)
+ edges from 4f3e306 (vertex names):
 [1] 1->2 1->3 1->4 2->1 2->3 2->4 3->1 3->2 3->4 4->1 4->2 4->3

$netintconfigData$graphmatrix
4 x 4 sparse Matrix of class "dgCMatrix"
   1  2  3  4
1  . 28 47 74
2 25  . 13 14
3 49 11  . 52
4 75 13 52  .

$netintconfigData$edge_list
   raw_data.source raw_data.target
1                1               1
2                2               1
3                3               1
4                4               1
5                1               2
6                3               2
7                4               2
8                1               3
9                2               3
10               3               3
11               4               3
12               1               4
13               2               4
14               3               4
15               4               4

$netintconfigData$project_title
[1] "Sample Data 1"

$netintconfigData$weight_list
   raw_data.weight
1                8
2               25
3               49
4               75
5               28
6               11
7               13
8               47
9               13
10               3
11              52
12              74
13              14
14              52
15               1

$netintconfigData$weightedGraph
[1] TRUE


$coreNetAnalysisData
$coreNetAnalysisData$edge.count
[1] 12

$coreNetAnalysisData$weighted.edge.count
[1] 465

$coreNetAnalysisData$node.count
[1] 4

$coreNetAnalysisData$net.density
[1] 1

$coreNetAnalysisData$degree.all
1 2 3 4 
6 6 6 6 

$coreNetAnalysisData$avg.net.degree
[1] 6

$coreNetAnalysisData$degavg.unidirectional
[1] 3

$coreNetAnalysisData$all.com
1 2 3 4 
1 1 1 1 

$coreNetAnalysisData$membershipNet
IGRAPH clustering walktrap, groups: 1, mod: 0
+ groups:
  $`1`
  [1] "1" "2" "3" "4"
  

$coreNetAnalysisData$modularity
[1] 0

$coreNetAnalysisData$central
$coreNetAnalysisData$central$res
[1] 6 6 6 6

$coreNetAnalysisData$central$centralization
[1] 0

$coreNetAnalysisData$central$theoretical_max
[1] 12


$coreNetAnalysisData$artpoint
+ 0/4 vertices, named, from 4f3e306:

$coreNetAnalysisData$reciprocity
[1] 1


$subgroupsNetAnalysisData
$subgroupsNetAnalysisData$g_sub
IGRAPH clustering edge betweenness, groups: 1, mod: 0
+ groups:
  $`1`
  [1] "1" "2" "3" "4"
  

$subgroupsNetAnalysisData$normalized
[1] FALSE

$subgroupsNetAnalysisData$g_bet
1 2 3 4 
0 6 0 0 

$subgroupsNetAnalysisData$cores
1 2 3 4 
6 6 6 6 

$subgroupsNetAnalysisData$graph_symet
IGRAPH 48620b4 DNW- 4 12 -- 
+ attr: name (v/c), weight (e/n)
+ edges from 48620b4 (vertex names):
 [1] 1->2 1->3 1->4 2->1 2->3 2->4 3->1 3->2 3->4 4->1 4->2 4->3

$subgroupsNetAnalysisData$dyad_graph_symet
$subgroupsNetAnalysisData$dyad_graph_symet$mut
[1] 6

$subgroupsNetAnalysisData$dyad_graph_symet$asym
[1] 0

$subgroupsNetAnalysisData$dyad_graph_symet$null
[1] 0


$subgroupsNetAnalysisData$g_comps
$subgroupsNetAnalysisData$g_comps[[1]]
IGRAPH e83ba66 DNW- 4 12 -- 
+ attr: name (v/c), weight (e/n)
+ edges from e83ba66 (vertex names):
 [1] 1->2 1->3 1->4 2->1 2->3 2->4 3->1 3->2 3->4 4->1 4->2 4->3


$subgroupsNetAnalysisData$g_comps_table

4 
1 

$subgroupsNetAnalysisData$neighborsList
$subgroupsNetAnalysisData$neighborsList[[1]]
+ 4/4 vertices, named, from 4f3e306:
[1] 1 2 3 4

$subgroupsNetAnalysisData$neighborsList[[2]]
+ 4/4 vertices, named, from 4f3e306:
[1] 2 1 3 4

$subgroupsNetAnalysisData$neighborsList[[3]]
+ 4/4 vertices, named, from 4f3e306:
[1] 3 1 2 4

$subgroupsNetAnalysisData$neighborsList[[4]]
+ 4/4 vertices, named, from 4f3e306:
[1] 4 1 2 3


$subgroupsNetAnalysisData$transitivity_local
[1] 1 1 1 1

$subgroupsNetAnalysisData$transitivity_global
[1] 1


$saveDataVar
[1] 6

> 
> 
> 
> 
> cleanEx()
> nameEx("tabulate_edges")
> ### * tabulate_edges
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tabulate_edges
> ### Title: Process raw order lists from two column format to edge and
> ###   weight lists
> ### Aliases: tabulate_edges
> 
> ### ** Examples
> 
> df <- sampleData1
> tabData <- tabulate_edges(df, iscsvfile = FALSE, silentNodes = 0)
> 
> 
> 
> 
> cleanEx()
> nameEx("writeData")
> ### * writeData
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeData
> ### Title: Exports graphs and data objects from the package to disk
> ### Aliases: writeData
> 
> ### ** Examples
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  1.939 0.108 2.048 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

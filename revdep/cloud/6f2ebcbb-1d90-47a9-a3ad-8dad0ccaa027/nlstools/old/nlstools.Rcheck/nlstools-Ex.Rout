
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "nlstools"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('nlstools')

'nlstools' has been loaded.

IMPORTANT NOTICE: Most nonlinear regression models and data set examples
related to predictive microbiolgy have been moved to the package 'nlsMicrobio'

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("O2K")
> ### * O2K
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: O2K
> ### Title: Oxygen kinetics during 6-minute walk test data set
> ### Aliases: O2K
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(O2K)
> plot(O2K)
> 
> 
> 
> cleanEx()
> nameEx("confint2")
> ### * confint2
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: confint2
> ### Title: Confidence intervals in nonlinear regression
> ### Aliases: confint2
> ### Keywords: models nonlinear
> 
> ### ** Examples
> 
> L.minor.m1 <- nls(rate ~ Vm*conc/(K+conc), data = L.minor, start = list(K=20, Vm=120))
> confint2(L.minor.m1)
        2.5 %    97.5 %
K    9.853828  24.30416
Vm 108.480812 143.58470
> confint2(L.minor.m1, "K")
     2.5 %   97.5 %
K 9.853828 24.30416
> 
> 
> 
> cleanEx()
> nameEx("michaelisdata")
> ### * michaelisdata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: michaelisdata
> ### Title: Michaelis Menten data sets
> ### Aliases: vmkm vmkmki
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(vmkm)
> data(vmkmki)
> plot(vmkm)
> plot(vmkmki)
> 
> 
> 
> cleanEx()
> nameEx("michaelismodels")
> ### * michaelismodels
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: michaelismodels
> ### Title: Michaelis-Menten model and derived equations to model
> ###   competitive and non-competitive inhibition
> ### Aliases: michaelismodels michaelis compet_mich non_compet_mich
> ### Keywords: models
> 
> ### ** Examples
> 
> # Example 1
> 
> data(vmkm)
> nls1 <- nls(michaelis,vmkm,list(Km=1,Vmax=1))
> plotfit(nls1, smooth = TRUE)
> 
> # Example 2
> 
> data(vmkmki)
> def.par <- par(no.readonly = TRUE)
> par(mfrow = c(2,2))
> 
> nls2_c <- nls(compet_mich, vmkmki, list(Km=1,Vmax=20,Ki=0.5))
> plotfit(nls2_c, variable=1)
> overview(nls2_c)

------
Formula: v ~ S/(S + Km * (1 + I/Ki)) * Vmax

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Km    15.2145     2.5005   6.085 5.79e-08 ***
Vmax  18.0557     0.6288  28.713  < 2e-16 ***
Ki    22.2822     4.9060   4.542 2.30e-05 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.603 on 69 degrees of freedom

Number of iterations to convergence: 11 
Achieved convergence tolerance: 5.116e-06

------
Residual sum of squares: 177 

------
t-based confidence interval:
         2.5%    97.5%
Km   10.22611 20.20285
Vmax 16.80124 19.31021
Ki   12.49497 32.06951

------
Correlation matrix:
            Km      Vmax        Ki
Km   1.0000000 0.7223611 0.7497062
Vmax 0.7223611 1.0000000 0.2391296
Ki   0.7497062 0.2391296 1.0000000

> res2_c <- nlsResiduals(nls2_c)
> plot(res2_c, which=1)
> 
> nls2_nc <- nls(non_compet_mich, vmkmki, list(Km=1, Vmax=20, Ki=0.5))
> plotfit(nls2_nc, variable=1)
> overview(nls2_nc)

------
Formula: v ~ S/((S + Km) * (1 + I/Ki)) * Vmax

Parameters:
     Estimate Std. Error t value Pr(>|t|)    
Km    22.7787     1.4738   15.46   <2e-16 ***
Vmax  20.5867     0.4306   47.80   <2e-16 ***
Ki   101.3563     7.3303   13.83   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0.8925 on 69 degrees of freedom

Number of iterations to convergence: 7 
Achieved convergence tolerance: 8.27e-06

------
Residual sum of squares: 55 

------
t-based confidence interval:
         2.5%     97.5%
Km   19.83855  25.71877
Vmax 19.72756  21.44577
Ki   86.73267 115.97992

------
Correlation matrix:
                Km       Vmax            Ki
Km    1.000000e+00  0.7463302 -1.517767e-08
Vmax  7.463302e-01  1.0000000 -4.636942e-01
Ki   -1.517767e-08 -0.4636942  1.000000e+00

> res2_nc <- nlsResiduals(nls2_nc)
> plot(res2_nc, which=1)
> 
> par(def.par)
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("nlsBoot")
> ### * nlsBoot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsBoot
> ### Title: Bootstrap resampling
> ### Aliases: nlsBoot plot.nlsBoot print.nlsBoot summary.nlsBoot
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2res + (t > 5.883) * 
+                         (VO2res + (VO2peak - VO2res) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> O2K.nls1 <- nls(formulaExp, start = list(VO2res = 400, VO2peak = 1600, 
+                 mu = 1), data = O2K)
> O2K.boot1 <- nlsBoot(O2K.nls1, niter = 200)
> plot(O2K.boot1)
> plot(O2K.boot1, type = "boxplot", ask = FALSE)
> summary(O2K.boot1)

------
Bootstrap statistics
           Estimate  Std. error
VO2res   355.504349 10.83463620
VO2peak 1631.086313 19.99055208
mu         1.183403  0.06828593

------
Median of bootstrap estimates and percentile confidence intervals
             Median        2.5%       97.5%
VO2res   356.131135  335.116439  376.170918
VO2peak 1630.896843 1590.135676 1673.272968
mu         1.176206    1.050727    1.320015

>   
> 
> 
> cleanEx()
> nameEx("nlsBootpredict")
> ### * nlsBootpredict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsBootPredict
> ### Title: Prediction from Bootstrap resampling
> ### Aliases: nlsBootPredict
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2res + (t > 5.883) * 
+                         (VO2res + (VO2peak - VO2res) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> O2K.nls1 <- nls(formulaExp, start = list(VO2res = 400, VO2peak = 1600, mu = 1), data = O2K)
> niter <- 200
> 
> ### To reach stable prediction intervals use far greater niter (>> 1000)
> O2K.boot1 <- nlsBoot(O2K.nls1, niter = niter)
> newdata <- data.frame(t = seq(0, 12, length.out = 50))
> (pred.clim <- nlsBootPredict(O2K.boot1, newdata = newdata, interval = "confidence"))
         Median      2.5%     97.5%
 [1,]  356.1311  335.1164  376.1709
 [2,]  356.1311  335.1164  376.1709
 [3,]  356.1311  335.1164  376.1709
 [4,]  356.1311  335.1164  376.1709
 [5,]  356.1311  335.1164  376.1709
 [6,]  356.1311  335.1164  376.1709
 [7,]  356.1311  335.1164  376.1709
 [8,]  356.1311  335.1164  376.1709
 [9,]  356.1311  335.1164  376.1709
[10,]  356.1311  335.1164  376.1709
[11,]  356.1311  335.1164  376.1709
[12,]  356.1311  335.1164  376.1709
[13,]  356.1311  335.1164  376.1709
[14,]  356.1311  335.1164  376.1709
[15,]  356.1311  335.1164  376.1709
[16,]  356.1311  335.1164  376.1709
[17,]  356.1311  335.1164  376.1709
[18,]  356.1311  335.1164  376.1709
[19,]  356.1311  335.1164  376.1709
[20,]  356.1311  335.1164  376.1709
[21,]  356.1311  335.1164  376.1709
[22,]  356.1311  335.1164  376.1709
[23,]  356.1311  335.1164  376.1709
[24,]  356.1311  335.1164  376.1709
[25,]  356.1311  335.1164  376.1709
[26,]  588.7893  568.0809  611.6783
[27,]  784.4496  754.7455  814.9223
[28,]  943.5111  906.0876  975.9774
[29,] 1072.7586 1031.6054 1104.2783
[30,] 1176.5330 1139.1465 1207.1013
[31,] 1260.9076 1225.8968 1290.8687
[32,] 1329.9902 1298.0121 1359.0524
[33,] 1385.7792 1356.5427 1411.7466
[34,] 1430.9236 1403.4920 1456.0734
[35,] 1468.1214 1442.7140 1492.5264
[36,] 1498.3460 1475.4587 1522.9038
[37,] 1523.9070 1501.3450 1547.6185
[38,] 1544.4846 1517.5657 1568.8851
[39,] 1560.9404 1534.8040 1587.7084
[40,] 1573.9473 1547.0813 1603.2081
[41,] 1584.6408 1555.9458 1615.4569
[42,] 1593.4213 1564.8098 1625.6458
[43,] 1600.1134 1571.0965 1633.8969
[44,] 1606.1353 1575.0374 1639.7920
[45,] 1610.2370 1578.1626 1644.5885
[46,] 1614.5685 1580.6409 1648.4835
[47,] 1617.5646 1582.6062 1651.6429
[48,] 1620.0582 1584.1647 1654.7741
[49,] 1621.7961 1585.4006 1657.9260
[50,] 1623.1969 1586.3806 1660.5417
> (pred.plim <- nlsBootPredict(O2K.boot1, newdata = newdata, interval = "prediction"))
         Median      2.5%     97.5%
 [1,]  364.0613  258.9317  432.7650
 [2,]  362.7410  259.4702  435.7198
 [3,]  362.1199  259.8691  429.3463
 [4,]  362.8028  273.6273  437.8139
 [5,]  358.2416  259.6758  441.8829
 [6,]  363.7668  272.8695  434.1838
 [7,]  362.9347  270.2386  436.5510
 [8,]  360.7241  206.1174  424.4665
 [9,]  360.5084  211.6486  432.0939
[10,]  361.4111  274.9471  437.4821
[11,]  358.5427  212.6554  425.2986
[12,]  366.6535  214.2482  441.8162
[13,]  363.5103  202.7750  427.8903
[14,]  362.6787  278.4491  435.9370
[15,]  355.3896  252.5182  438.0854
[16,]  363.8771  271.8977  434.9210
[17,]  361.7701  260.7169  437.7399
[18,]  367.8937  254.3855  441.8968
[19,]  362.8871  216.5217  440.0938
[20,]  358.0732  269.9630  430.5505
[21,]  361.9149  206.9574  441.1625
[22,]  355.7297  216.1589  426.8987
[23,]  356.1833  217.5179  430.1714
[24,]  362.9731  205.1235  430.1893
[25,]  360.3301  264.8088  435.0335
[26,]  596.7904  438.8747  664.9689
[27,]  793.4699  687.3812  866.7398
[28,]  948.5148  803.3754 1035.9984
[29,] 1079.4152  970.0076 1151.9994
[30,] 1186.5699 1075.5344 1266.8090
[31,] 1271.8934 1163.4019 1345.1654
[32,] 1340.4055 1186.9921 1412.1057
[33,] 1397.5776 1289.9824 1475.3791
[34,] 1438.3788 1292.2928 1504.2236
[35,] 1477.5814 1383.8306 1545.5936
[36,] 1507.4168 1410.5628 1581.5607
[37,] 1529.5627 1372.1934 1596.0899
[38,] 1542.1193 1465.9035 1630.0193
[39,] 1560.0965 1455.4403 1645.4998
[40,] 1578.5619 1490.0017 1655.6733
[41,] 1595.7843 1501.7102 1662.9779
[42,] 1596.5848 1498.9070 1680.3681
[43,] 1602.8501 1463.2197 1689.6374
[44,] 1610.8291 1512.2394 1691.1973
[45,] 1618.7836 1517.2146 1689.1624
[46,] 1622.6899 1506.5951 1703.5134
[47,] 1631.3653 1531.3443 1711.3600
[48,] 1623.3103 1469.5147 1691.6101
[49,] 1631.1840 1530.9922 1700.0488
[50,] 1627.4497 1484.1587 1711.4998
> 
> plotfit(O2K.nls1, smooth = TRUE, ylim = c(200, 1800))
> lines(newdata$t, pred.clim[, 2], col = "red")
> lines(newdata$t, pred.clim[, 3], col = "red")
> lines(newdata$t, pred.plim[, 2], col = "blue")
> lines(newdata$t, pred.plim[, 3], col = "blue")
> 
> ### An example without giving newdata
> 
> # plot of data
> plot(O2K$t, O2K$VO2)
> 
> # add of predictions computed using predict.nls()
> pred <- predict(O2K.nls1)
> points(O2K$t, pred, pch = 16)
> 
> # add of prediction intervals using nlsBootPredict()
> (pred.plim <- nlsBootPredict(O2K.boot1, interval = "prediction"))
         Median      2.5%     97.5%
 [1,]  359.9257  204.6025  438.5898
 [2,]  360.3997  276.8520  432.0781
 [3,]  356.0182  261.4800  441.1911
 [4,]  363.9275  255.9756  430.7370
 [5,]  364.4424  204.0760  436.9593
 [6,]  357.6554  263.8557  431.3653
 [7,]  369.3182  217.8520  440.7318
 [8,]  359.4176  202.7494  434.1034
 [9,]  359.4218  259.8415  435.2233
[10,]  369.4586  260.8997  441.6198
[11,]  360.5669  272.0245  443.4025
[12,]  358.7861  274.5197  436.2220
[13,]  356.9671  261.4240  434.1694
[14,]  363.1032  208.8753  439.5323
[15,]  365.4534  261.2543  438.6724
[16,]  360.2340  208.8704  429.0035
[17,]  357.0045  258.9020  433.9811
[18,]  357.3059  271.1345  436.8133
[19,]  487.0031  386.7172  548.1337
[20,]  765.7263  661.9213  839.6593
[21,]  977.6762  875.9866 1055.5388
[22,] 1141.7105  990.4259 1220.1924
[23,] 1261.7146 1117.6554 1337.1956
[24,] 1353.1756 1207.8087 1433.5074
[25,] 1418.6223 1306.5272 1503.7412
[26,] 1473.9931 1392.7949 1556.6011
[27,] 1513.6180 1367.7570 1585.4860
[28,] 1546.2627 1459.5097 1617.6918
[29,] 1564.5508 1413.0354 1646.3837
[30,] 1582.2601 1455.7273 1659.4160
[31,] 1595.1232 1506.6873 1676.3851
[32,] 1607.6688 1458.5489 1681.6693
[33,] 1619.5886 1517.2163 1694.3153
[34,] 1618.8002 1515.1382 1690.9198
[35,] 1628.8174 1469.1205 1697.4007
[36,] 1624.5942 1480.7277 1707.3762
> segments(O2K$t, pred.plim[, 2], O2K$t, pred.plim[, 3], col = "blue")
> 
> 
> 
> cleanEx()
> nameEx("nlsConfRegions")
> ### * nlsConfRegions
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsConfRegions
> ### Title: Confidence regions
> ### Aliases: nlsConfRegions plot.nlsConfRegions print.nlsConfRegions
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) * 
+                         (VO2rest + (VO2peak - VO2rest) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> O2K.nls1 <- nls(formulaExp, start = list(VO2rest = 400, VO2peak = 1600, 
+                 mu = 1), data = O2K)
> O2K.conf1 <- nlsConfRegions(O2K.nls1, exp = 2, length = 200)
  0%1%2%3%4%5%6%7%8%9%10%11%12%13%14%15%16%17%18%19%20%21%22%23%24%25%26%27%28%29%30%31%32%33%34%35%36%37%38%39%40%41%42%43%44%45%46%47%48%49%50%51%52%53%54%55%56%57%58%59%60%61%62%63%64%65%66%67%68%69%70%71%72%73%74%75%76%77%78%79%80%81%82%83%84%85%86%87%88%89%90%91%92%93%94%95%96%97%98%99%100%
 Confidence regions array returned 
> plot(O2K.conf1, bounds = TRUE)
> 
> 
> 
> cleanEx()
> nameEx("nlsContourRSS")
> ### * nlsContourRSS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsContourRSS
> ### Title: Surface contour of RSS
> ### Aliases: nlsContourRSS plot.nlsContourRSS print.nlsContourRSS
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) * 
+                         (VO2rest + (VO2peak - VO2rest) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> O2K.nls1 <- nls(formulaExp, start = list(VO2rest = 400, VO2peak = 1600, 
+                 mu = 1), data = O2K)
> O2K.cont1 <- nlsContourRSS(O2K.nls1)
0%33%66%100%
 RSS contour surface array returned 
> plot(O2K.cont1)
> 
> 
> 
> cleanEx()
> nameEx("nlsJack")
> ### * nlsJack
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsJack
> ### Title: Jackknife resampling
> ### Aliases: nlsJack plot.nlsJack print.nlsJack summary.nlsJack
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) * 
+                         (VO2rest + (VO2peak - VO2rest) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> O2K.nls1 <- nls(formulaExp, start = list(VO2rest = 400, VO2peak = 1600, mu = 1), 
+                data = O2K)
> O2K.jack1 <- nlsJack(O2K.nls1)
> plot(O2K.jack1)
> summary(O2K.jack1)

------
Jackknife statistics
          Estimates        Bias
VO2rest  356.531663 0.227188253
VO2peak 1628.737015 2.146484447
mu         1.184519 0.001609635

------
Jackknife confidence intervals
                 Low          Up
VO2rest  342.2882842  370.775041
VO2peak 1560.1030625 1697.370968
mu         0.9923544    1.376683

------
Influential values
* Observation 21 is influential on VO2peak 
* Observation 34 is influential on VO2peak 
* Observation 35 is influential on VO2peak 
* Observation 20 is influential on mu 
* Observation 21 is influential on mu 
* Observation 35 is influential on mu 

> 
> 
> 
> cleanEx()
> nameEx("nlsResiduals")
> ### * nlsResiduals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlsResiduals
> ### Title: NLS residuals
> ### Aliases: nlsResiduals plot.nlsResiduals test.nlsResiduals
> ###   print.nlsResiduals
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> # Plots of residuals
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) * 
+                         (VO2rest + (VO2peak - VO2rest) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> O2K.nls1 <- nls(formulaExp, start = list(VO2rest = 400, VO2peak = 1600, mu = 1), 
+                data = O2K)
> O2K.res1 <- nlsResiduals(O2K.nls1)
> plot(O2K.res1, which = 0)
> 
> # Histogram and qq-plot
> plot(O2K.res1, which = 5)
> plot(O2K.res1, which = 6)
> 	
> # Tests
> test.nlsResiduals(O2K.res1)

------
	Shapiro-Wilk normality test

data:  stdres
W = 0.95205, p-value = 0.1214


------
	Runs Test

data:  as.factor(run)
Standard Normal = 0.76123, p-value = 0.4465
alternative hypothesis: two.sided

> 
> 
> 
> cleanEx()
> nameEx("nlstools")
> ### * nlstools
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nlstools
> ### Title: Nonlinear least squares fit
> ### Aliases: nlstools preview plotfit overview
> ### Keywords: nonlinear
> 
> ### ** Examples
> 
> formulaExp <- as.formula(VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) * 
+                         (VO2rest + (VO2peak - VO2rest) * 
+                         (1 - exp(-(t - 5.883) / mu))))
> preview(formulaExp, O2K, list(VO2rest = 400, VO2peak = 1600, mu = 1))

RSS:  149000 
> O2K.nls1 <- nls(formulaExp, start = list(VO2rest = 400, VO2peak = 1600, 
+                 mu = 1), data = O2K)
> overview(O2K.nls1)

------
Formula: VO2 ~ (t <= 5.883) * VO2rest + (t > 5.883) * (VO2rest + (VO2peak - 
    VO2rest) * (1 - exp(-(t - 5.883)/mu)))

Parameters:
         Estimate Std. Error t value Pr(>|t|)    
VO2rest 3.568e+02  1.141e+01   31.26   <2e-16 ***
VO2peak 1.631e+03  2.149e+01   75.88   <2e-16 ***
mu      1.186e+00  7.661e-02   15.48   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 49.59 on 33 degrees of freedom

Number of iterations to convergence: 5 
Achieved convergence tolerance: 7.6e-06

------
Residual sum of squares: 81200 

------
t-based confidence interval:
               2.5%       97.5%
VO2rest  333.537401  379.980302
VO2peak 1587.155299 1674.611700
mu         1.030255    1.342002

------
Correlation matrix:
           VO2rest    VO2peak        mu
VO2rest 1.00000000 0.07907045 0.1995377
VO2peak 0.07907045 1.00000000 0.7554924
mu      0.19953772 0.75549241 1.0000000

> plotfit(O2K.nls1, smooth = TRUE)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  4.581 0.017 4.688 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

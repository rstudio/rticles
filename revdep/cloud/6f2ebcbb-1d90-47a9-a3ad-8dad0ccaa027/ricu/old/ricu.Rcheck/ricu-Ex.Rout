
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "ricu"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('ricu')

── ricu 0.5.3 ──────────────────────────────────────────────────────────────────

The following data sources are configured to be attached:
(the environment variable `RICU_SRC_LOAD` controls this)

✖ mimic: 0 of 26 tables available
✔ mimic_demo: 25 of 25 tables available
✖ eicu: 0 of 31 tables available
✔ eicu_demo: 31 of 31 tables available
✖ hirid: 0 of 5 tables available
✖ aumc: 0 of 7 tables available
✖ miiv: 0 of 27 tables available

────────────────────────────────────────────────────────────────────────────────

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("attach_src")
> ### * attach_src
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: attach_src
> ### Title: Data attach utilities
> ### Aliases: attach_src attach_src.src_cfg attach_src.character detach_src
> ###   setup_src_env setup_src_env.src_cfg
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D Sys.setenv(RICU_SRC_LOAD = "")
> ##D library(ricu)
> ##D 
> ##D ls(envir = data)
> ##D exists("mimic_demo")
> ##D 
> ##D attach_src("mimic_demo", assign_env = .GlobalEnv)
> ##D 
> ##D ls(envir = data)
> ##D exists("mimic_demo")
> ##D 
> ##D mimic_demo
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("callback_itm")
> ### * callback_itm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: transform_fun
> ### Title: Item callback utilities
> ### Aliases: transform_fun binary_op comp_na set_val apply_map convert_unit
> 
> ### ** Examples
> 
> dat <- ts_tbl(x = rep(1:2, each = 5), y = hours(rep(1:5, 2)), z = 1:10)
> 
> subtract_3 <- transform_fun(binary_op(`-`, 3))
> subtract_3(data.table::copy(dat), val_var = "z")
# A `ts_tbl`: 10 ✖ 3
# Id var:     `x`
# Index var:  `y` (1 hours)
       x y           z
   <int> <drtn>  <dbl>
 1     1 1 hours    -2
 2     1 2 hours    -1
 3     1 3 hours     0
 4     1 4 hours     1
 5     1 5 hours     2
 6     2 1 hours     3
 7     2 2 hours     4
 8     2 3 hours     5
 9     2 4 hours     6
10     2 5 hours     7
> 
> gte_4 <- transform_fun(comp_na(`>=`, 4))
> gte_4(data.table::copy(dat), val_var = "z")
# A `ts_tbl`: 10 ✖ 3
# Id var:     `x`
# Index var:  `y` (1 hours)
       x y       z
   <int> <drtn>  <lgl>
 1     1 1 hours FALSE
 2     1 2 hours FALSE
 3     1 3 hours FALSE
 4     1 4 hours TRUE
 5     1 5 hours TRUE
 6     2 1 hours TRUE
 7     2 2 hours TRUE
 8     2 3 hours TRUE
 9     2 4 hours TRUE
10     2 5 hours TRUE
> 
> map_letters <- apply_map(setNames(letters[1:9], 1:9))
> res <- map_letters(data.table::copy(dat), val_var = "z")
> res
# A `ts_tbl`: 10 ✖ 3
# Id var:     `x`
# Index var:  `y` (1 hours)
       x y       z
   <int> <drtn>  <chr>
 1     1 1 hours a
 2     1 2 hours b
 3     1 3 hours c
 4     1 4 hours d
 5     1 5 hours e
 6     2 1 hours f
 7     2 2 hours g
 8     2 3 hours h
 9     2 4 hours i
10     2 5 hours <NA>
> 
> not_b <- transform_fun(comp_na(`!=`, "b"))
> not_b(res, val_var = "z")
# A `ts_tbl`: 10 ✖ 3
# Id var:     `x`
# Index var:  `y` (1 hours)
       x y       z
   <int> <drtn>  <lgl>
 1     1 1 hours TRUE
 2     1 2 hours FALSE
 3     1 3 hours TRUE
 4     1 4 hours TRUE
 5     1 5 hours TRUE
 6     2 1 hours TRUE
 7     2 2 hours TRUE
 8     2 3 hours TRUE
 9     2 4 hours TRUE
10     2 5 hours FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("change_id")
> ### * change_id
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: change_id
> ### Title: Switch between id types
> ### Aliases: change_id upgrade_id downgrade_id upgrade_id.ts_tbl
> ###   upgrade_id.id_tbl downgrade_id.ts_tbl downgrade_id.id_tbl
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ tbl <- mimic_demo$labevents
+ dat <- load_difftime(tbl, itemid == 50809, c("charttime", "valuenum"))
+ dat
+ 
+ change_id(dat, "icustay_id", tbl, keep_old_id = FALSE)
+ }
Loading required package: mimic.demo
# An `id_tbl`: 284 ✖ 3
# Id var:      `icustay_id`
    icustay_id charttime  valuenum
         <int> <drtn>        <dbl>
  1     201006   689 mins      129
  2     201006   877 mins      144
  3     203766   726 mins      164
  4     203766   766 mins      185
  5     203766   833 mins      181
  …
280     295043 13746 mins      156
281     295741  -125 mins      122
282     296804   638 mins      105
283     298685  4472 mins       88
284     298685 13861 mins      138
# … with 274 more rows
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("cli_output")
> ### * cli_output
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: msg_progress
> ### Title: Message signaling nested with progress reporting
> ### Aliases: msg_progress fmt_msg
> 
> ### ** Examples
> 
> msg_progress("Foo", "bar")
Foobar
> 
> capt_fun <- function(x) {
+   message("captured: ", conditionMessage(x))
+ }
> 
> tryCatch(msg_progress("Foo", "bar"), msg_progress = capt_fun)
captured: Foobar
> 
> 
> 
> 
> cleanEx()
> nameEx("concept_dictionary")
> ### * concept_dictionary
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_dictionary
> ### Title: Load concept dictionaries
> ### Aliases: load_dictionary concept_availability explain_dictionary
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ head(load_dictionary("mimic_demo"))
+ load_dictionary("mimic_demo", c("glu", "lact"))
+ }
Loading required package: mimic.demo
<concept[2]>
                   glu                   lact 
glucose <num_cncpt[1]> lactate <num_cncpt[1]> 
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("data_concepts")
> ### * data_concepts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_cncpt
> ### Title: Data Concepts
> ### Aliases: new_cncpt is_cncpt init_cncpt init_cncpt.num_cncpt
> ###   init_cncpt.unt_cncpt init_cncpt.fct_cncpt init_cncpt.cncpt
> ###   init_cncpt.rec_cncpt new_concept concept is_concept as_concept
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ gluc <- concept("glu",
+   item("mimic_demo", "labevents", "itemid", list(c(50809L, 50931L))),
+   description = "glucose", category = "chemistry",
+   unit = "mg/dL", min = 0, max = 1000
+ )
+ 
+ is_concept(gluc)
+ 
+ identical(gluc, load_dictionary("mimic_demo", "glu"))
+ 
+ gl1 <- new_cncpt("glu",
+   item("mimic_demo", "labevents", "itemid", list(c(50809L, 50931L))),
+   description = "glucose"
+ )
+ 
+ is_cncpt(gl1)
+ is_concept(gl1)
+ 
+ conc <- concept(c("glu", "lact"),
+   list(
+     item("mimic_demo", "labevents", "itemid", list(c(50809L, 50931L))),
+     item("mimic_demo", "labevents", "itemid", 50813L)
+   ),
+   description = c("glucose", "lactate")
+ )
+ 
+ conc
+ 
+ identical(as_concept(gl1), conc[1L])
+ }
Loading required package: mimic.demo
[1] FALSE
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("data_items")
> ### * data_items
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: new_itm
> ### Title: Data items
> ### Aliases: new_itm is_itm init_itm init_itm.sel_itm init_itm.hrd_itm
> ###   init_itm.col_itm init_itm.rgx_itm init_itm.fun_itm init_itm.itm
> ###   new_item item as_item is_item
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ gluc <- item("mimic_demo", "labevents", "itemid", list(c(50809L, 50931L)),
+              unit_var = TRUE, target = "ts_tbl")
+ 
+ is_item(gluc)
+ 
+ all.equal(gluc, as_item(load_dictionary("mimic_demo", "glu")))
+ 
+ hr1 <- new_itm(src = "mimic_demo", table = "chartevents",
+                sub_var = "itemid", ids = c(211L, 220045L))
+ 
+ hr2 <- item(src = c("mimic_demo", "eicu_demo"),
+             table = c("chartevents", "vitalperiodic"),
+             sub_var = list("itemid", NULL),
+             val_var = list(NULL, "heartrate"),
+             ids = list(c(211L, 220045L), FALSE),
+             class = c("sel_itm", "col_itm"))
+ 
+ hr3 <- new_itm(src = "eicu_demo", table = "vitalperiodic",
+                val_var = "heartrate", class = "col_itm")
+ 
+ identical(as_item(hr1), hr2[1])
+ identical(new_item(list(hr1)), hr2[1])
+ identical(hr2, as_item(list(hr1, hr3)))
+ }
Loading required package: mimic.demo
[1] TRUE
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("difftime")
> ### * difftime
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: secs
> ### Title: Utilities for 'difftime'
> ### Aliases: secs mins hours days weeks
> 
> ### ** Examples
> 
> hours(1L)
Time difference of 1 hours
> mins(NA_real_)
Time difference of NA mins
> secs(1:10)
Time differences in secs
 [1]  1  2  3  4  5  6  7  8  9 10
> hours(numeric(0L))
Time difference of  hours
> 
> 
> 
> 
> cleanEx()
> nameEx("download")
> ### * download
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: download_src
> ### Title: Data download utilities
> ### Aliases: download_src download_src.src_cfg download_src.aumc_cfg
> ###   download_src.character
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D dir <- tempdir()
> ##D list.files(dir)
> ##D 
> ##D download_datasource("mimic_demo", data_dir = dir)
> ##D list.files(dir)
> ##D 
> ##D unlink(dir, recursive = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("file_utils")
> ### * file_utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data_dir
> ### Title: File system utilities
> ### Aliases: data_dir src_data_dir auto_attach_srcs config_paths get_config
> ###   set_config
> 
> ### ** Examples
> 
> Sys.setenv(RICU_DATA_PATH = tempdir())
> identical(data_dir(), tempdir())
[1] TRUE
> 
> dir.exists(file.path(tempdir(), "some_subdir"))
[1] FALSE
> some_subdir <- data_dir("some_subdir")
> dir.exists(some_subdir)
[1] TRUE
> 
> cfg <- get_config("concept-dict")
> 
> identical(
+   cfg,
+   get_config("concept-dict",
+              system.file("extdata", "config", package = "ricu"))
+ )
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("id_tbl")
> ### * id_tbl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: id_tbl
> ### Title: Tabular ICU data classes
> ### Aliases: id_tbl is_id_tbl as_id_tbl ts_tbl is_ts_tbl as_ts_tbl win_tbl
> ###   is_win_tbl as_win_tbl as.data.table.id_tbl as.data.frame.id_tbl
> ###   validate_tbl
> 
> ### ** Examples
> 
> tbl <- id_tbl(a = 1:10, b = rnorm(10))
> is_id_tbl(tbl)
[1] TRUE
> is_ts_tbl(tbl)
[1] FALSE
> 
> dat <- data.frame(a = 1:10, b = hours(1:10), c = rnorm(10))
> tbl <- as_ts_tbl(dat, "a")
> is_id_tbl(tbl)
[1] TRUE
> is_ts_tbl(tbl)
[1] TRUE
> 
> tmp <- as_id_tbl(tbl)
> is_ts_tbl(tbl)
[1] TRUE
> is_ts_tbl(tmp)
[1] FALSE
> 
> tmp <- as_id_tbl(tbl, by_ref = TRUE)
> is_ts_tbl(tbl)
[1] FALSE
> is_ts_tbl(tmp)
[1] FALSE
> 
> tbl <- id_tbl(a = 1:10, b = rnorm(10))
> names(tbl) <- c("c", "b")
> tbl
# An `id_tbl`: 10 ✖ 2
# Id var:      `c`
       c       b
   <int>   <dbl>
 1     1  0.919
 2     2  0.782
 3     3  0.0746
 4     4 -1.99
 5     5  0.620
 6     6 -0.0561
 7     7 -0.156
 8     8 -1.47
 9     9 -0.478
10    10  0.418
> 
> tbl <- id_tbl(a = 1:10, b = rnorm(10))
> validate_tbl(data.table::setnames(tbl, c("c", "b")))
[1] "x does not contain column `a`"
attr(,"assert_class")
[1] "has_cols_assert"
> 
> tbl <- id_tbl(a = 1:10, b = rnorm(10))
> validate_tbl(rename_cols(tbl, c("c", "b")))
[1] TRUE
> 
> tbl <- ts_tbl(a = rep(1:2, each = 5), b = hours(rep(1:5, 2)), c = rnorm(10))
> tbl[, c("a", "c"), with = FALSE]
# An `id_tbl`: 10 ✖ 2
# Id var:      `a`
       a      c
   <int>  <dbl>
 1     1  0.398
 2     1 -0.612
 3     1  0.341
 4     1 -1.13
 5     1  1.43
 6     2  1.98
 7     2 -0.367
 8     2 -1.04
 9     2  0.570
10     2 -0.135
> tbl[, c("b", "c"), with = FALSE]
          b          c
 1: 1 hours  0.3981059
 2: 2 hours -0.6120264
 3: 3 hours  0.3411197
 4: 4 hours -1.1293631
 5: 5 hours  1.4330237
 6: 1 hours  1.9803999
 7: 2 hours -0.3672215
 8: 3 hours -1.0441346
 9: 4 hours  0.5697196
10: 5 hours -0.1350546
> tbl[, list(a, b = as.double(b), c)]
# An `id_tbl`: 10 ✖ 3
# Id var:      `a`
       a     b      c
   <int> <dbl>  <dbl>
 1     1     1  0.398
 2     1     2 -0.612
 3     1     3  0.341
 4     1     4 -1.13
 5     1     5  1.43
 6     2     1  1.98
 7     2     2 -0.367
 8     2     3 -1.04
 9     2     4  0.570
10     2     5 -0.135
> 
> 
> 
> 
> cleanEx()
> nameEx("import")
> ### * import
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: import_src
> ### Title: Data import utilities
> ### Aliases: import_src import_src.src_cfg import_src.aumc_cfg
> ###   import_src.character import_tbl import_tbl.tbl_cfg
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D dir <- tempdir()
> ##D list.files(dir)
> ##D 
> ##D download_src("mimic_demo", dir)
> ##D list.files(dir)
> ##D 
> ##D import_src("mimic_demo", dir)
> ##D list.files(dir)
> ##D 
> ##D unlink(dir, recursive = TRUE)
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("load_concepts")
> ### * load_concepts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_concepts
> ### Title: Load concept data
> ### Aliases: load_concepts load_concepts.character load_concepts.concept
> ###   load_concepts.cncpt load_concepts.num_cncpt load_concepts.unt_cncpt
> ###   load_concepts.fct_cncpt load_concepts.lgl_cncpt
> ###   load_concepts.rec_cncpt load_concepts.item load_concepts.itm
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ dat <- load_concepts("glu", "mimic_demo")
+ 
+ gluc <- concept("gluc",
+   item("mimic_demo", "labevents", "itemid", list(c(50809L, 50931L)))
+ )
+ 
+ identical(load_concepts(gluc), dat)
+ 
+ class(dat)
+ class(load_concepts(c("sex", "age"), "mimic_demo"))
+ }
Loading required package: mimic.demo
── Loading 1 concept ───────────────────────────────────────────────────────────
• glu
  ◯ removed 1 (0.05%) of rows due to `NA` values
  ◯ removed 1 (0.05%) of rows due to out of range entries
────────────────────────────────────────────────────────────────────────────────
── Loading 1 concept ───────────────────────────────────────────────────────────
• gluc
  ◯ removed 1 (0.05%) of rows due to `NA` values
────────────────────────────────────────────────────────────────────────────────
── Loading 2 concepts ──────────────────────────────────────────────────────────
• sex
• age
────────────────────────────────────────────────────────────────────────────────
[1] "id_tbl"     "data.table" "data.frame"
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("load_src")
> ### * load_src
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_src
> ### Title: Low level functions for loading data
> ### Aliases: load_src load_src.src_tbl load_src.character load_difftime
> ###   load_difftime.mimic_tbl load_difftime.eicu_tbl
> ###   load_difftime.hirid_tbl load_difftime.aumc_tbl load_difftime.miiv_tbl
> ###   load_difftime.character
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ tbl <- mimic_demo$labevents
+ col <- c("charttime", "value")
+ 
+ load_src(tbl, itemid == 50809)
+ 
+ colnames(
+   load_src("labevents", "mimic_demo", itemid == 50809, cols = col)
+ )
+ 
+ load_difftime(tbl, itemid == 50809)
+ 
+ colnames(
+   load_difftime(tbl, itemid == 50809, col)
+ )
+ 
+ id_vars(
+   load_difftime(tbl, itemid == 50809, id_hint = "icustay_id")
+ )
+ 
+ id_vars(
+   load_difftime(tbl, itemid == 50809, id_hint = "subject_id")
+ )
+ }
Loading required package: mimic.demo
[1] "subject_id"
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("load_src_cfg")
> ### * load_src_cfg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_src_cfg
> ### Title: Load configuration for a data source
> ### Aliases: load_src_cfg
> 
> ### ** Examples
> 
> cfg <- load_src_cfg("mimic_demo")
> str(cfg, max.level = 1L)
List of 1
 $ mimic_demo:List of 6
  ..- attr(*, "class")= chr [1:3] "mimic_demo_cfg" "mimic_cfg" "src_cfg"
> cfg <- cfg[["mimic_demo"]]
> str(cfg, max.level = 1L)
List of 6
 $ name   : chr "mimic_demo"
 $ prefix : chr [1:2] "mimic_demo" "mimic"
 $ id_cfg : id_cfg [1:3] `subject_id`, `hadm_id`, `icustay_id`
 $ col_cfg: col_cfg [1:25] [0, 0, 5, 0, 1], [0, 1, 6, 0, 1], [1, 0, 0, 0, 1], [0, ...
 $ tbl_cfg: tbl_cfg [1:25] [?? ✖ 19; 1], [?? ✖ 24; 1], [?? ✖ 4; 1], [?? ✖ 15; 2], ...
 $ extra  :List of 1
 - attr(*, "class")= chr [1:3] "mimic_demo_cfg" "mimic_cfg" "src_cfg"
> 
> cols <- as_col_cfg(cfg)
> index_var(head(cols))
$admissions
NULL

$callout
[1] "outcometime"

$caregivers
NULL

$chartevents
[1] "charttime"

$cptevents
[1] "chartdate"

$d_cpt
NULL

> time_vars(head(cols))
$admissions
[1] "admittime" "dischtime" "deathtime" "edregtime" "edouttime"

$callout
[1] "createtime"             "updatetime"             "acknowledgetime"       
[4] "outcometime"            "firstreservationtime"   "currentreservationtime"

$caregivers
NULL

$chartevents
[1] "charttime" "storetime"

$cptevents
[1] "chartdate"

$d_cpt
NULL

> 
> as_id_cfg(cfg)
<id_cfg<mimic_demo[patient < hadm < icustay]>[3]>
     patient         hadm      icustay 
`subject_id`    `hadm_id` `icustay_id` 
> 
> 
> 
> 
> cleanEx()
> nameEx("load_tbl")
> ### * load_tbl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: load_id
> ### Title: Load data as 'id_tbl' or 'ts_tbl' objects
> ### Aliases: load_id load_id.src_tbl load_id.character load_id.itm
> ###   load_id.fun_itm load_id.default load_ts load_ts.src_tbl
> ###   load_ts.character load_ts.itm load_ts.fun_itm load_ts.default
> ###   load_win load_win.src_tbl load_win.character load_win.itm
> ###   load_win.fun_itm load_win.default
> 
> ### ** Examples
> 
> if (require(mimic.demo)) {
+ load_id("admissions", "mimic_demo", cols = "admission_type")
+ 
+ dat <- load_ts(mimic_demo$labevents, itemid %in% c(50809L, 50931L),
+                cols = c("itemid", "valuenum"))
+ 
+ glu <- new_itm(src = "mimic_demo", table = "labevents",
+                sub_var = "itemid", ids = c(50809L, 50931L))
+ 
+ identical(load_ts(glu), dat)
+ }
Loading required package: mimic.demo
[1] TRUE
> 
> 
> 
> 
> cleanEx()

detaching ‘package:mimic.demo’

> nameEx("tbl_meta")
> ### * tbl_meta
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: id_vars
> ### Title: ICU class meta data utilities
> ### Aliases: id_vars id_var id_col index_var index_col dur_var dur_col
> ###   dur_unit meta_vars data_vars data_var data_col interval time_unit
> ###   time_step time_vars
> 
> ### ** Examples
> 
> tbl <- id_tbl(a = rep(1:2, each = 5), b = rep(1:5, 2), c = rnorm(10),
+               id_vars = c("a", "b"))
> 
> id_vars(tbl)
[1] "a" "b"
> tryCatch(id_col(tbl), error = function(...) "no luck")
[1] "no luck"
> data_vars(tbl)
[1] "c"
> data_col(tbl)
 [1] -0.6264538  0.1836433 -0.8356286  1.5952808  0.3295078 -0.8204684
 [7]  0.4874291  0.7383247  0.5757814 -0.3053884
> 
> tmp <- as_id_tbl(tbl, id_vars = "a")
> id_vars(tmp)
[1] "a"
> id_col(tmp)
 [1] 1 1 1 1 1 2 2 2 2 2
> 
> tbl <- ts_tbl(a = rep(1:2, each = 5), b = hours(rep(1:5, 2)), c = rnorm(10))
> index_var(tbl)
[1] "b"
> index_col(tbl)
Time differences in hours
 [1] 1 2 3 4 5 1 2 3 4 5
> 
> identical(index_var(tbl), time_vars(tbl))
[1] TRUE
> 
> interval(tbl)
Time difference of 1 hours
> time_unit(tbl)
[1] "hours"
> time_step(tbl)
[1] 1
> 
> 
> 
> 
> cleanEx()
> nameEx("tbl_utils")
> ### * tbl_utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rename_cols
> ### Title: ICU class data utilities
> ### Aliases: rename_cols rm_cols change_interval change_dur_unit rm_na
> ###   sort.id_tbl is_sorted duplicated.id_tbl anyDuplicated.id_tbl
> ###   unique.id_tbl is_unique aggregate.id_tbl dt_gforce replace_na
> 
> ### ** Examples
> 
> tbl <- id_tbl(a = rep(1:5, 4), b = rep(1:2, each = 10), c = rnorm(20),
+               id_vars = c("a", "b"))
> is_unique(tbl)
[1] FALSE
> is_sorted(tbl)
[1] TRUE
> 
> is_sorted(tbl[order(c)])
[1] FALSE
> 
> identical(aggregate(tbl, list(c = sum(c))), aggregate(tbl, "sum"))
[1] TRUE
> 
> tbl <- aggregate(tbl, "sum")
> is_unique(tbl)
[1] TRUE
> is_sorted(tbl)
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("ts_utils")
> ### * ts_utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expand
> ### Title: Time series utility functions
> ### Aliases: expand collapse has_no_gaps has_gaps is_regular fill_gaps
> ###   remove_gaps slide slide_index hop
> 
> ### ** Examples
> 
> tbl <- ts_tbl(x = 1:5, y = hours(1:5), z = hours(2:6), val = rnorm(5),
+               index_var = "y")
> exp <- expand(tbl, "y", "z", step_size = 1L, new_index = "y",
+               keep_vars = c("x", "val"))
> col <- collapse(exp, start_var = "y", end_var = "z", val = unique(val))
> all.equal(tbl, col, check.attributes = FALSE)
[1] "Column 'z': Mean relative difference: 0.75"
> 
> tbl <- ts_tbl(x = rep(1:5, 1:5), y = hours(sequence(1:5)), z = 1:15)
> 
> win <- id_tbl(x = c(3, 4), a = hours(c(2, 1)), b = hours(c(3, 4)))
> hop(tbl, list(z = sum(z)), win, lwr_col = "a", upr_col = "b")
# An `id_tbl`: 2 ✖ 4
# Id var:      `x`
      x b       a           z
  <int> <drtn>  <drtn>  <int>
1     3 3 hours 2 hours    11
2     4 4 hours 1 hours    34
> slide_index(tbl, list(z = sum(z)), hours(c(4, 5)), before = hours(2))
# A `ts_tbl`: 10 ✖ 3
# Id var:     `x`
# Index var:  `y` (1 hours)
       x y           z
   <int> <drtn>  <int>
 1     1 4 hours    NA
 2     1 5 hours    NA
 3     2 4 hours     3
 4     2 5 hours    NA
 5     3 4 hours    11
 6     3 5 hours     6
 7     4 4 hours    27
 8     4 5 hours    19
 9     5 4 hours    39
10     5 5 hours    42
> slide(tbl, list(z = sum(z)), before = hours(2))
# A `ts_tbl`: 15 ✖ 3
# Id var:     `x`
# Index var:  `y` (1 hours)
       x y           z
   <int> <drtn>  <int>
 1     1 1 hours     1
 2     2 1 hours     2
 3     2 2 hours     5
 4     3 1 hours     4
 5     3 2 hours     9
 6     3 3 hours    15
 7     4 1 hours     7
 8     4 2 hours    15
 9     4 3 hours    24
10     4 4 hours    27
11     5 1 hours    11
12     5 2 hours    23
13     5 3 hours    36
14     5 4 hours    39
15     5 5 hours    42
> 
> tbl <- ts_tbl(x = rep(3:4, 3:4), y = hours(sequence(3:4)), z = 1:7)
> has_no_gaps(tbl)
[1] TRUE
> is_regular(tbl)
[1] TRUE
> 
> tbl[1, 2] <- hours(2)
> has_no_gaps(tbl)
[1] TRUE
> is_regular(tbl)
[1] FALSE
> 
> tbl[6, 2] <- hours(2)
> has_no_gaps(tbl)
[1] FALSE
> is_regular(tbl)
[1] FALSE
> 
> 
> 
> 
> cleanEx()
> nameEx("utils")
> ### * utils
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: min_or_na
> ### Title: Utility functions
> ### Aliases: min_or_na max_or_na is_val not_val is_true is_false last_elem
> ###   first_elem
> 
> ### ** Examples
> 
> some_na <- c(NA, sample(1:10, 5), NA)
> identical(min(some_na, na.rm = TRUE), min_or_na(some_na))
[1] TRUE
> 
> all_na <- rep(NA, 5)
> min(all_na, na.rm = TRUE)
Warning in min(all_na, na.rm = TRUE) :
  no non-missing arguments to min; returning Inf
[1] Inf
> min_or_na(all_na)
[1] NA
> 
> is_val(some_na, 5)
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE
> some_na == 5
[1]    NA FALSE FALSE FALSE FALSE FALSE    NA
> 
> is_val(some_na, NA)
[1] FALSE    NA    NA    NA    NA    NA FALSE
> 
> identical(first_elem(letters), head(letters, n = 1L))
[1] TRUE
> identical(last_elem(letters), tail(letters, n = 1L))
[1] TRUE
> 
> replace_na(some_na, 11)
[1] 11  9  4  7  1  2 11
> replace_na(all_na, 11)
[1] TRUE TRUE TRUE TRUE TRUE
> replace_na(1:5, 11)
[1] 1 2 3 4 5
> 
> tbl <- ts_tbl(a = 1:10, b = hours(1:10), c = c(NA, 1:5, NA, 8:9, NA))
> res <- replace_na(tbl, 0)
> identical(tbl, res)
[1] FALSE
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  17.444 0.135 8.342 0.004 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

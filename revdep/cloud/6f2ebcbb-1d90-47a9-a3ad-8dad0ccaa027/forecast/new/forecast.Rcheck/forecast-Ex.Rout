
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "forecast"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('forecast')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Acf")
> ### * Acf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Acf
> ### Title: (Partial) Autocorrelation and Cross-Correlation Function
> ###   Estimation
> ### Aliases: Acf Pacf Ccf taperedacf taperedpacf
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> Acf(wineind)
> Pacf(wineind)
> ## Not run: 
> ##D taperedacf(wineind, nsim=50)
> ##D taperedpacf(wineind, nsim=50)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("Arima")
> ### * Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Arima
> ### Title: Fit ARIMA model to univariate time series
> ### Aliases: Arima print.ARIMA summary.Arima as.character.Arima
> ### Keywords: ts
> 
> ### ** Examples
> 
> library(ggplot2)
> WWWusage %>%
+   Arima(order=c(3,1,0)) %>%
+   forecast(h=20) %>%
+   autoplot
> 
> # Fit model to first few years of AirPassengers data
> air.model <- Arima(window(AirPassengers,end=1956+11/12),order=c(0,1,1),
+                    seasonal=list(order=c(0,1,1),period=12),lambda=0)
> plot(forecast(air.model,h=48))
> lines(AirPassengers)
> 
> # Apply fitted model to later data
> air.model2 <- Arima(window(AirPassengers,start=1957),model=air.model)
> 
> # Forecast accuracy measures on the log scale.
> # in-sample one-step forecasts.
> accuracy(air.model)
                    ME    RMSE      MAE       MPE     MAPE      MASE       ACF1
Training set 0.3576253 7.89734 5.788344 0.1458472 2.670181 0.1982148 0.05807465
> # out-of-sample one-step forecasts.
> accuracy(air.model2)
                    ME     RMSE     MAE        MPE     MAPE      MASE
Training set 0.5159268 12.13132 8.14054 0.07949083 1.900931 0.2266508
                   ACF1
Training set -0.2166661
> # out-of-sample multi-step forecasts
> accuracy(forecast(air.model,h=48,lambda=NULL),
+          log(window(AirPassengers,start=1957)))
                      ME      RMSE        MAE        MPE     MAPE      MASE
Training set  0.35762533 7.8973404 5.78834425  0.1458472 2.670181 0.1982148
Test set     -0.08403416 0.1031891 0.08801596 -1.3982000 1.463555 0.0030140
                   ACF1 Theil's U
Training set 0.05807465        NA
Test set     0.75730561 0.9290965
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("BoxCox")
> ### * BoxCox
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BoxCox
> ### Title: Box Cox Transformation
> ### Aliases: BoxCox InvBoxCox
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> lambda <- BoxCox.lambda(lynx)
> lynx.fit <- ar(BoxCox(lynx,lambda))
> plot(forecast(lynx.fit,h=20,lambda=lambda))
> 
> 
> 
> 
> cleanEx()
> nameEx("BoxCox.lambda")
> ### * BoxCox.lambda
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BoxCox.lambda
> ### Title: Automatic selection of Box Cox transformation parameter
> ### Aliases: BoxCox.lambda
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> lambda <- BoxCox.lambda(AirPassengers,lower=0)
> air.fit <- Arima(AirPassengers, order=c(0,1,1),
+                  seasonal=list(order=c(0,1,1),period=12), lambda=lambda)
> plot(forecast(air.fit))
> 
> 
> 
> 
> cleanEx()
> nameEx("CV")
> ### * CV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CV
> ### Title: Cross-validation statistic
> ### Aliases: CV
> ### Keywords: models
> 
> ### ** Examples
> 
> 
> y <- ts(rnorm(120,0,3) + 20*sin(2*pi*(1:120)/12), frequency=12)
> fit1 <- tslm(y ~ trend + season)
> fit2 <- tslm(y ~ season)
> CV(fit1)
         CV         AIC        AICc         BIC       AdjR2 
  8.0640371 251.0184092 255.0184092 290.0432936   0.9634641 
> CV(fit2)
         CV         AIC        AICc         BIC       AdjR2 
  7.9213453 249.0608021 252.4947643 285.2981947   0.9637897 
> 
> 
> 
> 
> cleanEx()
> nameEx("CVar")
> ### * CVar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: CVar
> ### Title: k-fold Cross-Validation applied to an autoregressive model
> ### Aliases: CVar print.CVar
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> modelcv <- CVar(lynx, k=5, lambda=0.15)
> print(modelcv)
Series: lynx 
Call:   CVar(y = lynx, k = 5, lambda = 0.15)

5-fold cross-validation
                  Mean          SD
ME        -90.87249795 125.5007718
RMSE      975.64792053 154.7871340
MAE       621.96896613 139.4416416
MPE       -37.44650017  26.2746211
MAPE       75.61791988  21.7089423
ACF1        0.07644856   0.2340096
Theil's U   1.01868468   0.3135904

p-value of Ljung-Box test of residuals is  0.1214041 
if this value is significant (<0.05),
the result of the cross-validation should not be used
as the model is underfitting the data.
> print(modelcv$fold1)
$model
Series: y 
Model:  NNAR(11,6) 
Call:   FUN(y = y, lambda = 0.15, subset = trainset)

Average of 20 networks, each of which is
a 11-6-1 network with 79 weights
options were - linear output units 

sigma^2 estimated as 0.07967

$accuracy
                ME     RMSE      MAE       MPE     MAPE      ACF1 Theil's U
Test set -163.0029 1183.353 791.8885 -51.88059 89.29856 0.1329987 0.9844016

$testfit
Time Series:
Start = 1821 
End = 1934 
Frequency = 1 
  [1]         NA         NA         NA         NA         NA         NA
  [7]         NA         NA         NA         NA         NA  103.60876
 [13]   69.84178  283.32930  415.87518 2235.53420 2948.96559 3326.16700
 [19] 1851.48511  406.41337  159.73645   50.62965   93.36269  217.07407
 [25]  560.52328 1056.10824 2125.72366 2528.15091  998.85659  369.06207
 [31]  352.18186  240.38172  354.99244  712.12570 1628.85203 3240.10908
 [37] 3094.54907 1628.86894  658.53007  292.48810  252.37362  232.05902
 [43]  535.37922 1538.19991 3284.34681 4109.91460 4336.25204  729.08633
 [49]  243.89008  449.23924  369.41132  761.13048 1622.85263 3497.66202
 [55] 2286.70966 1449.42037  326.55240  301.37777   78.68393  228.98125
 [61]  433.70857  762.18187 2068.00164 3394.41236 4147.19539 3773.95054
 [67]  395.37134  178.20799   36.78982   49.93319   65.33632  185.52046
 [73] 1156.10666 1131.34217 3886.56669 3448.46996 1628.21706  106.98019
 [79]  157.72715  369.48558  742.42395 1333.31850 3368.38837 6735.28485
 [85] 6298.72338 3535.44695 1810.87966  357.59656  364.22909  772.85493
 [91] 1387.40713 2008.73715 3430.47679 3133.64807  860.42717  667.41028
 [97]  681.23519   84.19836   29.47368  107.25200  226.48911  401.12678
[103] 1172.97474 2386.52940 3551.51199 2909.81176 1502.76223  819.24783
[109]  466.39582  841.02258 1052.42379 1599.34500 2758.17143 3465.79256

$testset
 [1]   3  10  13  23  36  38  46  54  57  59  64  66  68  73  74  77  83  92  95
[20]  96  99 108 110

> 
> library(ggplot2)
> autoplot(lynx, series="Data") +
+   autolayer(modelcv$testfit, series="Fits") +
+   autolayer(modelcv$residuals, series="Residuals")
Warning: Removed 11 row(s) containing missing values (geom_path).
Warning: Removed 11 row(s) containing missing values (geom_path).
> ggAcf(modelcv$residuals)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("accuracy.default")
> ### * accuracy.default
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: accuracy.default
> ### Title: Accuracy measures for a forecast model
> ### Aliases: accuracy.default
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> fit1 <- rwf(EuStockMarkets[1:200, 1], h = 100)
> fit2 <- meanf(EuStockMarkets[1:200, 1], h = 100)
> accuracy(fit1)
                    ME    RMSE      MAE        MPE      MAPE MASE         ACF1
Training set 0.4393467 15.8461 8.959648 0.02128535 0.5533582    1 -0.007760885
> accuracy(fit2)
                      ME     RMSE      MAE        MPE     MAPE MASE
Training set 6.24991e-14 57.83723 46.98108 -0.1240662 2.865357    1
> accuracy(fit1, EuStockMarkets[201:300, 1])
                    ME    RMSE       MAE         MPE      MAPE    MASE
Training set 0.4393467 15.8461  8.959648  0.02128535 0.5533582 1.00000
Test set     0.8900000 78.1811 63.311200 -0.16763307 3.7897316 7.06626
                     ACF1
Training set -0.007760885
Test set               NA
> accuracy(fit2, EuStockMarkets[201:300, 1])
                       ME      RMSE       MAE        MPE     MAPE     MASE
Training set 6.249910e-14  57.83723  46.98108 -0.1240662 2.865357 1.000000
Test set     8.429485e+01 114.96571 105.65361  4.7004265 6.075968 2.248855
> plot(fit1)
> lines(EuStockMarkets[1:300, 1])
> 
> 
> 
> cleanEx()
> nameEx("arfima")
> ### * arfima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arfima
> ### Title: Fit a fractionally differenced ARFIMA model
> ### Aliases: arfima
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> library(fracdiff)
> x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
> fit <- arfima(x)
> tsdisplay(residuals(fit))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:fracdiff’

> nameEx("arimaorder")
> ### * arimaorder
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arimaorder
> ### Title: Return the order of an ARIMA or ARFIMA model
> ### Aliases: arimaorder
> ### Keywords: ts
> 
> ### ** Examples
> 
> WWWusage %>% auto.arima %>% arimaorder
p d q 
1 1 1 
> 
> 
> 
> 
> cleanEx()
> nameEx("auto.arima")
> ### * auto.arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: auto.arima
> ### Title: Fit best ARIMA model to univariate time series
> ### Aliases: auto.arima
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- auto.arima(WWWusage)
> plot(forecast(fit,h=20))
> 
> 
> 
> 
> cleanEx()
> nameEx("autoplot.acf")
> ### * autoplot.acf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.acf
> ### Title: ggplot (Partial) Autocorrelation and Cross-Correlation Function
> ###   Estimation and Plotting
> ### Aliases: autoplot.acf ggAcf ggPacf ggCcf autoplot.mpacf ggtaperedacf
> ###   ggtaperedpacf
> 
> ### ** Examples
> 
> 
> library(ggplot2)
> ggAcf(wineind)
> wineind %>% Acf(plot=FALSE) %>% autoplot
> ## Not run: 
> ##D wineind %>% taperedacf(plot=FALSE) %>% autoplot
> ##D ggtaperedacf(wineind)
> ##D ggtaperedpacf(wineind)
> ## End(Not run)
> ggCcf(mdeaths, fdeaths)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("autoplot.seas")
> ### * autoplot.seas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.decomposed.ts
> ### Title: Plot time series decomposition components using ggplot
> ### Aliases: autoplot.decomposed.ts autoplot.stl autoplot.StructTS
> ###   autoplot.seas autoplot.mstl
> 
> ### ** Examples
> 
> 
> library(ggplot2)
> co2 %>%
+   decompose() %>%
+   autoplot()
> nottem %>%
+   stl(s.window = "periodic") %>%
+   autoplot()
> ## Not run: 
> ##D library(seasonal)
> ##D seas(USAccDeaths) %>% autoplot()
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("autoplot.ts")
> ### * autoplot.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autolayer.mts
> ### Title: Automatically create a ggplot for time series objects
> ### Aliases: autolayer.mts autolayer.msts autolayer.ts autoplot.ts
> ###   autoplot.mts autoplot.msts fortify.ts
> 
> ### ** Examples
> 
> 
> library(ggplot2)
> autoplot(USAccDeaths)
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> autoplot(lungDeaths)
> autoplot(lungDeaths, facets=TRUE)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("baggedModel")
> ### * baggedModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: baggedModel
> ### Title: Forecasting using a bagged model
> ### Aliases: baggedModel print.baggedModel baggedETS
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- baggedModel(WWWusage)
> fcast <- forecast(fit)
> plot(fcast)
> 
> 
> 
> 
> cleanEx()
> nameEx("bats")
> ### * bats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bats
> ### Title: BATS model (Exponential smoothing state space model with Box-Cox
> ###   transformation, ARMA errors, Trend and Seasonal components)
> ### Aliases: bats as.character.bats print.bats
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fit <- bats(USAccDeaths)
> ##D plot(forecast(fit))
> ##D 
> ##D taylor.fit <- bats(taylor)
> ##D plot(forecast(taylor.fit))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("bizdays")
> ### * bizdays
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bizdays
> ### Title: Number of trading days in each season
> ### Aliases: bizdays
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> x <- ts(rnorm(30), start = c(2013, 2), frequency = 12)
> bizdays(x, FinCenter = "New York")
     Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
2013      19  20  22  22  20  22  22  20  23  20  21
2014  21  19  21  21  21  21  22  21  21  23  19  22
2015  20  19  22  21  20  22  22                    
> 
> 
> 
> cleanEx()
> nameEx("bld.mbb.bootstrap")
> ### * bld.mbb.bootstrap
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bld.mbb.bootstrap
> ### Title: Box-Cox and Loess-based decomposition bootstrap.
> ### Aliases: bld.mbb.bootstrap
> ### Keywords: ts
> 
> ### ** Examples
> 
> bootstrapped_series <- bld.mbb.bootstrap(WWWusage, 100)
> 
> 
> 
> 
> cleanEx()
> nameEx("checkresiduals")
> ### * checkresiduals
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checkresiduals
> ### Title: Check that residuals from a time series model look like white
> ###   noise
> ### Aliases: checkresiduals
> 
> ### ** Examples
> 
> 
> fit <- ets(WWWusage)
> checkresiduals(fit)

	Ljung-Box test

data:  Residuals from ETS(A,Ad,N)
Q* = 28.995, df = 5, p-value = 2.324e-05

Model df: 5.   Total lags used: 10

> 
> 
> 
> 
> cleanEx()
> nameEx("croston")
> ### * croston
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: croston
> ### Title: Forecasts for intermittent demand using Croston's method
> ### Aliases: croston
> ### Keywords: ts
> 
> ### ** Examples
> 
> y <- rpois(20,lambda=.3)
> fcast <- croston(y)
> plot(fcast)
> 
> 
> 
> 
> cleanEx()
> nameEx("dm.test")
> ### * dm.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dm.test
> ### Title: Diebold-Mariano test for predictive accuracy
> ### Aliases: dm.test
> ### Keywords: htest ts
> 
> ### ** Examples
> 
> 
> # Test on in-sample one-step forecasts
> f1 <- ets(WWWusage)
> f2 <- auto.arima(WWWusage)
> accuracy(f1)
                    ME    RMSE      MAE       MPE     MAPE      MASE      ACF1
Training set 0.2243266 3.40781 2.761668 0.2629465 2.162415 0.6102792 0.2308014
> accuracy(f2)
                    ME     RMSE      MAE       MPE     MAPE      MASE
Training set 0.3035616 3.113754 2.405275 0.2805566 1.917463 0.5315228
                    ACF1
Training set -0.01715517
> dm.test(residuals(f1), residuals(f2), h=1)

	Diebold-Mariano Test

data:  residuals(f1)residuals(f2)
DM = 1.9078, Forecast horizon = 1, Loss function power = 2, p-value =
0.05932
alternative hypothesis: two.sided

> 
> # Test on out-of-sample one-step forecasts
> f1 <- ets(WWWusage[1:80])
> f2 <- auto.arima(WWWusage[1:80])
> f1.out <- ets(WWWusage[81:100],model=f1)
Model is being refit with current smoothing parameters but initial states are being re-estimated.
Set 'use.initial.values=TRUE' if you want to re-use existing initial values.
> f2.out <- Arima(WWWusage[81:100],model=f2)
> accuracy(f1.out)
                    ME    RMSE      MAE       MPE     MAPE      MASE      ACF1
Training set 0.2100836 3.24835 2.570459 0.1203497 1.352355 0.4246845 0.2287215
> accuracy(f2.out)
                   ME     RMSE      MAE       MPE     MAPE      MASE
Training set 1.081679 3.329012 2.437119 0.6810673 1.375924 0.4026544
                     ACF1
Training set -0.004460367
> dm.test(residuals(f1.out), residuals(f2.out), h=1)

	Diebold-Mariano Test

data:  residuals(f1.out)residuals(f2.out)
DM = -0.14392, Forecast horizon = 1, Loss function power = 2, p-value =
0.8871
alternative hypothesis: two.sided

> 
> 
> 
> cleanEx()
> nameEx("dshw")
> ### * dshw
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dshw
> ### Title: Double-Seasonal Holt-Winters Forecasting
> ### Aliases: dshw
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fcast <- dshw(taylor)
> ##D plot(fcast)
> ##D 
> ##D t <- seq(0,5,by=1/20)
> ##D x <- exp(sin(2*pi*t) + cos(2*pi*t*4) + rnorm(length(t),0,.1))
> ##D fit <- dshw(x,20,5)
> ##D plot(fit)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("easter")
> ### * easter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: easter
> ### Title: Easter holidays in each season
> ### Aliases: easter
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> easter(wineind, easter.mon = TRUE)
      Jan  Feb  Mar  Apr  May  Jun  Jul  Aug  Sep  Oct  Nov  Dec
1980 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1981 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1982 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1983 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1984 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1985 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1986 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1987 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1988 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1989 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1990 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1991 0.00 0.00 0.75 0.25 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1992 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1993 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00
1994 0.00 0.00 0.00 1.00 0.00 0.00 0.00 0.00                    
> 
> 
> 
> cleanEx()
> nameEx("ets")
> ### * ets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ets
> ### Title: Exponential smoothing state space model
> ### Aliases: ets print.ets summary.ets as.character.ets coef.ets tsdiag.ets
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- ets(USAccDeaths)
> plot(forecast(fit))
> 
> 
> 
> 
> cleanEx()
> nameEx("findfrequency")
> ### * findfrequency
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: findfrequency
> ### Title: Find dominant frequency of a time series
> ### Aliases: findfrequency
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> findfrequency(USAccDeaths) # Monthly data
[1] 12
> findfrequency(taylor) # Half-hourly data
[1] 48
> findfrequency(lynx) # Annual data
[1] 10
> 
> 
> 
> 
> cleanEx()
> nameEx("fitted.Arima")
> ### * fitted.Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fitted.ARFIMA
> ### Title: h-step in-sample forecasts for time series models.
> ### Aliases: fitted.ARFIMA fitted.Arima fitted.forecast_ARIMA fitted.ar
> ###   fitted.bats fitted.ets fitted.modelAR fitted.nnetar fitted.tbats
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- ets(WWWusage)
> plot(WWWusage)
> lines(fitted(fit), col='red')
> lines(fitted(fit, h=2), col='green')
> lines(fitted(fit, h=3), col='blue')
> legend("topleft", legend=paste("h =",1:3), col=2:4, lty=1)
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.Arima")
> ### * forecast.Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.fracdiff
> ### Title: Forecasting using ARIMA or ARFIMA models
> ### Aliases: forecast.fracdiff forecast.Arima forecast.forecast_ARIMA
> ###   forecast.ar
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- Arima(WWWusage,c(3,1,0))
> plot(forecast(fit))
> 
> library(fracdiff)
> x <- fracdiff.sim( 100, ma=-.4, d=.3)$series
> fit <- arfima(x)
> plot(forecast(fit,h=30))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:fracdiff’

> nameEx("forecast.HoltWinters")
> ### * forecast.HoltWinters
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.HoltWinters
> ### Title: Forecasting using Holt-Winters objects
> ### Aliases: forecast.HoltWinters
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- HoltWinters(WWWusage,gamma=FALSE)
> plot(forecast(fit))
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.StructTS")
> ### * forecast.StructTS
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.StructTS
> ### Title: Forecasting using Structural Time Series models
> ### Aliases: forecast.StructTS
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- StructTS(WWWusage,"level")
> plot(forecast(fit))
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.baggedModel")
> ### * forecast.baggedModel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.baggedModel
> ### Title: Forecasting using a bagged model
> ### Aliases: forecast.baggedModel
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- baggedModel(WWWusage)
> fcast <- forecast(fit)
> plot(fcast)
> 
> ## Not run: 
> ##D fit2 <- baggedModel(WWWusage, fn="auto.arima")
> ##D fcast2 <- forecast(fit2)
> ##D plot(fcast2)
> ##D accuracy(fcast2)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.bats")
> ### * forecast.bats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.bats
> ### Title: Forecasting using BATS and TBATS models
> ### Aliases: forecast.bats forecast.tbats
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fit <- bats(USAccDeaths)
> ##D plot(forecast(fit))
> ##D 
> ##D taylor.fit <- bats(taylor)
> ##D plot(forecast(taylor.fit))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.ets")
> ### * forecast.ets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.ets
> ### Title: Forecasting using ETS models
> ### Aliases: forecast.ets
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- ets(USAccDeaths)
> plot(forecast(fit,h=48))
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.lm")
> ### * forecast.lm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.lm
> ### Title: Forecast a linear model with possible time series components
> ### Aliases: forecast.lm
> ### Keywords: stats
> 
> ### ** Examples
> 
> 
> y <- ts(rnorm(120,0,3) + 1:120 + 20*sin(2*pi*(1:120)/12), frequency=12)
> fit <- tslm(y ~ trend + season)
> plot(forecast(fit, h=20))
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.mlm")
> ### * forecast.mlm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.mlm
> ### Title: Forecast a multiple linear model with possible time series
> ###   components
> ### Aliases: forecast.mlm
> 
> ### ** Examples
> 
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> fit <- tslm(lungDeaths ~ trend + season)
> fcast <- forecast(fit, h=10)
> 
> carPower <- as.matrix(mtcars[,c("qsec","hp")])
> carmpg <- mtcars[,"mpg"]
> fit <- lm(carPower ~ carmpg)
> fcast <- forecast(fit, newdata=data.frame(carmpg=30))
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.nnetar")
> ### * forecast.nnetar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.nnetar
> ### Title: Forecasting using neural network models
> ### Aliases: forecast.nnetar
> ### Keywords: ts
> 
> ### ** Examples
> 
> ## Fit & forecast model
> fit <- nnetar(USAccDeaths, size=2)
> fcast <- forecast(fit, h=20)
> plot(fcast)
> 
> ## Not run: 
> ##D ## Include prediction intervals in forecast
> ##D fcast2 <- forecast(fit, h=20, PI=TRUE, npaths=100)
> ##D plot(fcast2)
> ##D 
> ##D ## Set up out-of-sample innovations using cross-validation
> ##D fit_cv <- CVar(USAccDeaths,  size=2)
> ##D res_sd <- sd(fit_cv$residuals, na.rm=TRUE)
> ##D myinnovs <- rnorm(20*100, mean=0, sd=res_sd)
> ##D ## Forecast using new innovations
> ##D fcast3 <- forecast(fit, h=20, PI=TRUE, npaths=100, innov=myinnovs)
> ##D plot(fcast3)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("forecast.stl")
> ### * forecast.stl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.stl
> ### Title: Forecasting using stl objects
> ### Aliases: forecast.stl stlm forecast.stlm stlf
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> tsmod <- stlm(USAccDeaths, modelfunction = ar)
> plot(forecast(tsmod, h = 36))
> 
> decomp <- stl(USAccDeaths, s.window = "periodic")
> plot(forecast(decomp))
> 
> plot(stlf(AirPassengers, lambda = 0))
> 
> 
> 
> cleanEx()
> nameEx("forecast.ts")
> ### * forecast.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: forecast.ts
> ### Title: Forecasting time series
> ### Aliases: forecast.ts print.forecast summary.forecast
> ###   as.data.frame.forecast as.ts.forecast forecast.default
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> WWWusage %>% forecast %>% plot
> fit <- ets(window(WWWusage, end=60))
> fc <- forecast(WWWusage, model=fit)
Model is being refit with current smoothing parameters but initial states are being re-estimated.
Set 'use.initial.values=TRUE' if you want to re-use existing initial values.
> 
> 
> 
> cleanEx()
> nameEx("fourier")
> ### * fourier
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: fourier
> ### Title: Fourier terms for modelling seasonality
> ### Aliases: fourier fourierf
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> library(ggplot2)
> 
> # Using Fourier series for a "ts" object
> # K is chosen to minimize the AICc
> deaths.model  <- auto.arima(USAccDeaths, xreg=fourier(USAccDeaths,K=5), seasonal=FALSE)
> deaths.fcast <- forecast(deaths.model, xreg=fourier(USAccDeaths, K=5, h=36))
> autoplot(deaths.fcast) + xlab("Year")
> 
> # Using Fourier series for a "msts" object
> taylor.lm <- tslm(taylor ~ fourier(taylor, K = c(3, 3)))
> taylor.fcast <- forecast(taylor.lm,
+     data.frame(fourier(taylor, K = c(3, 3), h = 270)))
> autoplot(taylor.fcast)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("gas")
> ### * gas
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gas
> ### Title: Australian monthly gas production
> ### Aliases: gas
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot(gas)
> seasonplot(gas)
> tsdisplay(gas)
> 
> 
> 
> 
> cleanEx()
> nameEx("geom_forecast")
> ### * geom_forecast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: StatForecast
> ### Title: Forecast plot
> ### Aliases: StatForecast GeomForecast geom_forecast
> ### Keywords: datasets
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D library(ggplot2)
> ##D autoplot(USAccDeaths) + geom_forecast()
> ##D 
> ##D lungDeaths <- cbind(mdeaths, fdeaths)
> ##D autoplot(lungDeaths) + geom_forecast()
> ##D 
> ##D # Using fortify.ts
> ##D p <- ggplot(aes(x=x, y=y), data=USAccDeaths)
> ##D p <- p + geom_line()
> ##D p + geom_forecast()
> ##D 
> ##D # Without fortify.ts
> ##D data <- data.frame(USAccDeaths=as.numeric(USAccDeaths), time=as.numeric(time(USAccDeaths)))
> ##D p <- ggplot(aes(x=time, y=USAccDeaths), data=data)
> ##D p <- p + geom_line()
> ##D p + geom_forecast()
> ##D 
> ##D p + geom_forecast(h=60)
> ##D p <- ggplot(aes(x=time, y=USAccDeaths), data=data)
> ##D p + geom_forecast(level=c(70,98))
> ##D p + geom_forecast(level=c(70,98),colour="lightblue")
> ##D 
> ##D #Add forecasts to multivariate series with colour groups
> ##D lungDeaths <- cbind(mdeaths, fdeaths)
> ##D autoplot(lungDeaths) + geom_forecast(forecast(mdeaths), series="mdeaths")
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("gghistogram")
> ### * gghistogram
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gghistogram
> ### Title: Histogram with optional normal and kernel density functions
> ### Aliases: gghistogram
> 
> ### ** Examples
> 
> 
> gghistogram(lynx, add.kde=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("gglagplot")
> ### * gglagplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gglagplot
> ### Title: Time series lag ggplots
> ### Aliases: gglagplot gglagchull
> 
> ### ** Examples
> 
> 
> gglagplot(woolyrnq)
> gglagplot(woolyrnq,seasonal=FALSE)
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> gglagplot(lungDeaths, lags=2)
> gglagchull(lungDeaths, lags=6)
> 
> gglagchull(woolyrnq)
> 
> 
> 
> 
> cleanEx()
> nameEx("ggmonthplot")
> ### * ggmonthplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggmonthplot
> ### Title: Create a seasonal subseries ggplot
> ### Aliases: ggmonthplot ggsubseriesplot
> 
> ### ** Examples
> 
> 
> ggsubseriesplot(AirPassengers)
> ggsubseriesplot(woolyrnq)
> 
> 
> 
> 
> cleanEx()
> nameEx("gold")
> ### * gold
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: gold
> ### Title: Daily morning gold prices
> ### Aliases: gold
> ### Keywords: datasets
> 
> ### ** Examples
> 
> tsdisplay(gold)
> 
> 
> 
> 
> cleanEx()
> nameEx("ma")
> ### * ma
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ma
> ### Title: Moving-average smoothing
> ### Aliases: ma
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> plot(wineind)
> sm <- ma(wineind,order=12)
> lines(sm,col="red")
> 
> 
> 
> 
> cleanEx()
> nameEx("meanf")
> ### * meanf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: meanf
> ### Title: Mean Forecast
> ### Aliases: meanf
> ### Keywords: ts
> 
> ### ** Examples
> 
> nile.fcast <- meanf(Nile, h=10)
> plot(nile.fcast)
> 
> 
> 
> 
> cleanEx()
> nameEx("monthdays")
> ### * monthdays
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: monthdays
> ### Title: Number of days in each season
> ### Aliases: monthdays
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> par(mfrow=c(2,1))
> plot(ldeaths,xlab="Year",ylab="pounds",
+     main="Monthly deaths from lung disease (UK)")
> ldeaths.adj <- ldeaths/monthdays(ldeaths)*365.25/12
> plot(ldeaths.adj,xlab="Year",ylab="pounds",
+     main="Adjusted monthly deaths from lung disease (UK)")
> 
> 
> 
> 
> graphics::par(get("par.postscript", pos = 'CheckExEnv'))
> cleanEx()
> nameEx("mstl")
> ### * mstl
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: mstl
> ### Title: Multiple seasonal decomposition
> ### Aliases: mstl
> 
> ### ** Examples
> 
> library(ggplot2)
> mstl(taylor) %>% autoplot()
> mstl(AirPassengers, lambda = "auto") %>% autoplot()
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("msts")
> ### * msts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: msts
> ### Title: Multi-Seasonal Time Series
> ### Aliases: msts print.msts window.msts `[.msts`
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> x <- msts(taylor, seasonal.periods=c(2*24,2*24*7,2*24*365), start=2000+22/52)
> y <- msts(USAccDeaths, seasonal.periods=12, start=1949)
> 
> 
> 
> 
> cleanEx()
> nameEx("na.interp")
> ### * na.interp
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: na.interp
> ### Title: Interpolate missing values in a time series
> ### Aliases: na.interp
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> data(gold)
> plot(na.interp(gold))
> 
> 
> 
> 
> cleanEx()
> nameEx("naive")
> ### * naive
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: rwf
> ### Title: Naive and Random Walk Forecasts
> ### Aliases: rwf naive print.naive snaive
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> gold.fcast <- rwf(gold[1:60], h=50)
> plot(gold.fcast)
> 
> 
> plot(naive(gold,h=50),include=200)
> 
> 
> plot(snaive(wineind))
> 
> 
> 
> 
> cleanEx()
> nameEx("ndiffs")
> ### * ndiffs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ndiffs
> ### Title: Number of differences required for a stationary series
> ### Aliases: ndiffs
> ### Keywords: ts
> 
> ### ** Examples
> 
> ndiffs(WWWusage)
[1] 1
> ndiffs(diff(log(AirPassengers), 12))
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("nnetar")
> ### * nnetar
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nnetar
> ### Title: Neural Network Time Series Forecasts
> ### Aliases: nnetar print.nnetar print.nnetarmodels
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- nnetar(lynx)
> fcast <- forecast(fit)
> plot(fcast)
> 
> ## Arguments can be passed to nnet()
> fit <- nnetar(lynx, decay=0.5, maxit=150)
> plot(forecast(fit))
> lines(lynx)
> 
> ## Fit model to first 100 years of lynx data
> fit <- nnetar(window(lynx,end=1920), decay=0.5, maxit=150)
> plot(forecast(fit,h=14))
> lines(lynx)
> 
> ## Apply fitted model to later data, including all optional arguments
> fit2 <- nnetar(window(lynx,start=1921), model=fit)
> 
> 
> 
> 
> cleanEx()
> nameEx("nsdiffs")
> ### * nsdiffs
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nsdiffs
> ### Title: Number of differences required for a seasonally stationary
> ###   series
> ### Aliases: nsdiffs
> 
> ### ** Examples
> 
> nsdiffs(AirPassengers)
[1] 1
> 
> 
> 
> cleanEx()
> nameEx("ocsb.test")
> ### * ocsb.test
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ocsb.test
> ### Title: Osborn, Chui, Smith, and Birchenhall Test for Seasonal Unit
> ###   Roots
> ### Aliases: ocsb.test print.OCSBtest
> 
> ### ** Examples
> 
> ocsb.test(AirPassengers)

	OCSB test

data:  AirPassengers

Test statistic: 1.5188, 5% critical value: -1.803
alternative hypothesis: stationary

Lag order 0 was selected using fixed> 
> 
> 
> cleanEx()
> nameEx("plot.Arima")
> ### * plot.Arima
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.Arima
> ### Title: Plot characteristic roots from ARIMA model
> ### Aliases: plot.Arima plot.ar autoplot.Arima autoplot.ar
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> library(ggplot2)
> 
> fit <- Arima(WWWusage, order = c(3, 1, 0))
> plot(fit)
> autoplot(fit)
> 
> fit <- Arima(woolyrnq, order = c(2, 0, 0), seasonal = c(2, 1, 1))
> plot(fit)
> autoplot(fit)
> 
> plot(ar.ols(gold[1:61]))
> autoplot(ar.ols(gold[1:61]))
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot.bats")
> ### * plot.bats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.bats
> ### Title: Plot components from BATS model
> ### Aliases: plot.bats autoplot.tbats autoplot.bats plot.tbats
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fit <- tbats(USAccDeaths)
> ##D plot(fit)
> ##D autoplot(fit, range.bars = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("plot.ets")
> ### * plot.ets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.ets
> ### Title: Plot components from ETS model
> ### Aliases: plot.ets autoplot.ets
> ### Keywords: hplot
> 
> ### ** Examples
> 
> 
> fit <- ets(USAccDeaths)
> plot(fit)
> plot(fit,plot.type="single",ylab="",col=1:3)
> 
> library(ggplot2)
> autoplot(fit)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot.forecast")
> ### * plot.forecast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plot.forecast
> ### Title: Forecast plot
> ### Aliases: plot.forecast autoplot.forecast autoplot.splineforecast
> ###   autolayer.forecast plot.splineforecast
> ### Keywords: ts
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> wine.fit <- hw(wineind,h=48)
> plot(wine.fit)
> autoplot(wine.fit)
> 
> fit <- tslm(wineind ~ fourier(wineind,4))
> fcast <- forecast(fit, newdata=data.frame(fourier(wineind,4,20)))
> autoplot(fcast)
> 
> fcast <- splinef(airmiles,h=5)
> plot(fcast)
> autoplot(fcast)
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("plot.mforecast")
> ### * plot.mforecast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: autoplot.mforecast
> ### Title: Multivariate forecast plot
> ### Aliases: autoplot.mforecast autolayer.mforecast plot.mforecast
> ### Keywords: ts
> 
> ### ** Examples
> 
> library(ggplot2)
> 
> lungDeaths <- cbind(mdeaths, fdeaths)
> fit <- tslm(lungDeaths ~ trend + season)
> fcast <- forecast(fit, h=10)
> plot(fcast)
> autoplot(fcast)
> 
> carPower <- as.matrix(mtcars[,c("qsec","hp")])
> carmpg <- mtcars[,"mpg"]
> fit <- lm(carPower ~ carmpg)
> fcast <- forecast(fit, newdata=data.frame(carmpg=30))
> plot(fcast, xlab="Year")
> autoplot(fcast, xlab=rep("Year",2))
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("residuals.forecast")
> ### * residuals.forecast
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: residuals.forecast
> ### Title: Residuals for various time series models
> ### Aliases: residuals.forecast residuals.ar residuals.Arima
> ###   residuals.forecast_ARIMA residuals.bats residuals.tbats residuals.ets
> ###   residuals.ARFIMA residuals.nnetar residuals.stlm residuals.tslm
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- Arima(lynx,order=c(4,0,0), lambda=0.5)
> 
> plot(residuals(fit))
> plot(residuals(fit, type='response'))
> 
> 
> 
> cleanEx()
> nameEx("seasadj")
> ### * seasadj
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seasadj
> ### Title: Seasonal adjustment
> ### Aliases: seasadj seasadj.stl seasadj.mstl seasadj.decomposed.ts
> ###   seasadj.tbats seasadj.seas
> ### Keywords: ts
> 
> ### ** Examples
> 
> plot(AirPassengers)
> lines(seasadj(decompose(AirPassengers,"multiplicative")),col=4)
> 
> 
> 
> 
> cleanEx()
> nameEx("seasonal")
> ### * seasonal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seasonal
> ### Title: Extract components from a time series decomposition
> ### Aliases: seasonal trendcycle remainder
> ### Keywords: ts
> 
> ### ** Examples
> 
> plot(USAccDeaths)
> fit <- stl(USAccDeaths, s.window="periodic")
> lines(trendcycle(fit),col="red")
> 
> library(ggplot2)
> autoplot(cbind(
+ 	    Data=USAccDeaths,
+ 	    Seasonal=seasonal(fit),
+   	  Trend=trendcycle(fit),
+ 	    Remainder=remainder(fit)),
+     facets=TRUE) +
+   ylab("") + xlab("Year")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("seasonaldummy")
> ### * seasonaldummy
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: seasonaldummy
> ### Title: Seasonal dummy variables
> ### Aliases: seasonaldummy seasonaldummyf
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> plot(ldeaths)
> 
> # Using seasonal dummy variables
> month <- seasonaldummy(ldeaths)
> deaths.lm  <- tslm(ldeaths ~ month)
> tsdisplay(residuals(deaths.lm))
> ldeaths.fcast <- forecast(deaths.lm,
+     data.frame(month=I(seasonaldummy(ldeaths,36))))
> plot(ldeaths.fcast)
> 
> # A simpler approach to seasonal dummy variables
> deaths.lm  <- tslm(ldeaths ~ season)
> ldeaths.fcast <- forecast(deaths.lm, h=36)
> plot(ldeaths.fcast)
> 
> 
> 
> 
> cleanEx()
> nameEx("seasonplot")
> ### * seasonplot
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggseasonplot
> ### Title: Seasonal plot
> ### Aliases: ggseasonplot seasonplot
> ### Keywords: ts
> 
> ### ** Examples
> 
> ggseasonplot(AirPassengers, col=rainbow(12), year.labels=TRUE)
> ggseasonplot(AirPassengers, year.labels=TRUE, continuous=TRUE)
> 
> seasonplot(AirPassengers, col=rainbow(12), year.labels=TRUE)
> 
> 
> 
> 
> cleanEx()
> nameEx("ses")
> ### * ses
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ses
> ### Title: Exponential smoothing forecasts
> ### Aliases: ses holt hw
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> fcast <- holt(airmiles)
> plot(fcast)
> deaths.fcast <- hw(USAccDeaths,h=48)
> plot(deaths.fcast)
> 
> 
> 
> 
> cleanEx()
> nameEx("simulate.ets")
> ### * simulate.ets
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simulate.ets
> ### Title: Simulation from a time series model
> ### Aliases: simulate.ets simulate.Arima simulate.ar simulate.lagwalk
> ###   simulate.fracdiff simulate.nnetar simulate.modelAR simulate.tbats
> ### Keywords: ts
> 
> ### ** Examples
> 
> fit <- ets(USAccDeaths)
> plot(USAccDeaths, xlim = c(1973, 1982))
> lines(simulate(fit, 36), col = "red")
> 
> 
> 
> cleanEx()
> nameEx("sindexf")
> ### * sindexf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sindexf
> ### Title: Forecast seasonal index
> ### Aliases: sindexf
> ### Keywords: ts
> 
> ### ** Examples
> 
> uk.stl <- stl(UKDriverDeaths,"periodic")
> uk.sa <- seasadj(uk.stl)
> uk.fcast <- holt(uk.sa,36)
> seasf <- sindexf(uk.stl,36)
> uk.fcast$mean <- uk.fcast$mean + seasf
> uk.fcast$lower <- uk.fcast$lower + cbind(seasf,seasf)
> uk.fcast$upper <- uk.fcast$upper + cbind(seasf,seasf)
> uk.fcast$x <- UKDriverDeaths
> plot(uk.fcast,main="Forecasts from Holt's method with seasonal adjustment")
> 
> 
> 
> 
> cleanEx()
> nameEx("splinef")
> ### * splinef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: splinef
> ### Title: Cubic Spline Forecast
> ### Aliases: splinef
> ### Keywords: ts
> 
> ### ** Examples
> 
> fcast <- splinef(uspop,h=5)
> plot(fcast)
> summary(fcast)

Forecast method: Cubic Smoothing Spline

Model Information:
$beta
[1] 0.0006859

$call
splinef(y = uspop, h = 5)


Error measures:
                    ME     RMSE      MAE        MPE     MAPE       MASE
Training set 0.7704553 4.572546 3.165298 -0.6110405 8.174722 0.04536795
                   ACF1
Training set -0.4363661

Forecasts:
     Point Forecast    Lo 80    Hi 80    Lo 95    Hi 95
1980       225.6937 219.8454 231.5419 216.7496 234.6378
1990       248.1814 233.7246 262.6382 226.0717 270.2912
2000       270.6692 245.5023 295.8361 232.1798 309.1586
2010       293.1569 255.5241 330.7897 235.6025 350.7113
2020       315.6447 264.0068 367.2826 236.6713 394.6181
> 
> 
> 
> 
> cleanEx()
> nameEx("subset.ts")
> ### * subset.ts
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: subset.ts
> ### Title: Subsetting a time series
> ### Aliases: subset.ts subset.msts
> ### Keywords: ts
> 
> ### ** Examples
> 
> plot(subset(gas,month="November"))
> subset(woolyrnq,quarter=3)
Time Series:
Start = 1965.5 
End = 1994.5 
Frequency = 1 
 [1] 6633 6730 6946 6915 7190 7105 6840 7819 7045 5540 5906 5505 5318 5466 5696
[16] 5341 5464 5129 5524 6080 6540 6339 6590 6077 5146 5127 5222 4954 5309 6396
> subset(USAccDeaths, start=49)
       Jan   Feb   Mar   Apr   May   Jun   Jul   Aug   Sep   Oct   Nov   Dec
1977  7792  6957  7726  8106  8890  9299 10625  9302  8314  8850  8265  8796
1978  7836  6892  7791  8192  9115  9434 10484  9827  9110  9070  8633  9240
> 
> 
> 
> 
> cleanEx()
> nameEx("taylor")
> ### * taylor
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: taylor
> ### Title: Half-hourly electricity demand
> ### Aliases: taylor
> ### Keywords: datasets
> 
> ### ** Examples
> 
> plot(taylor)
> 
> 
> 
> 
> cleanEx()
> nameEx("tbats")
> ### * tbats
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tbats
> ### Title: TBATS model (Exponential smoothing state space model with
> ###   Box-Cox transformation, ARMA errors, Trend and Seasonal components)
> ### Aliases: tbats as.character.tbats print.tbats
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fit <- tbats(USAccDeaths)
> ##D plot(forecast(fit))
> ##D 
> ##D taylor.fit <- tbats(taylor)
> ##D plot(forecast(taylor.fit))
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("tbats.components")
> ### * tbats.components
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tbats.components
> ### Title: Extract components of a TBATS model
> ### Aliases: tbats.components
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D fit <- tbats(USAccDeaths, use.parallel=FALSE)
> ##D components <- tbats.components(fit)
> ##D plot(components)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("thetaf")
> ### * thetaf
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: thetaf
> ### Title: Theta method forecast
> ### Aliases: thetaf
> ### Keywords: ts
> 
> ### ** Examples
> 
> nile.fcast <- thetaf(Nile)
> plot(nile.fcast)
> 
> 
> 
> cleanEx()
> nameEx("tsCV")
> ### * tsCV
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tsCV
> ### Title: Time series cross-validation
> ### Aliases: tsCV
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> #Fit an AR(2) model to each rolling origin subset
> far2 <- function(x, h){forecast(Arima(x, order=c(2,0,0)), h=h)}
> e <- tsCV(lynx, far2, h=1)
> 
> #Fit the same model with a rolling window of length 30
> e <- tsCV(lynx, far2, h=1, window=30)
> 
> #Example with exogenous predictors
> far2_xreg <- function(x, h, xreg, newxreg) {
+   forecast(Arima(x, order=c(2,0,0), xreg=xreg), xreg=newxreg)
+ }
> 
> y <- ts(rnorm(50))
> xreg <- matrix(rnorm(100),ncol=2)
> e <- tsCV(y, far2_xreg, h=3, xreg=xreg)
> 
> 
> 
> 
> cleanEx()
> nameEx("tsclean")
> ### * tsclean
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tsclean
> ### Title: Identify and replace outliers and missing values in a time
> ###   series
> ### Aliases: tsclean
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> cleangold <- tsclean(gold)
> 
> 
> 
> 
> cleanEx()
> nameEx("tsdisplay")
> ### * tsdisplay
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: ggtsdisplay
> ### Title: Time series display
> ### Aliases: ggtsdisplay tsdisplay
> ### Keywords: ts
> 
> ### ** Examples
> 
> library(ggplot2)
> ggtsdisplay(USAccDeaths, plot.type="scatter", theme=theme_bw())
> 
> tsdisplay(diff(WWWusage))
> ggtsdisplay(USAccDeaths, plot.type="scatter")
> 
> 
> 
> 
> cleanEx()

detaching ‘package:ggplot2’

> nameEx("tslm")
> ### * tslm
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tslm
> ### Title: Fit a linear model with time series components
> ### Aliases: tslm
> ### Keywords: stats
> 
> ### ** Examples
> 
> 
> y <- ts(rnorm(120,0,3) + 1:120 + 20*sin(2*pi*(1:120)/12), frequency=12)
> fit <- tslm(y ~ trend + season)
> plot(forecast(fit, h=20))
> 
> 
> 
> 
> cleanEx()
> nameEx("tsoutliers")
> ### * tsoutliers
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tsoutliers
> ### Title: Identify and replace outliers in a time series
> ### Aliases: tsoutliers
> ### Keywords: ts
> 
> ### ** Examples
> 
> 
> data(gold)
> tsoutliers(gold)
$index
[1] 770

$replacements
[1] 494.9

> 
> 
> 
> 
> cleanEx()
> nameEx("wineind")
> ### * wineind
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: wineind
> ### Title: Australian total wine sales
> ### Aliases: wineind
> ### Keywords: datasets
> 
> ### ** Examples
> 
> tsdisplay(wineind)
> 
> 
> 
> 
> cleanEx()
> nameEx("woolyrnq")
> ### * woolyrnq
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: woolyrnq
> ### Title: Quarterly production of woollen yarn in Australia
> ### Aliases: woolyrnq
> ### Keywords: datasets
> 
> ### ** Examples
> 
> tsdisplay(woolyrnq)
> 
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  32.446 28.656 27.43 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

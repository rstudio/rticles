
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "VARshrink"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('VARshrink')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("Acoef_sh")
> ### * Acoef_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Acoef_sh
> ### Title: Coefficient matrices of endogenous variables
> ### Aliases: Acoef_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> Acoef_sh(estim)
[[1]]
            e.l1    prod.l1       rw.l1        U.l1
e     0.59232995  0.1723115 -0.02274400 -0.10513191
prod  0.04625636  0.2210607  0.01514473 -0.40965800
rw   -0.06630514 -0.1857781  0.27296145  0.30333382
U    -0.36080189 -0.1267033  0.03502787  0.04402338

[[2]]
            e.l2     prod.l2       rw.l2        U.l2
e    -0.13174015  0.05909336 -0.03962646  0.02849543
prod -0.25961106 -0.02032188 -0.13894249  0.08004113
rw    0.39215625 -0.36321293  0.13595533 -0.10423283
U     0.02736896 -0.03596425  0.09769206 -0.11019039

> 
> 
> 
> cleanEx()
> nameEx("BQ_sh")
> ### * BQ_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BQ_sh
> ### Title: BQ function for class "varshrinkest"
> ### Aliases: BQ_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> BQ_sh(estim)

SVAR Estimation Results:
======================== 


Estimated contemporaneous impact matrix:
           e    prod        rw        U
e     0.2654 -0.2520  0.099710  0.01412
prod  0.3329  0.5144  0.227672  0.06074
rw   -0.3543 -0.0159  0.789799 -0.03669
U    -0.1935  0.1129 -0.006083  0.19647

Estimated identified long run impact matrix:
           e    prod     rw      U
e     0.9298  0.0000 0.0000 0.0000
prod  0.5730  0.8236 0.0000 0.0000
rw   -0.8430 -0.8334 1.3927 0.0000
U    -0.6647 -0.1235 0.1677 0.1843
> 
> 
> 
> cleanEx()
> nameEx("Bcoef_sh")
> ### * Bcoef_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Bcoef_sh
> ### Title: Coefficient matrix
> ### Aliases: Bcoef_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> Bcoef_sh(estim)
            e.l1    prod.l1       rw.l1        U.l1        e.l2     prod.l2
e     0.59232995  0.1723115 -0.02274400 -0.10513191 -0.13174015  0.05909336
prod  0.04625636  0.2210607  0.01514473 -0.40965800 -0.25961106 -0.02032188
rw   -0.06630514 -0.1857781  0.27296145  0.30333382  0.39215625 -0.36321293
U    -0.36080189 -0.1267033  0.03502787  0.04402338  0.02736896 -0.03596425
           rw.l2        U.l2      const
e    -0.03962646  0.02849543 0.22497555
prod -0.13894249  0.08004113 0.32294040
rw    0.13595533 -0.10423283 0.49816773
U     0.09769206 -0.11019039 0.01049827
> 
> 
> 
> cleanEx()
> nameEx("VARshrink")
> ### * VARshrink
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: VARshrink
> ### Title: Shrinkage estimation of VAR parameters
> ### Aliases: VARshrink
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> VARshrink(y, p = 2, type = "const", method = "ridge")

VAR Shrinkage Estimation Results:
================================= 

Estimated coefficients for equation e: 
====================================== 
Call:
e = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
 0.59232995  0.17231150 -0.02274400 -0.10513191 -0.13174015  0.05909336 
      rw.l2        U.l2       const 
-0.03962646  0.02849543  0.22497555 


Estimated coefficients for equation prod: 
========================================= 
Call:
prod = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
 0.04625636  0.22106072  0.01514473 -0.40965800 -0.25961106 -0.02032188 
      rw.l2        U.l2       const 
-0.13894249  0.08004113  0.32294040 


Estimated coefficients for equation rw: 
======================================= 
Call:
rw = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
-0.06630514 -0.18577813  0.27296145  0.30333382  0.39215625 -0.36321293 
      rw.l2        U.l2       const 
 0.13595533 -0.10423283  0.49816773 


Estimated coefficients for equation U: 
====================================== 
Call:
U = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
-0.36080189 -0.12670335  0.03502787  0.04402338  0.02736896 -0.03596425 
      rw.l2        U.l2       const 
 0.09769206 -0.11019039  0.01049827 


lambda: 1e-04 5e-04 0.001 0.005 0.01 0.05 0.1 0.5 1 5 10 50 (estimated: TRUE) 
GCV:  1.5897 1.5882 1.5864 1.5748 1.5652 1.5472 1.5548 1.6569 1.7615 2.2673 2.5634 3.0467 
> 
> 
> 
> cleanEx()
> nameEx("arch.test_sh")
> ### * arch.test_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: arch.test_sh
> ### Title: ARCH-LM test
> ### Aliases: arch.test_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> arch.test_sh(estim)

	ARCH (multivariate)

data:  Residuals of VAR object x
Chi-squared = 512.6, df = 500, p-value = 0.3387

> 
> 
> 
> cleanEx()
> nameEx("calcSSE_Acoef")
> ### * calcSSE_Acoef
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: calcSSE_Acoef
> ### Title: Sum of squared errors (SSE) between coefficients of two VARs
> ### Aliases: calcSSE_Acoef
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim1 <- VARshrink(y, p = 2, type = "const", method = "fbayes")
> Acoef1 <- Acoef_sh(estim1)
> estim2 <- VARshrink(y, p = 2, type = "const", method = "ridge")
> Acoef2 <- Acoef_sh(estim2)
> calcSSE_Acoef(Acoef1, Acoef2)
[1] 0.06742748
> 
> 
> 
> cleanEx()
> nameEx("causality_sh")
> ### * causality_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: causality_sh
> ### Title: Causality Analysis for class "varshrinkest"
> ### Aliases: causality_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> causality_sh(estim, cause = "e")
$Granger

	Granger causality H0: e do not Granger-cause prod rw U

data:  VAR object x
F-Test = 5.6853, df1 = 6, df2 = 288, p-value = 1.332e-05


$Instant

	H0: No instantaneous causality between: e and prod rw U

data:  VAR object x
Chi-squared = 26.566, df = 3, p-value = 7.259e-06


> 
> 
> 
> cleanEx()
> nameEx("createVARCoefs_ltriangular")
> ### * createVARCoefs_ltriangular
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createVARCoefs_ltriangular
> ### Title: Create coefficients of a VAR model
> ### Aliases: createVARCoefs_ltriangular
> 
> ### ** Examples
> 
> p <- 1; K <- 20;
> const_vector <- c(rep(0.2, 5), rep(0.7, 15))
> createVARCoefs_ltriangular(p = p, K = K, diag_val = 0.6,
+ num_nonzero = K, const_vector = const_vector, range_max = 1)
$A
$A[[1]]
           [,1]       [,2]       [,3]      [,4]      [,5] [,6]       [,7] [,8]
 [1,] 0.6000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
 [2,] 0.0000000  0.6000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
 [3,] 0.0000000  0.0000000  0.6000000 0.0000000 0.0000000  0.0  0.0000000  0.0
 [4,] 0.0000000 -0.3419609  0.0000000 0.6000000 0.0000000  0.0  0.0000000  0.0
 [5,] 0.0000000  0.0000000  0.0000000 0.0000000 0.6000000  0.0  0.0000000  0.0
 [6,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.6  0.0000000  0.0
 [7,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.6000000  0.0
 [8,] 0.6526924  0.0000000  0.0000000 0.0000000 0.2848581  0.0  0.0000000  0.6
 [9,] 0.0000000  0.0000000  0.4695468 0.0000000 0.4352963  0.0  0.0000000  0.0
[10,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
[11,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
[12,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
[13,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0 -0.9626701  0.0
[14,] 0.0000000  0.0000000  0.0000000 0.0000000 0.2475513  0.0  0.7135141  0.0
[15,] 0.6707838  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
[16,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
[17,] 0.0000000  0.5083705 -0.8272902 0.0000000 0.0000000  0.0  0.0000000  0.0
[18,] 0.0000000  0.0000000  0.0000000 0.3593053 0.0000000  0.0 -0.2364319  0.0
[19,] 0.0000000  0.0000000  0.0000000 0.0000000 0.0000000  0.0  0.0000000  0.0
[20,] 0.0000000  0.6629700  0.0000000 0.0000000 0.5579375  0.0  0.0000000  0.0
            [,9] [,10] [,11]     [,12]      [,13] [,14] [,15]      [,16] [,17]
 [1,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [2,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [3,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [4,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [5,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [6,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [7,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [8,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
 [9,]  0.6000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
[10,]  0.0000000   0.6   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
[11,]  0.0000000   0.0   0.6 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
[12,]  0.0000000   0.0   0.0 0.6000000  0.0000000   0.0   0.0  0.0000000   0.0
[13,]  0.0000000   0.0   0.0 0.0000000  0.6000000   0.0   0.0  0.0000000   0.0
[14,] -0.7020518   0.0   0.0 0.0000000  0.0000000   0.6   0.0  0.0000000   0.0
[15,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.6  0.0000000   0.0
[16,]  0.0000000   0.0   0.0 0.0000000  0.5717020   0.0   0.0  0.6000000   0.0
[17,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0 -0.2358086   0.6
[18,]  0.0000000   0.0   0.0 0.0000000 -0.2103339   0.0   0.0  0.0000000   0.0
[19,]  0.0000000   0.0   0.0 0.0000000  0.0000000   0.0   0.0  0.0000000   0.0
[20,]  0.0000000   0.0   0.0 0.7237973  0.0000000   0.0   0.0  0.0000000   0.0
      [,18] [,19] [,20]
 [1,]   0.0   0.0   0.0
 [2,]   0.0   0.0   0.0
 [3,]   0.0   0.0   0.0
 [4,]   0.0   0.0   0.0
 [5,]   0.0   0.0   0.0
 [6,]   0.0   0.0   0.0
 [7,]   0.0   0.0   0.0
 [8,]   0.0   0.0   0.0
 [9,]   0.0   0.0   0.0
[10,]   0.0   0.0   0.0
[11,]   0.0   0.0   0.0
[12,]   0.0   0.0   0.0
[13,]   0.0   0.0   0.0
[14,]   0.0   0.0   0.0
[15,]   0.0   0.0   0.0
[16,]   0.0   0.0   0.0
[17,]   0.0   0.0   0.0
[18,]   0.6   0.0   0.0
[19,]   0.0   0.6   0.0
[20,]   0.0   0.0   0.6


$c
 [1] 0.2 0.2 0.2 0.2 0.2 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7 0.7
[20] 0.7

> 
> 
> 
> cleanEx()
> nameEx("logLik.varshrinkest")
> ### * logLik.varshrinkest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: logLik.varshrinkest
> ### Title: Log-likelihood method for class "varshrinkest"
> ### Aliases: logLik.varshrinkest
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> logLik(estim)
'log Lik.' -193.7315 (df=27.73143)
> 
> 
> 
> cleanEx()
> nameEx("normality.test_sh")
> ### * normality.test_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: normality.test_sh
> ### Title: Normality, multivariate skewness and kurtosis test
> ### Aliases: normality.test_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> normality.test_sh(estim)
$JB

	JB-Test (multivariate)

data:  Residuals of VAR object x
Chi-squared = 12.933, df = 8, p-value = 0.1142


$Skewness

	Skewness only (multivariate)

data:  Residuals of VAR object x
Chi-squared = 7.4572, df = 4, p-value = 0.1136


$Kurtosis

	Kurtosis only (multivariate)

data:  Residuals of VAR object x
Chi-squared = 5.4761, df = 4, p-value = 0.2418


> 
> 
> 
> cleanEx()
> nameEx("print.varshrinkest")
> ### * print.varshrinkest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: print.varshrinkest
> ### Title: Print method for class "varshrinkest"
> ### Aliases: print.varshrinkest
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> print(estim)

VAR Shrinkage Estimation Results:
================================= 

Estimated coefficients for equation e: 
====================================== 
Call:
e = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
 0.59232995  0.17231150 -0.02274400 -0.10513191 -0.13174015  0.05909336 
      rw.l2        U.l2       const 
-0.03962646  0.02849543  0.22497555 


Estimated coefficients for equation prod: 
========================================= 
Call:
prod = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
 0.04625636  0.22106072  0.01514473 -0.40965800 -0.25961106 -0.02032188 
      rw.l2        U.l2       const 
-0.13894249  0.08004113  0.32294040 


Estimated coefficients for equation rw: 
======================================= 
Call:
rw = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
-0.06630514 -0.18577813  0.27296145  0.30333382  0.39215625 -0.36321293 
      rw.l2        U.l2       const 
 0.13595533 -0.10423283  0.49816773 


Estimated coefficients for equation U: 
====================================== 
Call:
U = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

       e.l1     prod.l1       rw.l1        U.l1        e.l2     prod.l2 
-0.36080189 -0.12670335  0.03502787  0.04402338  0.02736896 -0.03596425 
      rw.l2        U.l2       const 
 0.09769206 -0.11019039  0.01049827 


lambda: 1e-04 5e-04 0.001 0.005 0.01 0.05 0.1 0.5 1 5 10 50 (estimated: TRUE) 
GCV:  1.5897 1.5882 1.5864 1.5748 1.5652 1.5472 1.5548 1.6569 1.7615 2.2673 2.5634 3.0467 
> 
> 
> 
> cleanEx()
> nameEx("restrict_sh")
> ### * restrict_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: restrict_sh
> ### Title: Restricted VAR
> ### Aliases: restrict_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> restrict_sh(estim)

VAR Estimation Results:
======================= 

Estimated coefficients for equation e: 
====================================== 
Call:
e = e.l1 + prod.l1 + e.l2 + const 

      e.l1    prod.l1       e.l2      const 
 0.9149131  0.2023237 -0.3240077  0.1268603 


Estimated coefficients for equation prod: 
========================================= 
Call:
prod = prod.l1 + U.l1 + e.l2 + const 

   prod.l1       U.l1       e.l2      const 
 0.2334553 -0.7816823 -0.4515019  0.2938866 


Estimated coefficients for equation rw: 
======================================= 
Call:
rw = rw.l1 + prod.l2 + const 

     rw.l1    prod.l2      const 
 0.3160282 -0.4901050  0.7312696 


Estimated coefficients for equation U: 
====================================== 
Call:
U = e.l1 + prod.l1 + rw.l2 + U.l2 

      e.l1    prod.l1      rw.l2       U.l2 
-0.4529394 -0.1465641  0.1559625 -0.2515450 


> 
> 
> 
> cleanEx()
> nameEx("roots_sh")
> ### * roots_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: roots_sh
> ### Title: Eigenvalues of the companion coefficient matrix of a
> ###   VAR(p)-process
> ### Aliases: roots_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> roots_sh(estim)
[1] 0.68690395 0.68690395 0.45924677 0.45924677 0.26744849 0.23799824 0.23799824
[8] 0.06900344
> 
> 
> 
> cleanEx()
> nameEx("serial.test_sh")
> ### * serial.test_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: serial.test_sh
> ### Title: Test for serially correlated errors for VAR shrinkage estimate
> ### Aliases: serial.test_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> serial.test_sh(estim)

	Portmanteau Test (asymptotic)

data:  Residuals of VAR object x
Chi-squared = 176.15, df = 224, p-value = 0.9921

> 
> 
> 
> cleanEx()
> nameEx("simVARmodel")
> ### * simVARmodel
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: simVARmodel
> ### Title: Generate multivariate time series data using the given VAR model
> ### Aliases: simVARmodel
> 
> ### ** Examples
> 
> myCoef <- list(A = list(matrix(c(0.5, 0, 0, 0.5), 2, 2)), c = c(0.2, 0.7))
> myModel <- list(Coef = myCoef, Sigma = diag(0.1^2, 2), dof = Inf)
> simVARmodel(numT = 100, model = myModel, burnin = 10)
              y1       y2
  [1,] 0.3676574 1.519013
  [2,] 0.4017844 1.397382
  [3,] 0.4109113 1.177221
  [4,] 0.3341890 1.401104
  [5,] 0.3744509 1.396058
  [6,] 0.3909889 1.396410
  [7,] 0.4636605 1.492589
  [8,] 0.4642573 1.528416
  [9,] 0.4261126 1.523598
 [10,] 0.4719457 1.553697
 [11,] 0.3828233 1.555062
 [12,] 0.5432510 1.484988
 [13,] 0.4409697 1.243559
 [14,] 0.5741298 1.383762
 [15,] 0.5171625 1.386268
 [16,] 0.5114093 1.377554
 [17,] 0.5209141 1.241702
 [18,] 0.4661467 1.273036
 [19,] 0.6245093 1.378312
 [20,] 0.3945963 1.525024
 [21,] 0.5637954 1.452233
 [22,] 0.5282507 1.464884
 [23,] 0.5757174 1.427061
 [24,] 0.5629406 1.275825
 [25,] 0.2727536 1.296413
 [26,] 0.3346373 1.308777
 [27,] 0.4959487 1.348457
 [28,] 0.6120349 1.484231
 [29,] 0.4609987 1.518433
 [30,] 0.4323554 1.442764
 [31,] 0.4479845 1.396046
 [32,] 0.5169285 1.467719
 [33,] 0.6072103 1.489526
 [34,] 0.6111244 1.375887
 [35,] 0.4055593 1.317194
 [36,] 0.4649063 1.395055
 [37,] 0.5708958 1.474381
 [38,] 0.2985189 1.425956
 [39,] 0.3067494 1.501089
 [40,] 0.3772394 1.490355
 [41,] 0.2827714 1.383975
 [42,] 0.2527434 1.426099
 [43,] 0.3882960 1.300113
 [44,] 0.1735378 1.493359
 [45,] 0.3122716 1.644720
 [46,] 0.4985853 1.485638
 [47,] 0.4637326 1.338405
 [48,] 0.4111125 1.426175
 [49,] 0.1747584 1.399582
 [50,] 0.2767990 1.639953
 [51,] 0.2926996 1.516052
 [52,] 0.3540651 1.527000
 [53,] 0.4104326 1.466300
 [54,] 0.4086889 1.358823
 [55,] 0.3255805 1.398291
 [56,] 0.1552657 1.218649
 [57,] 0.1748936 1.455880
 [58,] 0.1666560 1.443265
 [59,] 0.4064603 1.638894
 [60,] 0.3048406 1.566998
 [61,] 0.3304278 1.412504
 [62,] 0.5119389 1.467325
 [63,] 0.4038672 1.340253
 [64,] 0.4178091 1.244763
 [65,] 0.2624458 1.351526
 [66,] 0.4078311 1.331434
 [67,] 0.4469367 1.365827
 [68,] 0.5160793 1.390348
 [69,] 0.4757501 1.336222
 [70,] 0.3976738 1.311244
 [71,] 0.4720117 1.342104
 [72,] 0.3529686 1.488861
 [73,] 0.4972926 1.292074
 [74,] 0.5534447 1.405431
 [75,] 0.3326066 1.436011
 [76,] 0.4678880 1.524315
 [77,] 0.3927465 1.431739
 [78,] 0.4344809 1.452872
 [79,] 0.3763003 1.453146
 [80,] 0.2192628 1.372321
 [81,] 0.1509726 1.506947
 [82,] 0.3085771 1.569514
 [83,] 0.5828121 1.554778
 [84,] 0.2416399 1.636072
 [85,] 0.2541133 1.573885
 [86,] 0.2729239 1.359283
 [87,] 0.3378019 1.322315
 [88,] 0.3178901 1.238696
 [89,] 0.3753826 1.272008
 [90,] 0.3456219 1.273967
 [91,] 0.4128356 1.341195
 [92,] 0.5434386 1.279505
 [93,] 0.3729355 1.355556
 [94,] 0.2344932 1.312319
 [95,] 0.3481207 1.532888
 [96,] 0.4993893 1.538115
 [97,] 0.3854705 1.560075
 [98,] 0.3972062 1.518456
 [99,] 0.5719249 1.627446
[100,] 0.4857493 1.450149
> 
> 
> 
> cleanEx()
> nameEx("stability_sh")
> ### * stability_sh
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: stability_sh
> ### Title: Stability function
> ### Aliases: stability_sh
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> stability_sh(estim)
$e

Empirical Fluctuation Process: OLS-based CUSUM test 

Call: strucchange::efp(formula = formula, data = data, type = type, 
    h = h, dynamic = dynamic, rescale = rescale)


$prod

Empirical Fluctuation Process: OLS-based CUSUM test 

Call: strucchange::efp(formula = formula, data = data, type = type, 
    h = h, dynamic = dynamic, rescale = rescale)


$rw

Empirical Fluctuation Process: OLS-based CUSUM test 

Call: strucchange::efp(formula = formula, data = data, type = type, 
    h = h, dynamic = dynamic, rescale = rescale)


$U

Empirical Fluctuation Process: OLS-based CUSUM test 

Call: strucchange::efp(formula = formula, data = data, type = type, 
    h = h, dynamic = dynamic, rescale = rescale)


> 
> 
> 
> cleanEx()
> nameEx("summary.varshrinkest")
> ### * summary.varshrinkest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: summary.varshrinkest
> ### Title: Summary method for an object of class 'varshrinkest', VAR
> ###   parameters estimated by VARshrink()
> ### Aliases: summary.varshrinkest
> 
> ### ** Examples
> 
> data(Canada, package = "vars")
> y <- diff(Canada)
> estim <- VARshrink(y, p = 2, type = "const", method = "ridge")
> summary(estim)

VAR Shrinkage Estimation Results:
=================================== 
Endogenous variables: e, prod, rw, U 
Deterministic variables: const 
Sample size: 81 
Log Likelihood: -193.732 
Roots of the characteristic polynomial:
0.6869 0.6869 0.4592 0.4592 0.2674 0.238 0.238 0.069
Call:
VARshrink(y = y, p = 2, type = "const", method = "ridge")


Estimation results for equation e: 
================================== 
e = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

        Estimate Std. Error t value Pr(>|t|)    
e.l1     0.59233    0.07592   7.802 3.05e-11 ***
prod.l1  0.17231    0.05618   3.067  0.00302 ** 
rw.l1   -0.02274    0.04311  -0.528  0.59937    
U.l1    -0.10513    0.08517  -1.234  0.22097    
e.l2    -0.13174    0.07365  -1.789  0.07776 .  
prod.l2  0.05909    0.05797   1.019  0.31135    
rw.l2   -0.03963    0.04262  -0.930  0.35549    
U.l2     0.02850    0.08335   0.342  0.73340    
const    0.22498    0.06672   3.372  0.00119 ** 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


Residual standard error: 0.3796 on 74.06714 degrees of freedom
Multiple R-Squared: 0.5706,	Adjusted R-squared: 0.5363 
F-statistic: 16.59 on 5.932856 and 74.06714 DF,  p-value: 5.886e-12 


Estimation results for equation prod: 
===================================== 
prod = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

        Estimate Std. Error t value Pr(>|t|)   
e.l1     0.04626    0.13129   0.352  0.72559   
prod.l1  0.22106    0.09715   2.276  0.02577 * 
rw.l1    0.01514    0.07455   0.203  0.83958   
U.l1    -0.40966    0.14728  -2.781  0.00686 **
e.l2    -0.25961    0.12737  -2.038  0.04509 * 
prod.l2 -0.02032    0.10025  -0.203  0.83991   
rw.l2   -0.13894    0.07370  -1.885  0.06331 . 
U.l2     0.08004    0.14413   0.555  0.58033   
const    0.32294    0.11538   2.799  0.00653 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


Residual standard error: 0.6564 on 74.06714 degrees of freedom
Multiple R-Squared: 0.1666,	Adjusted R-squared: 0.0998 
F-statistic: 2.495 on 5.932856 and 74.06714 DF,  p-value: 0.03021 


Estimation results for equation rw: 
=================================== 
rw = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

        Estimate Std. Error t value Pr(>|t|)   
e.l1    -0.06631    0.17331  -0.383  0.70312   
prod.l1 -0.18578    0.12824  -1.449  0.15165   
rw.l1    0.27296    0.09841   2.774  0.00701 **
U.l1     0.30333    0.19443   1.560  0.12299   
e.l2     0.39216    0.16813   2.332  0.02240 * 
prod.l2 -0.36321    0.13233  -2.745  0.00760 **
rw.l2    0.13596    0.09729   1.397  0.16645   
U.l2    -0.10423    0.19026  -0.548  0.58544   
const    0.49817    0.15231   3.271  0.00163 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


Residual standard error: 0.8666 on 74.06714 degrees of freedom
Multiple R-Squared: 0.338,	Adjusted R-squared: 0.285 
F-statistic: 6.374 on 5.932856 and 74.06714 DF,  p-value: 2.058e-05 


Estimation results for equation U: 
================================== 
U = e.l1 + prod.l1 + rw.l1 + U.l1 + e.l2 + prod.l2 + rw.l2 + U.l2 + const 

        Estimate Std. Error t value Pr(>|t|)    
e.l1    -0.36080    0.05961  -6.052 5.39e-08 ***
prod.l1 -0.12670    0.04411  -2.872  0.00531 ** 
rw.l1    0.03503    0.03385   1.035  0.30414    
U.l1     0.04402    0.06688   0.658  0.51240    
e.l2     0.02737    0.05783   0.473  0.63744    
prod.l2 -0.03596    0.04552  -0.790  0.43200    
rw.l2    0.09769    0.03346   2.919  0.00464 ** 
U.l2    -0.11019    0.06544  -1.684  0.09644 .  
const    0.01050    0.05239   0.200  0.84173    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1


Residual standard error: 0.2981 on 74.06714 degrees of freedom
Multiple R-Squared: 0.5302,	Adjusted R-squared: 0.4925 
F-statistic: 14.09 on 5.932856 and 74.06714 DF,  p-value: 1.441e-10 



Scale matrix, Sigma, of multivariate t distribution for noise:
            e      prod       rw         U
e     0.13177 -0.016197 -0.01079 -0.071010
prod -0.01620  0.394040  0.04705  0.003839
rw   -0.01079  0.047052  0.68665  0.050078
U    -0.07101  0.003839  0.05008  0.081241

Degrees of freedom of multivariate t distribution for noise:
[1] Inf

Correlation matrix of Sigma:
            e     prod       rw        U
e     1.00000 -0.07108 -0.03588 -0.68632
prod -0.07108  1.00000  0.09046  0.02146
rw   -0.03588  0.09046  1.00000  0.21203
U    -0.68632  0.02146  0.21203  1.00000


> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  5.356 4.741 4.524 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')

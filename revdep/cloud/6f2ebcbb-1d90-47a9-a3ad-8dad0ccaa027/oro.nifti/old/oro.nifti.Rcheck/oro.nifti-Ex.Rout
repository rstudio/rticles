
R version 4.1.1 (2021-08-10) -- "Kick Things"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "oro.nifti"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('oro.nifti')
oro.nifti 0.11.4
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("afni-class")
> ### * afni-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: afni-class
> ### Title: Class "afni"
> ### Aliases: afni-class show,afni-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> showClass("afni")
Class "afni" [package "oro.nifti"]

Slots:
                                                        
Name:                     .Data             DATASET_RANK
Class:                    array                  integer
                                                        
Name:        DATASET_DIMENSIONS               TYPESTRING
Class:                  integer                character
                                                        
Name:                SCENE_DATA          ORIENT_SPECIFIC
Class:                  integer                  integer
                                                        
Name:                    ORIGIN                    DELTA
Class:                  numeric                  numeric
                                                        
Name:                TAXIS_NUMS             TAXIS_FLOATS
Class:                  integer                  numeric
                                                        
Name:             TAXIS_OFFSETS            IDCODE_STRING
Class:                  numeric                character
                                                        
Name:               IDCODE_DATE         BYTEORDER_STRING
Class:                character                character
                                                        
Name:               BRICK_STATS              BRICK_TYPES
Class:                  numeric                  integer
                                                        
Name:          BRICK_FLOAT_FACS               BRICK_LABS
Class:                  numeric                character
                                                        
Name:             BRICK_STATAUX                 STAT_AUX
Class:                  numeric                  numeric
                                                        
Name:              HISTORY_NOTE              NOTES_COUNT
Class:                character                  integer
                                                        
Name:               NOTE_NUMBER          TAGALIGN_MATVEC
Class:                character                  numeric
                                                        
Name:             VOLREG_MATVEC            VOLREG_ROTCOM
Class:                    array                character
                                                        
Name:         VOLREG_CENTER_OLD       VOLREG_CENTER_BASE
Class:                  numeric                  numeric
                                                        
Name:   VOLREG_ROTPARENT_IDCODE    VOLREG_ROTPARENT_NAME
Class:                character                character
                                                        
Name:  VOLREG_GRIDPARENT_IDCODE   VOLREG_GRIDPARENT_NAME
Class:                character                character
                                                        
Name:       VOLREG_INPUT_IDCODE        VOLREG_INPUT_NAME
Class:                character                character
                                                        
Name:        VOLREG_BASE_IDCODE         VOLREG_BASE_NAME
Class:                character                character
                                                        
Name:         VOLREG_ROTCOM_NUM       IDCODE_ANAT_PARENT
Class:                  integer                character
                                                        
Name:                 TO3D_ZPAD       IDCODE_WARP_PARENT
Class:                  integer                character
                                                        
Name:                 WARP_TYPE                WARP_DATA
Class:                  integer                  numeric
                                                        
Name:                 MARKS_XYZ                MARKS_LAB
Class:                  numeric                character
                                                        
Name:                MARKS_HELP              MARKS_FLAGS
Class:                character                  integer
                                                        
Name:                TAGSET_NUM            TAGSET_FLOATS
Class:                  integer                  numeric
                                                        
Name:             TAGSET_LABELS                  LABEL_1
Class:                character                character
                                                        
Name:                   LABEL_2             DATASET_NAME
Class:                character                character
                                                        
Name:          DATASET_KEYWORDS           BRICK_KEYWORDS
Class:                character                character

Extends: 
Class "array", from data part
Class "structure", by class "array", distance 2
Class "vector", by class "array", distance 3, with explicit coerce
> 
> 
> 
> cleanEx()
> nameEx("anlz-class")
> ### * anlz-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anlz-class
> ### Title: Class "anlz"
> ### Aliases: anlz-class show,anlz-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> showClass("anlz")
Class "anlz" [package "oro.nifti"]

Slots:
                                                                            
Name:          .Data    sizeof_hdr     data_type       db_name       extents
Class:         array       numeric     character     character       numeric
                                                                            
Name:  session_error       regular      hkey_un0          dim_     vox_units
Class:       numeric     character     character        vector     character
                                                                            
Name:      cal_units       unused1      datatype        bitpix       dim_un0
Class:     character       numeric       numeric       numeric       numeric
                                                                            
Name:         pixdim    vox_offset      funused1      funused2      funused3
Class:        vector       numeric       numeric       numeric       numeric
                                                                            
Name:        cal_max       cal_min    compressed      verified         glmax
Class:       numeric       numeric       numeric       numeric       numeric
                                                                            
Name:          glmin       descrip      aux_file        orient        origin
Class:       numeric     character     character     character       numeric
                                                                            
Name:      generated       scannum    patient_id      exp_date      exp_time
Class:     character     character     character     character     character
                                                                            
Name:       hist_un0         views    vols_added   start_field    field_skip
Class:     character       numeric       numeric       numeric       numeric
                                                              
Name:           omax          omin          smax          smin
Class:       numeric       numeric       numeric       numeric

Extends: 
Class "array", from data part
Class "structure", by class "array", distance 2
Class "vector", by class "array", distance 3, with explicit coerce
> 
> 
> 
> cleanEx()
> nameEx("anlz-nifti-ops")
> ### * anlz-nifti-ops
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anlz-nifti-ops
> ### Title: Operations for Objects in the ANALYZE and NIfTI classes
> ### Aliases: anlz-nifti-ops Ops,anlz,anlz-method Ops,anlz,numeric-method
> ###   Ops,numeric,anlz-method Ops,nifti,anlz-method Ops,anlz,nifti-method
> 
> ### ** Examples
> 
> 
> img01 <- anlz(array(1:64, c(4,4,4,1)), datatype=4)
> img02 <- anlz(array(64:1, c(4,4,4,1)), datatype=4)
> is.anlz(img01 + img02)
[1] TRUE
> is.anlz(sqrt(2) * img01)
[1] TRUE
> is.anlz(img02 / pi)
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("anlz")
> ### * anlz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: anlz
> ### Title: Constructor for Analyze
> ### Aliases: anlz
> 
> ### ** Examples
> 
> 
> aim <- anlz() # default
> 
> 
> 
> 
> cleanEx()
> nameEx("audit_trail")
> ### * audit_trail
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Audit Trails
> ### Title: Facilitate the Creation and Modification of Audit Trails
> ### Aliases: 'Audit Trails' oro.nifti.info enableAuditTrail newAuditTrail
> ###   niftiExtensionToAuditTrail niftiAuditTrailToExtension
> ###   niftiAuditTrailSystemNode niftiAuditTrailSystemNodeEvent
> ###   niftiAuditTrailCreated niftiAuditTrailEvent getLastCallWithName
> 
> ### ** Examples
> 
> ## A good example of the use of these functions is shown by this
> ## wrapper function which takes a function fun(nim, ...) returning
> ## lists of arrays which are nifti-ized using as(...)
> options("niftiAuditTrail"=TRUE)
> enableAuditTrail()
> 
> wrapper <- function(functionToWrap, nameOfCallingFunction, nim, ...) {
+   if (!is(nim, "nifti")) 
+     nim <- as(nim, "nifti")
+   
+   if (is(nim, "niftiAuditTrail")) {
+     ## This will force as(...) to set the call which created the
+     ## results to the calling function's call rather than
+     ## as(result, nifti) as it would otherwise do
+     slot(nim, "trail") <- niftiAuditTrailEvent(slot(nim, "trail"), "processing",
+                                       nameOfCallingFunction)
+   }
+   
+   result <- functionToWrap(nim, ...)
+   as(result, "nifti") <- nim
+   return(result)
+ }
> 
> ## An example of how wrapper is used follows:
> functionToWrap <- function(ignored, x, y) {
+   return (array(1, dim=c(x,y)))
+ }
> 
> ## The nifti-ized form
> niftiizedForm <- function(nim,...) {
+   return(wrapper(functionToWrap, "niftiizedForm", nim, ...))
+ }
>  
> ## Not run: 
> ##D   if (isTRUE(getOption("niftiAuditTrail"))) {
> ##D     print(slot(as.nifti(functionToWrap(nifti(), 4, 4), nifti()), "trail"))
> ##D     print(slot(niftiizedForm(nifti(), 4, 4), "trail"))
> ##D   }
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("aux_file-methods")
> ### * aux_file-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: aux_file-methods
> ### Title: Extract Image Attribute 'aux_file'
> ### Aliases: aux_file-methods aux_file-methods, aux_file
> ###   aux_file,nifti-method aux_file,anlz-method aux_file<-
> ###   aux_file<-,nifti-method aux_file<-,anlz-method aux.file
> ###   aux.file,nifti-method aux.file,anlz-method aux.file<-
> ###   aux.file<-,nifti-method aux.file<-,anlz-method
> ###   aux_file,niftiImage-method aux_file<-,niftiImage-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/avg152T1_RL_nifti.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D                     "mniRL.nii.gz")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> options("niftiAuditTrail"=FALSE)
> 
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "mniRL.nii.gz")
> mniRL <- readNIfTI(urlfile)
> aux.file(mniRL)
[1] "none                   "
> aux.file(mniRL) <- "avg152T1_RL_nifti"
> aux.file(mniRL)
[1] "avg152T1_RL_nifti"
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> aux_file(img)
[1] ""
> aux_file(img) = "hey"
> stopifnot(aux_file(img) ==  "hey")
> 
> 
> 
> cleanEx()
> nameEx("bitpix-methods")
> ### * bitpix-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: bitpix-methods
> ### Title: Extract Image Attribute 'bitpix'
> ### Aliases: bitpix-methods bitpix-methods, bitpix bitpix,nifti-method
> ###   bitpix,anlz-method bitpix<- bitpix<-,nifti-method
> ###   bitpix<-,anlz-method bitpix,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> bitpix(img)
[1] 32
> 
> 
> 
> cleanEx()
> nameEx("cal_max-methods")
> ### * cal_max-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cal_max-methods
> ### Title: Extract Image Attribute 'cal_max'
> ### Aliases: cal_max-methods cal_max-methods, cal_max cal_max,nifti-method
> ###   cal_max,anlz-method cal_max<- cal_max<-,nifti-method
> ###   cal_max<-,anlz-method cal.max cal.max,nifti-method
> ###   cal.max,anlz-method cal.max<- cal.max<-,nifti-method
> ###   cal.max<-,anlz-method cal.max,niftiImage-method
> ###   cal.max<-,niftiImage-method cal_max,niftiImage-method
> ###   cal_max<-,niftiImage-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/avg152T1_LR_nifti.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D                      "mniLR.nii.gz")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "mniLR.nii.gz")
> mniLR <- readNIfTI(urlfile)
> cal.max(mniLR)
[1] 255
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> cal.max(img)
[1] 2503
> cal_max(img)
[1] 2503
> cal.max(img) = 2500
> stopifnot(cal_max(img) == 2500)
> cal_max(img) = 2500
> cal.min(img)
[1] 0
> cal.min(img) = 2
> stopifnot(cal_min(img) == 2)
> cal_min(img)
[1] 2
> cal_min(img) = 0
> stopifnot(cal_min(img) == 0)
> 
> 
> 
> cleanEx()
> nameEx("cal_min-methods")
> ### * cal_min-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: cal_min-methods
> ### Title: Extract Image Attribute 'cal_min'
> ### Aliases: cal_min-methods cal_min-methods, cal_min cal_min,nifti-method
> ###   cal_min,anlz-method cal_min<- cal_min<-,nifti-method
> ###   cal_min<-,anlz-method cal.min cal.min,nifti-method
> ###   cal.min,anlz-method cal.min<- cal.min<-,nifti-method
> ###   cal.min<-,anlz-method cal.min,niftiImage-method
> ###   cal.min<-,niftiImage-method cal_min,niftiImage-method
> ###   cal_min<-,niftiImage-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/avg152T1_LR_nifti.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D                      "mniLR.nii.gz")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "mniLR.nii.gz")
> mniLR <- readNIfTI(urlfile)
> cal.min(mniLR)
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("convert_afni")
> ### * convert_afni
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: convert.scene
> ### Title: Convert AFNI data codes
> ### Aliases: convert.scene
> ### Keywords: misc
> 
> ### ** Examples
> 
> 
> ## 4 = CT for anatomic data
> convert.scene(4, "3DIM_HEAD_ANAT")
[1] "CT"
> 
> 
> 
> cleanEx()
> nameEx("convert_anlz")
> ### * convert_anlz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Convert ANALYZE Codes
> ### Title: Convert ANALYZE Codes
> ### Aliases: 'Convert ANALYZE Codes' convert.bitpix.anlz
> ###   convert.datatype.anlz convert.orient.anlz
> 
> ### ** Examples
> 
> 
> ##  4 = SIGNED_SHORT
> convert.datatype.anlz(4)
[1] "SIGNED_SHORT"
> ## 16 = FLOAT
> convert.datatype.anlz(16)
[1] "FLOAT"
> ##  2 = "saggital unflipped"
> convert.orient.anlz(2)
[1] "sagittal unflipped"
> ##  4 = "coronal flipped"
> convert.orient.anlz(4)
[1] "coronal flipped"
> 
> 
> 
> 
> cleanEx()
> nameEx("convert_nifti")
> ### * convert_nifti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: Convert NIfTI Codes
> ### Title: Convert NIfTI Codes
> ### Aliases: 'Convert NIfTI Codes' convert.bitpix convert.datatype
> ###   convert.intent convert.form convert.units convert.slice
> 
> ### ** Examples
> 
> 
> ##  4 = SIGNED_SHORT
> convert.datatype.anlz(4)
[1] "SIGNED_SHORT"
> ## 16 = FLOAT
> convert.datatype.anlz(16)
[1] "FLOAT"
> ##  2 = "saggital unflipped"
> convert.orient.anlz(2)
[1] "sagittal unflipped"
> ##  4 = "coronal flipped"
> convert.orient.anlz(4)
[1] "coronal flipped"
> 
> 
> 
> 
> cleanEx()
> nameEx("data_type-methods")
> ### * data_type-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: data_type-methods
> ### Title: Extract Image Attribute 'data_type'
> ### Aliases: data_type-methods data_type-methods, data_type
> ###   data_type,nifti-method data_type,anlz-method data_type<-
> ###   data_type<-,nifti-method data_type<-,anlz-method data.type
> ###   data.type,nifti-method data.type,anlz-method data.type<-
> ###   data.type<-,nifti-method data.type<-,anlz-method
> ###   data_type,niftiImage-method datatype,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> data_type(img)
[1] 8
> datatype(img)
[1] 8
> 
> 
> 
> cleanEx()
> nameEx("descrip-methods")
> ### * descrip-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: descrip-methods
> ### Title: Extract Image Attribute 'descrip'
> ### Aliases: descrip-methods descrip-methods, descrip descrip,nifti-method
> ###   descrip,anlz-method descrip<- descrip<-,nifti-method
> ###   descrip<-,anlz-method descrip,niftiImage-method
> ###   descrip<-,niftiImage-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/avg152T1_LR_nifti.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D                      "mniLR.nii.gz")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "mniLR.nii.gz")
> mniLR <- readNIfTI(urlfile)
> descrip(mniLR)
[1] "FSL3.2beta"
> ## Not run: 
> ##D descrip(mniLR) <- paste(descrip(mniLR), version$version.string, sep="; ")
> ##D descrip(mniLR)
> ## End(Not run)
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> descrip(img)
[1] "TractoR NIfTI writer v3.0.0"
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> descrip(img) = "a file"
> descrip(img)
[1] "a file"
> stopifnot(descrip(img) == "a file")
> 
> 
> 
> cleanEx()
> nameEx("drop_img_dim")
> ### * drop_img_dim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: dropImageDimension
> ### Title: Drop Image Dimension
> ### Aliases: dropImageDimension drop_img_dim
> 
> ### ** Examples
> 
> 
> nim <- nifti(array(rnorm(10^3), dim = rep(10, 3)))
> nim2 <- nifti(array(rnorm(10^3), dim = c(10, 10, 1, 10)))
> dropImageDimension(nim2)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 10 x 10 x 1 x 10
  Pixel Dimension : 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> dropImageDimension(nim2, onlylast = FALSE)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 10 x 10 x 10
  Pixel Dimension : 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> nim3 <- nifti(array(rnorm(10^3), dim = c(10, 10, 10, 1)))
> dropImageDimension(nim3)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 10 x 10 x 10
  Pixel Dimension : 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> dropImageDimension(nim3, onlylast = FALSE) # the same as above
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 10 x 10 x 10
  Pixel Dimension : 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> nim4 <- nifti(array(rnorm(10^3), dim = c(10, 10, 10, 1, 10)))
> dim(nim4[,,,1,])
[1] 10 10 10 10
> dim(nim4[,,,1,,drop=TRUE])
[1] 10 10 10 10
> dropImageDimension(nim4)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 10 x 10 x 10 x 1 x 10
  Pixel Dimension : 1 x 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> 
> nim5 <- nifti(array(rnorm(10^4), dim = c(1, 10, 10, 10, 1, 10)))
> dropImageDimension(nim5)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 1 x 10 x 10 x 10 x 1 x 10
  Pixel Dimension : 1 x 1 x 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> dropImageDimension(nim5, onlylast = FALSE)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 10 x 10 x 10 x 10
  Pixel Dimension : 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> 
> nim6 <- nifti(array(rnorm(10^3), dim = c(1, 10, 10, 10, 1, 1)))
> dropImageDimension(nim6)
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 1 x 10 x 10 x 10
  Pixel Dimension : 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> ## Not run: 
> ##D ## 27 scans of Colin Holmes (MNI) brain co-registered and averaged
> ##D ## NIfTI two-file format
> ##D URL <- "http://imaging.mrc-cbu.cam.ac.uk/downloads/Colin/colin_1mm.tgz"
> ##D urlfile <- file.path(tempdir(), "colin_1mm.tgz")
> ##D download.file(URL, dest=urlfile, quiet=TRUE)
> ##D untar(urlfile, exdir=tempdir())
> ##D colin <- readNIfTI(file.path(tempdir(), "colin_1mm"))
> ##D dim(colin)
> ##D dim_(colin)
> ##D pixdim(colin)
> ##D # this will error
> ##D writeNIfTI(colin, filename = tempfile())
> ##D colin <- dropImageDimension(colin)
> ##D writeNIfTI(colin, filename = tempfile())
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("hotmetal")
> ### * hotmetal
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: hotmetal
> ### Title: Hot Metal Color Table
> ### Aliases: hotmetal
> ### Keywords: aplot
> 
> ### ** Examples
> 
> 
> hotmetal(10) 
 [1] "#010000" "#4C0000" "#960000" "#E00000" "#FF2C00" "#FF7600" "#FFC100"
 [8] "#FFFF12" "#FFFF81" "#FFFFF1"
> image(outer(1:20,1:20,"+"), col=hotmetal(75), main="hotmetal")
> 
> 
> 
> 
> cleanEx()
> nameEx("img_length")
> ### * img_length
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: img_length
> ### Title: Gets Image Length in Each Dimension
> ### Aliases: img_length
> 
> ### ** Examples
> 
> nim <- nifti(array(rnorm(10^3), dim = c(5, 2, 100)),
+ pixdim = c(1, 0.5, 0.2, 1))
> img_length(nim) 
[1]   2.5   0.4 100.0
> 
> 
> 
> cleanEx()
> nameEx("intent_code-methods")
> ### * intent_code-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intent_code-methods
> ### Title: Extract Image Attribute 'intent_code'
> ### Aliases: intent_code-methods intent_code-methods, intent_code
> ###   intent_code,nifti-method intent_code<- intent_code<-,nifti-method
> ###   intent.code intent.code,nifti-method intent.code<-
> ###   intent.code<-,nifti-method intent_code,niftiImage-method
> ###   intent_code<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> intent_code(img)
[1] 0
> intent_code(img) = 4
> stopifnot(intent_code(img) == 4)
> 
> 
> 
> cleanEx()
> nameEx("intent_name-methods")
> ### * intent_name-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intent_name-methods
> ### Title: Extract Image Attribute 'intent_name'
> ### Aliases: intent_name-methods intent_name-methods, intent_name
> ###   intent_name,nifti-method intent_name<- intent_name<-,nifti-method
> ###   intent.name intent.name,nifti-method intent.name<-
> ###   intent.name<-,nifti-method intent_name,niftiImage-method
> ###   intent_name<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> intent_name(img)
[1] ""
> intent_name(img) = "hey"
> stopifnot(intent_name(img) ==  "hey")
> 
> 
> 
> cleanEx()
> nameEx("intent_p1-methods")
> ### * intent_p1-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: intent_p1-methods
> ### Title: Extract Image Attribute 'intent_p1'
> ### Aliases: intent_p1-methods intent_p1-methods, intent_p1
> ###   intent_p1,nifti-method intent_p1<- intent_p1<-,nifti-method intent.p1
> ###   intent.p1,nifti-method intent.p1<- intent.p1<-,nifti-method
> ###   intent_p1,niftiImage-method intent_p1<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> intent_p1(img)
[1] 0
> intent_p1(img) = 2
> stopifnot(intent_p1(img) == 2)
> intent_p2(img)
[1] 0
> intent_p2(img) = 2
> stopifnot(intent_p2(img) == 2)
> intent_p3(img)
[1] 0
> intent_p3(img) = 2
> stopifnot(intent_p3(img) == 2)
> 
> 
> 
> cleanEx()
> nameEx("magic-methods")
> ### * magic-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: magic-methods
> ### Title: Extract Image Attribute 'magic'
> ### Aliases: magic-methods magic-methods, magic magic,nifti-method magic<-
> ###   magic<-,nifti-method magic,niftiImage-method
> ###   magic<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> magic(img)
[1] "n+1"
> magic(img) = "ni1"
> stopifnot(magic(img) == "ni1")
> magic(img) = "n+1"
> stopifnot(magic(img) == "n+1")
> magic(img) = "r" # bad magic
> stopifnot(magic(img) == "")
> 
> 
> 
> cleanEx()
> nameEx("nifti-class")
> ### * nifti-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nifti-class
> ### Title: Class "nifti"
> ### Aliases: nifti-class show,nifti-method
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> showClass("nifti")
Class "nifti" [package "oro.nifti"]

Slots:
                                                                  
Name:           .Data     sizeof_hdr      data_type        db_name
Class:          array        numeric      character      character
                                                                  
Name:         extents  session_error        regular       dim_info
Class:        numeric        numeric      character      character
                                                                  
Name:            dim_      intent_p1      intent_p2      intent_p3
Class:         vector        numeric        numeric        numeric
                                                                  
Name:     intent_code       datatype         bitpix    slice_start
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:          pixdim     vox_offset      scl_slope      scl_inter
Class:         vector        numeric        numeric        numeric
                                                                  
Name:       slice_end     slice_code     xyzt_units        cal_max
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:         cal_min slice_duration        toffset          glmax
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:           glmin        descrip       aux_file     qform_code
Class:        numeric      character      character        numeric
                                                                  
Name:      sform_code      quatern_b      quatern_c      quatern_d
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:       qoffset_x      qoffset_y      qoffset_z         srow_x
Class:        numeric        numeric        numeric         vector
                                                                  
Name:          srow_y         srow_z    intent_name          magic
Class:         vector         vector      character      character
                                    
Name:        extender     reoriented
Class:         vector        logical

Extends: 
Class "array", from data part
Class "structure", by class "array", distance 2
Class "vector", by class "array", distance 3, with explicit coerce

Known Subclasses: 
Class "niftiExtension", directly
Class "niftiAuditTrail", by class "niftiExtension", distance 2
> 
> 
> 
> cleanEx()
> nameEx("nifti")
> ### * nifti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nifti
> ### Title: Constructor for NIfTI
> ### Aliases: nifti
> 
> ### ** Examples
> 
> 
> options("niftiAuditTrail"=FALSE)
> 
> nim <- nifti() # default
> nim
NIfTI-1 format
  Type            : nifti
  Data Type       : 2 (UINT8)
  Bits per Pixel  : 8
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 1 x 1 x 1 x 1
  Pixel Dimension : 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> nim <- nifti(datatype=4) # 2-byte integers
> nim
NIfTI-1 format
  Type            : nifti
  Data Type       : 4 (INT16)
  Bits per Pixel  : 16
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 1 x 1 x 1 x 1
  Pixel Dimension : 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> 
> 
> 
> cleanEx()
> nameEx("niftiAuditTrail-class")
> ### * niftiAuditTrail-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: niftiAuditTrail-class
> ### Title: Class "niftiAuditTrail"
> ### Aliases: niftiAuditTrail-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> showClass("niftiAuditTrail")
Class "niftiAuditTrail" [package "oro.nifti"]

Slots:
                                                                  
Name:           .Data          trail     extensions     sizeof_hdr
Class:          array            ANY           list        numeric
                                                                  
Name:       data_type        db_name        extents  session_error
Class:      character      character        numeric        numeric
                                                                  
Name:         regular       dim_info           dim_      intent_p1
Class:      character      character         vector        numeric
                                                                  
Name:       intent_p2      intent_p3    intent_code       datatype
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:          bitpix    slice_start         pixdim     vox_offset
Class:        numeric        numeric         vector        numeric
                                                                  
Name:       scl_slope      scl_inter      slice_end     slice_code
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:      xyzt_units        cal_max        cal_min slice_duration
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:         toffset          glmax          glmin        descrip
Class:        numeric        numeric        numeric      character
                                                                  
Name:        aux_file     qform_code     sform_code      quatern_b
Class:      character        numeric        numeric        numeric
                                                                  
Name:       quatern_c      quatern_d      qoffset_x      qoffset_y
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:       qoffset_z         srow_x         srow_y         srow_z
Class:        numeric         vector         vector         vector
                                                                  
Name:     intent_name          magic       extender     reoriented
Class:      character      character         vector        logical

Extends: 
Class "niftiExtension", directly
Class "nifti", by class "niftiExtension", distance 2
Class "array", by class "niftiExtension", distance 3
Class "structure", by class "niftiExtension", distance 4
Class "vector", by class "niftiExtension", distance 5, with explicit coerce
> 
> 
> 
> 
> cleanEx()
> nameEx("niftiExtension-class")
> ### * niftiExtension-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: niftiExtension-class
> ### Title: Class "niftiExtension"
> ### Aliases: niftiExtension-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> showClass("niftiExtension")
Class "niftiExtension" [package "oro.nifti"]

Slots:
                                                                  
Name:           .Data     extensions     sizeof_hdr      data_type
Class:          array           list        numeric      character
                                                                  
Name:         db_name        extents  session_error        regular
Class:      character        numeric        numeric      character
                                                                  
Name:        dim_info           dim_      intent_p1      intent_p2
Class:      character         vector        numeric        numeric
                                                                  
Name:       intent_p3    intent_code       datatype         bitpix
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:     slice_start         pixdim     vox_offset      scl_slope
Class:        numeric         vector        numeric        numeric
                                                                  
Name:       scl_inter      slice_end     slice_code     xyzt_units
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:         cal_max        cal_min slice_duration        toffset
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:           glmax          glmin        descrip       aux_file
Class:        numeric        numeric      character      character
                                                                  
Name:      qform_code     sform_code      quatern_b      quatern_c
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:       quatern_d      qoffset_x      qoffset_y      qoffset_z
Class:        numeric        numeric        numeric        numeric
                                                                  
Name:          srow_x         srow_y         srow_z    intent_name
Class:         vector         vector         vector      character
                                                   
Name:           magic       extender     reoriented
Class:      character         vector        logical

Extends: 
Class "nifti", directly
Class "array", by class "nifti", distance 2
Class "structure", by class "nifti", distance 3
Class "vector", by class "nifti", distance 4, with explicit coerce

Known Subclasses: "niftiAuditTrail"
> 
> 
> 
> cleanEx()
> nameEx("niftiExtensionSection-class")
> ### * niftiExtensionSection-class
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: niftiExtensionSection-class
> ### Title: Class "niftiExtensionSection"
> ### Aliases: niftiExtensionSection-class
> ### Keywords: classes
> 
> ### ** Examples
> 
> 
> showClass("niftiExtensionSection")
Class "niftiExtensionSection" [package "oro.nifti"]

Slots:
                                    
Name:      esize     ecode     edata
Class:   numeric   numeric character
> 
> 
> 
> cleanEx()
> nameEx("niftiops")
> ### * niftiops
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: nifti-operators
> ### Title: Operations for NIfTI Objects
> ### Aliases: nifti-operators Ops,nifti,nifti-method
> ###   Ops,nifti,numeric-method Ops,numeric,nifti-method
> 
> ### ** Examples
> 
> 
> img01 <- nifti(array(1:64, c(4,4,4,1)), datatype=4)
> img02 <- nifti(array(64:1, c(4,4,4,1)), datatype=4)
> is.nifti(img01 + img02)
[1] TRUE
> is.nifti(sqrt(2) * img01)
[1] TRUE
> is.nifti(img02 / pi)
[1] TRUE
> 
> 
> 
> 
> cleanEx()
> nameEx("orientation-methods")
> ### * orientation-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: orientation-methods
> ### Title: Extract NIfTI 3D Image Orientation
> ### Aliases: orientation-methods qform-methods qform,nifti-method qform
> ###   sform-methods sform,nifti-method sform
> ### Keywords: methods
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/avg152T1_LR_nifti.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D                      "mniLR.nii.gz")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "mniLR.nii.gz")
> mniLR <- readNIfTI(urlfile)
> sform(mniLR)
     [,1] [,2] [,3] [,4]
[1,]   -2    0    0   90
[2,]    0    2    0 -126
[3,]    0    0    2  -72
> 
> 
> 
> cleanEx()
> nameEx("origin-methods")
> ### * origin-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: origin-methods
> ### Title: Extract Image Attribute 'origin'
> ### Aliases: origin-methods origin-methods, origin origin,nifti-method
> ###   origin,anlz-method origin,ANY-method origin<- origin<-,anlz-method
> ###   origin<-,nifti-method
> 
> ### ** Examples
> 
> fname = system.file("nifti", "mniRL.nii.gz", 
+ package = "oro.nifti")
> img = readNIfTI(fname)
> oimg = origin(img)
> stopifnot(all(oimg == c(-90, -126, -72)))
> zero_img = img
> origin(zero_img) = rep(0, 3)
> stopifnot(all(origin(zero_img) == 0))
> 
> 
> 
> cleanEx()
> nameEx("orthographic-methods")
> ### * orthographic-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: orthographic-methods
> ### Title: Methods for Function 'orthographic' in Package 'dcemriS4'
> ### Aliases: orthographic-methods orthographic.nifti orthographic
> ###   orthographic,nifti-method orthographic,anlz-method
> ###   orthographic,array-method orthographic,afni-method
> ### Keywords: methods
> 
> ### ** Examples
> 
> fname = system.file(
+ file.path("nifti", "mniRL.nii.gz"),
+ package = "oro.nifti")
> eve = readNIfTI(fname)
> orthographic(eve)
> 
> image(eve, z = 45)
> image(eve, z = 45, plot.type = "single")
> image(eve, z = c(45, 50), plot.type = "single")
> 
> 
> 
> cleanEx()
> nameEx("pixdim-methods")
> ### * pixdim-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: pixdim-methods
> ### Title: Extract Image Attribute 'pixdim'
> ### Aliases: pixdim-methods pixdim-methods, pixdim pixdim,nifti-method
> ###   pixdim,ANY-method pixdim,anlz-method pixdim<- pixdim<-,nifti-method
> ###   pixdim<-,anlz-method pixdim<-,ANY-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/avg152T1_LR_nifti.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D "mniLR.nii.gz")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "mniLR.nii.gz")
> mniLR <- readNIfTI(urlfile)
> pixdim(mniLR)
[1] 0 2 2 2 1 1 1 1
> 
> 
> 
> cleanEx()
> nameEx("qform_code-methods")
> ### * qform_code-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qform_code-methods
> ### Title: Extract Image Attribute 'qform_code'
> ### Aliases: qform_code-methods qform_code-methods, qform_code
> ###   qform_code,nifti-method qform_code<- qform_code<-,nifti-method
> ###   qform.code qform.code,nifti-method qform.code<-
> ###   qform.code<-,nifti-method qform_code,niftiImage-method
> ###   qform_code<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> qform_code(img)
[1] 2
> qform_code(img) = 8
> stopifnot(qform_code(img) ==  8)
> 
> 
> 
> cleanEx()
> nameEx("qoffset_x-methods")
> ### * qoffset_x-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qoffset_x-methods
> ### Title: Extract Image Attribute 'qoffset_x'
> ### Aliases: qoffset_x-methods qoffset_x-methods, qoffset_x
> ###   qoffset_x,nifti-method qoffset_x<- qoffset_x<-,nifti-method qoffset.x
> ###   qoffset.x,nifti-method qoffset.x<- qoffset.x<-,nifti-method
> ###   qoffset_x,niftiImage-method qoffset_x<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> qoffset_x(img)
[1] 122.0339
> qoffset_x(img) = 10
> stopifnot(qoffset_x(img) == 10)
> 
> 
> 
> cleanEx()
> nameEx("qoffset_y-methods")
> ### * qoffset_y-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qoffset_y-methods
> ### Title: Extract Image Attribute 'qoffset_y'
> ### Aliases: qoffset_y-methods qoffset_y-methods, qoffset_y
> ###   qoffset_y,nifti-method qoffset_y<- qoffset_y<-,nifti-method qoffset.y
> ###   qoffset.y,nifti-method qoffset.y<- qoffset.y<-,nifti-method
> ###   qoffset_y,niftiImage-method qoffset_y<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> qoffset_y(img)
[1] -95.18523
> qoffset_y(img) = 10
> stopifnot(qoffset_y(img) == 10)
> 
> 
> 
> cleanEx()
> nameEx("qoffset_z-methods")
> ### * qoffset_z-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: qoffset_z-methods
> ### Title: Extract Image Attribute 'qoffset_z'
> ### Aliases: qoffset_z-methods qoffset_z-methods, qoffset_z
> ###   qoffset_z,nifti-method qoffset_z<- qoffset_z<-,nifti-method qoffset.z
> ###   qoffset.z,nifti-method qoffset.z<- qoffset.z<-,nifti-method
> ###   qoffset_z,niftiImage-method qoffset_z<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> qoffset_z(img)
[1] -55.03814
> qoffset_z(img) = 10
> stopifnot(qoffset_z(img) == 10)
> 
> 
> 
> cleanEx()
> nameEx("quatern_b-methods")
> ### * quatern_b-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quatern_b-methods
> ### Title: Extract Image Attribute 'quatern_b'
> ### Aliases: quatern_b-methods quatern_b-methods, quatern_b
> ###   quatern_b,nifti-method quatern_b<- quatern_b<-,nifti-method quatern.b
> ###   quatern.b,nifti-method quatern.b<- quatern.b<-,nifti-method
> ###   quatern_b,niftiImage-method quatern_b<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> quatern_b(img)
[1] 0
> quatern_b(img) = 3
> stopifnot(quatern_b(img) == 3)
> quatern_c(img)
[1] 1
> quatern_c(img) = 3
> stopifnot(quatern_c(img) == 3)
> quatern_d(img)
[1] 0
> quatern_d(img) = 3
> stopifnot(quatern_d(img) == 3)
> 
> 
> 
> cleanEx()
> nameEx("quaternion2rotation")
> ### * quaternion2rotation
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: quaternion2rotation
> ### Title: Convert Quaternion into a Rotation Matrix
> ### Aliases: quaternion2rotation quaternion2mat44
> 
> ### ** Examples
> 
> 
> ## This R matrix is represented by quaternion [a,b,c,d] = [0,1,0,0]
> ## (which encodes a 180 degree rotation about the x-axis).
> (R <- quaternion2rotation(1, 0, 0))
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0   -1    0
[3,]    0    0   -1
> 
> 
> 
> cleanEx()
> nameEx("read_afni")
> ### * read_afni
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readAFNI
> ### Title: readAFNI
> ### Aliases: readAFNI
> ### Keywords: file methods
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ## Taken from the AFNI Matlab Library
> ##D ## http://afni.nimh.nih.gov/pub/dist/data/afni_matlab_data.tgz
> ##D afni.path <- system.file("afni", package="oro.nifti")
> ##D orig <- readAFNI(file.path(afni.path, "ARzs_CW_avvr.DEL+orig"))
> ##D image(orig, zlim=c(0.5,256), oma=rep(2,4))
> ##D orthographic(orig, zlim=c(0.5,256), oma=rep(2,4))
> ##D ## Taken from the AFNI installation
> ##D TT <- readAFNI(file.path(afni.path, "TT_N27_EZ_LR+tlrc"))
> ##D image(TT, zlim=c(0.5,256), oma=rep(2,4))
> ##D orthographic(TT, zlim=c(0.5,256), oma=rep(2,4))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("read_anlz")
> ### * read_anlz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readANALYZE
> ### Title: readANALYZE
> ### Aliases: readANALYZE
> ### Keywords: file
> 
> ### ** Examples
> 
> 
> ## avg152T1
> anlz.path <- system.file("anlz", package="oro.nifti")
> mni152 <- readANALYZE(file.path(anlz.path, "avg152T1"))
> image(mni152, oma=rep(2,4))
> orthographic(mni152, oma=rep(2,4))
> 
> 
> 
> cleanEx()
> nameEx("read_nifti")
> ### * read_nifti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: readNIfTI
> ### Title: readNIfTI
> ### Aliases: readNIfTI nifti_header
> ### Keywords: file
> 
> ### ** Examples
> 
> 
> ## Not run: 
> ##D url <- "http://nifti.nimh.nih.gov/nifti-1/data/filtered_func_data.nii.gz"
> ##D urlfile <- file.path(system.file("nifti", package="oro.nifti"),
> ##D                      "filtered_func_data")
> ##D download.file(url, urlfile, quiet=TRUE)
> ## End(Not run)
> ## The NIfTI file provided here contains the first 18 volumes (10%)
> ## of the original data set
> urlfile <- file.path(system.file("nifti", package="oro.nifti"),
+                      "filtered_func_data")
> (ffd <- readNIfTI(urlfile))
NIfTI-1 format
  Type            : niftiExtension
  Data Type       : 4 (INT16)
  Bits per Pixel  : 16
  Slice Code      : 0 (Unknown)
  Intent Code     : 0 (None)
  Qform Code      : 0 (Unknown)
  Sform Code      : 0 (Unknown)
  Dimension       : 64 x 64 x 21 x 64
  Pixel Dimension : 1 x 1 x 1 x 1
  Voxel Units     : Unknown
  Time Units      : Unknown
> image(ffd, oma=rep(2,4))
> orthographic(ffd, oma=rep(2,4))
> ## Not run: 
> ##D ## 27 scans of Colin Holmes (MNI) brain co-registered and averaged
> ##D ## NIfTI two-file format
> ##D URL <- "http://imaging.mrc-cbu.cam.ac.uk/downloads/Colin/colin_1mm.tgz"
> ##D urlfile <- file.path(tempdir(), "colin_1mm.tgz")
> ##D download.file(URL, dest=urlfile, quiet=TRUE)
> ##D untar(urlfile, exdir=tempdir())
> ##D colin <- readNIfTI(file.path(tempdir(), "colin_1mm"))
> ##D image(colin, oma=rep(2,4))
> ##D orthographic(colin, oma=rep(2,4))
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("scl_inter-methods")
> ### * scl_inter-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scl_inter-methods
> ### Title: Extract Image Attribute 'scl_inter'
> ### Aliases: scl_inter-methods scl_inter-methods, scl_inter
> ###   scl_inter,nifti-method scl_inter<- scl_inter<-,nifti-method scl.inter
> ###   scl.inter,nifti-method scl.inter<- scl.inter<-,nifti-method
> ###   scl_inter,niftiImage-method scl.inter,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> scl_inter(img)
[1] 0
> scl.inter(img)
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("scl_slope-methods")
> ### * scl_slope-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: scl_slope-methods
> ### Title: Extract Image Attribute 'scl_slope'
> ### Aliases: scl_slope-methods scl_slope-methods, scl_slope
> ###   scl_slope,nifti-method scl_slope<- scl_slope<-,nifti-method scl.slope
> ###   scl.slope,nifti-method scl.slope<- scl.slope<-,nifti-method
> ###   scl_slope,niftiImage-method scl.slope,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> scl_slope(img)
[1] 0
> scl.slope(img)
[1] 0
> 
> 
> 
> cleanEx()
> nameEx("sform_code-methods")
> ### * sform_code-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sform_code-methods
> ### Title: Extract Image Attribute 'sform_code'
> ### Aliases: sform_code-methods sform_code-methods, sform_code
> ###   sform_code,nifti-method sform_code<- sform_code<-,nifti-method
> ###   sform.code sform.code,nifti-method sform.code<-
> ###   sform.code<-,nifti-method sform_code,niftiImage-method
> ###   sform_code<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> sform_code(img)
[1] 2
> sform_code(img) = 4
> stopifnot(sform_code(img) ==  4)
> 
> 
> 
> cleanEx()
> nameEx("slice_code-methods")
> ### * slice_code-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slice_code-methods
> ### Title: Extract Image Attribute 'slice_code'
> ### Aliases: slice_code-methods slice_code-methods, slice_code
> ###   slice_code,nifti-method slice_code<- slice_code<-,nifti-method
> ###   slice.code slice.code,nifti-method slice.code<-
> ###   slice.code<-,nifti-method slice_code,niftiImage-method
> ###   slice_code<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> slice_code(img)
[1] 0
> slice_code(img) = 8
> stopifnot(slice_code(img) ==  8)
> 
> 
> 
> cleanEx()
> nameEx("slice_duration-methods")
> ### * slice_duration-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slice_duration-methods
> ### Title: Extract Image Attribute 'slice_duration'
> ### Aliases: slice_duration-methods slice_duration-methods, slice_duration
> ###   slice_duration,nifti-method slice_duration<-
> ###   slice_duration<-,nifti-method slice.duration
> ###   slice.duration,nifti-method slice.duration<-
> ###   slice.duration<-,nifti-method slice_duration,niftiImage-method
> ###   slice_duration<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> slice_duration(img)
[1] 0
> slice_duration(img) = 8
> stopifnot(slice_duration(img) ==  8)
> 
> 
> 
> cleanEx()
> nameEx("slice_end-methods")
> ### * slice_end-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slice_end-methods
> ### Title: Extract Image Attribute 'slice_end'
> ### Aliases: slice_end-methods slice_end-methods, slice_end
> ###   slice_end,nifti-method slice_end<- slice_end<-,nifti-method slice.end
> ###   slice.end,nifti-method slice.end<- slice.end<-,nifti-method
> ###   slice_end,niftiImage-method slice_end<-,niftiImage-method
> ###   slice.end,niftiImage-method slice.end<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> slice_end(img)
[1] 0
> slice_end(img) = 4
> stopifnot(slice_end(img) == 4) 
> slice.end(img)
[1] 4
> slice.end(img) = 0
> 
> 
> 
> cleanEx()
> nameEx("slice_start-methods")
> ### * slice_start-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: slice_start-methods
> ### Title: Extract Image Attribute 'slice_start'
> ### Aliases: slice_start-methods slice_start-methods, slice_start
> ###   slice_start,nifti-method slice_start<- slice_start<-,nifti-method
> ###   slice.start slice.start,nifti-method slice.start<-
> ###   slice.start<-,nifti-method slice_start,niftiImage-method
> ###   slice_start<-,niftiImage-method slice.start,niftiImage-method
> ###   slice.start<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> slice_start(img)
[1] 0
> slice_start(img) = 4
> stopifnot(slice_start(img) == 4) 
> slice.start(img)
[1] 4
> slice.start(img) = 0
> 
> 
> 
> cleanEx()
> nameEx("srow_x-methods")
> ### * srow_x-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: srow_x-methods
> ### Title: Extract Image Attribute 'srow_x'
> ### Aliases: srow_x-methods srow_x-methods, srow_x srow_x,nifti-method
> ###   srow_x<- srow_x<-,nifti-method srow.x srow.x,nifti-method srow.x<-
> ###   srow.x<-,nifti-method srow_x,niftiImage-method
> ###   srow_x<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> srow_x(img)
[1]  -2.5000   0.0000   0.0000 122.0339
> srow_x(img) = rep(0, 4)
> stopifnot(srow_x(img) == rep(0, 4))
> 
> srow_y(img)
[1]   0.00000   2.50000   0.00000 -95.18523
> srow_y(img) = rep(0, 4)
> stopifnot(srow_y(img) == rep(0, 4))
> 
> srow_z(img)
[1]   0.00000   0.00000   2.50000 -55.03814
> srow_z(img) = rep(0, 4)
> stopifnot(srow_z(img) == rep(0, 4))
> 
> 
> 
> cleanEx()
> nameEx("tim_colors")
> ### * tim_colors
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: tim.colors
> ### Title: Tim's Useful Color Table
> ### Aliases: tim.colors
> ### Keywords: aplot
> 
> ### ** Examples
> 
> 
> tim.colors(10) 
 [1] "#00008F" "#0000FF" "#0070FF" "#00DFFF" "#50FFAF" "#BFFF40" "#FFCF00"
 [8] "#FF6000" "#EF0000" "#800000"
> image(outer(1:20, 1:20, "+"), col=tim.colors(75), main="tim.colors")
> 
> 
> 
> cleanEx()
> nameEx("toffset-methods")
> ### * toffset-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: toffset-methods
> ### Title: Extract Image Attribute 'toffset'
> ### Aliases: toffset-methods toffset-methods, toffset toffset,nifti-method
> ###   toffset<- toffset<-,nifti-method toffset,niftiImage-method
> ###   toffset<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> toffset(img)
[1] 0
> toffset(img) = 8
> stopifnot(toffset(img) ==  8)
> 
> 
> 
> cleanEx()
> nameEx("transformCoordinate")
> ### * transformCoordinate
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: translateCoordinate
> ### Title: Translate Voxel Coordinates
> ### Aliases: translateCoordinate
> 
> ### ** Examples
> 
> 
> ffd <- readNIfTI(file.path(system.file("nifti", package="oro.nifti"),
+                            "filtered_func_data"))
> xyz <- c(1,1,1)
> translateCoordinate(xyz, ffd, verbose=TRUE)
Input voxel coordinate:
     [,1]
[1,]    1
[2,]    1
[3,]    1
QForm_code and SForm_code unset: Orientation by Method 1.
     [,1]
[1,]    0
[2,]    0
[3,]    0
> xyz <- trunc(dim(ffd)[1:3]/2)
> translateCoordinate(xyz, ffd, verbose=TRUE)
Input voxel coordinate:
     [,1]
[1,]   32
[2,]   32
[3,]   10
QForm_code and SForm_code unset: Orientation by Method 1.
     [,1]
[1,]   31
[2,]   31
[3,]    9
> 
> 
> 
> cleanEx()
> nameEx("vox_offset-methods")
> ### * vox_offset-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: vox_offset-methods
> ### Title: Extract Image Attribute 'vox_offset'
> ### Aliases: vox_offset-methods vox_offset-methods, vox_offset
> ###   vox_offset,nifti-method vox_offset,anlz-method vox_offset<-
> ###   vox_offset<-,nifti-method vox_offset<-,anlz-method vox.offset
> ###   vox.offset,nifti-method vox.offset,anlz-method vox.offset<-
> ###   vox.offset<-,nifti-method vox.offset<-,anlz-method
> ###   vox_offset,niftiImage-method vox.offset,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> vox_offset(img)
[1] 352
> img = RNifti::readNifti(file)
> vox.offset(img)
[1] 352
> 
> 
> 
> cleanEx()
> nameEx("voxdim")
> ### * voxdim
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: voxdim
> ### Title: Gets Voxel Dimensions
> ### Aliases: voxdim
> 
> ### ** Examples
> 
> nim <- nifti(array(rnorm(10^3), dim = c(5, 2, 100)),
+ pixdim = c(1, 0.5, 0.2, 1))
> voxdim(nim)
[1] 0.5 0.2 1.0
> 
> 
> 
> 
> cleanEx()
> nameEx("write_afni-methods")
> ### * write_afni-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeAFNI-methods
> ### Title: writeAFNI
> ### Aliases: writeAFNI-methods writeAFNI writeAFNI,afni-method
> ###   writeAFNI,ANY-method
> ### Keywords: file methods
> 
> ### ** Examples
> 
> 
> ## Taken from the AFNI Matlab Library
> ## http://afni.nimh.nih.gov/pub/dist/data/afni_matlab_data.tgz
> afni.path <- system.file("afni", package="oro.nifti")
> orig <- readAFNI(file.path(afni.path, "ARzs_CW_avvr.DEL+orig"))
> fname = file.path(tempdir(), "test-afni-image")
> writeAFNI(orig, fname, verbose=TRUE)
> 
> data <- readAFNI(fname, verbose=TRUE)
  fname = /tmp/RtmpQHEm5y/test-afni-image
  files = /tmp/RtmpQHEm5y/test-afni-image.HEAD/BRIK
  endianess = little
> image(orig, zlim=c(0.5,256), oma=rep(2,4), bg="white")
> image(data, zlim=c(0.5,256), oma=rep(2,4), bg="white")
> abs.err <- abs(data - orig)
> image(as(abs.err, "nifti"), zlim=range(0,1), oma=rep(2,4),
+       bg="white")
> 
> 
> 
> cleanEx()
> nameEx("write_anlz")
> ### * write_anlz
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeANALYZE-methods
> ### Title: writeANALYZE
> ### Aliases: writeANALYZE-methods writeANALYZE writeANALYZE,anlz-method
> ### Keywords: file methods
> 
> ### ** Examples
> 
> 
> norm <- dnorm(seq(-5, 5, length=32), sd=2)
> norm <- (norm-min(norm)) / max(norm-min(norm))
> img <- outer(outer(norm, norm), norm)
> img <- round(255*img)
> img[17:32,,] <- 255 - img[17:32,,]
> img.anlz <- anlz(img) # create Analyze object
> 
> fname = file.path(tempdir(), "test-anlz-image-uint8")
> 
> writeANALYZE(img.anlz, fname, verbose=TRUE)
  dims = 32 32 32
> ## These files should be viewable in, for example, FSLview
> ## Make sure you adjust the min/max values for proper visualization
> data <- readANALYZE(fname, verbose=TRUE)
  fname = /tmp/RtmpQHEm5y/test-anlz-image-uint8
  files = /tmp/RtmpQHEm5y/test-anlz-image-uint8.{hdr.gz,img.gz}
  hdr   = /tmp/RtmpQHEm5y/test-anlz-image-uint8.hdr.gz
  img   = /tmp/RtmpQHEm5y/test-anlz-image-uint8.img.gz
> image(img.anlz, oma=rep(2,4), bg="white")
> image(data, oma=rep(2,4), bg="white")
> abs.err <- abs(data - img.anlz)
> image(as(abs.err, "anlz"), zlim=range(img.anlz), oma=rep(2,4), bg="white")
> 
> ## Not run: 
> ##D ## Loop through all possible data types
> ##D datatypes <- list(code=c(2, 4, 8, 16, 64),
> ##D                   name=c("uint8", "int16", "int32", "float", "double"))
> ##D equal <- vector("list")
> ##D for (i in 1:length(datatypes$code)) {
> ##D   fname <- paste("test-anlz-image-", datatypes$name[i], sep="")
> ##D   fname = file.path(tempdir(), fname)
> ##D   rm(img.anlz)
> ##D   img.anlz <- anlz(img, datatype=datatypes$code[i])
> ##D   writeANALYZE(img.anlz, fname)
> ##D   equal[[i]] <- all(readANALYZE(fname) == img)
> ##D }
> ##D names(equal) <- datatypes$name
> ##D unlist(equal)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("write_nifti")
> ### * write_nifti
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: writeNIfTI-methods
> ### Title: writeNIfTI
> ### Aliases: writeNIfTI-methods writeNIfTI writeNIfTI,nifti-method
> ###   writeNIfTI,anlz-method writeNIfTI,array-method
> ###   writeNIfTI,niftiExtension-method
> ### Keywords: file methods
> 
> ### ** Examples
> 
> 
> norm <- dnorm(seq(-5, 5, length=32), sd=2)
> norm <- (norm-min(norm)) / max(norm-min(norm))
> img <- outer(outer(norm, norm), norm)
> img <- round(255 * img)
> img[17:32,,] <- 255 - img[17:32,,]
> img.nifti <- nifti(img) # create NIfTI object
> 
> fname = file.path(tempdir(), "test-nifti-image-uint8")
> 
> writeNIfTI(img.nifti, fname, verbose=TRUE)
  writing data at byte = 352
[1] "/tmp/RtmpQHEm5y/test-nifti-image-uint8.nii.gz"
> ## These files should be viewable in, for example, FSLview
> ## Make sure you adjust the min/max values for proper visualization
> data <- readNIfTI(fname, verbose=TRUE)
  fname = /tmp/RtmpQHEm5y/test-nifti-image-uint8
  files = /tmp/RtmpQHEm5y/test-nifti-image-uint8.nii.gz
  nii   = /tmp/RtmpQHEm5y/test-nifti-image-uint8.nii.gz
  vox_offset = 352
  seek(fid) = 352
 # reorient = Method 1
 ## performPermutation
  trans =
     [,1] [,2] [,3]
[1,]    1    0    0
[2,]    0    1    0
[3,]    0    0    1
  sum(T != 0) = 3
       det(T) = 1
  sum(T != 0) == 3 && det(T) != 0 is TRUE
 ## else {
 ## real.dimensions = 32 32 32
 ## dim(out) = 32 32 32
> image(img.nifti, oma=rep(2,4), bg="white")
> image(data, oma=rep(2,4), bg="white")
> abs.err <- abs(data - img.nifti)
> image(as(abs.err, "nifti"), zlim=range(img.nifti), oma=rep(2,4),
+       bg="white")
> 
> ## Not run: 
> ##D ## Loop through all possible data types
> ##D datatypes <- list(code=c(2, 4, 8, 16, 64),
> ##D                   name=c("uint8", "int16", "int32", "float", "double"))
> ##D equal <- vector("list")
> ##D for (i in 1:length(datatypes$code)) {
> ##D   fname <- paste("test-nifti-image-", datatypes$name[i], sep="")
> ##D   fname = file.path(tempdir(), fname)
> ##D   rm(img.nifti)
> ##D   img.nifti <- nifti(img, datatype=datatypes$code[i])
> ##D   writeNIfTI(img.nifti, fname, verbose=TRUE)
> ##D   equal[[i]] <- all(readNIfTI(fname) == img)
> ##D }
> ##D names(equal) <- datatypes$name
> ##D unlist(equal)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("xyzt_units-methods")
> ### * xyzt_units-methods
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: xyzt_units-methods
> ### Title: Extract Image Attribute 'xyzt_units'
> ### Aliases: xyzt_units-methods xyzt_units-methods, xyzt_units
> ###   xyzt_units,nifti-method xyzt_units<- xyzt_units<-,nifti-method
> ###   xyzt.units xyzt.units,nifti-method xyzt.units<-
> ###   xyzt.units<-,nifti-method xyzt_units,niftiImage-method
> ###   xyzt_units<-,niftiImage-method
> 
> ### ** Examples
> 
> file = system.file("extdata", "example.nii.gz", package = "RNifti")
> img = RNifti::readNifti(file)
> xyzt_units(img)
[1] 10
> xyzt_units(img) = 8
> stopifnot(xyzt_units(img) ==  8)
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  12.556 2.705 12.684 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
